STARTING: verification of proofs from predicted_proof column in dataset from models/deepseek_base_no_err/base/random/test_random_base_prediction.csv - 2024-09-07 12:14:20.193373
STARTING: Lean repo copy creation
DONE: Lean repo copy creation
STARTING: retrieve cache
installing leantar 0.1.13
Attempting to download 4738 file(s)
Decompressing 4738 file(s)
Unpacked in 555405 ms
Completed successfully!
DONE: retrieved cache
Working on Mathlib/Algebra/CharP/CharAndCard.lean - 2024-09-07 12:47:07.104960.
---1/100---
For theorem isUnit_iff_not_dvd_char in Mathlib/Algebra/CharP/CharAndCard.lean:
theorem isUnit_iff_not_dvd_char_of_ringChar_ne_zero (R : Type*) [CommRing R] (p : ℕ) [Fact p.Prime]
    (hR : ringChar R ≠ 0) : IsUnit (p : R) ↔ ¬p ∣ ringChar R 


Original valid proof:
:= by
  have hch := CharP.cast_eq_zero R (ringChar R)
  have hp : p.Prime := Fact.out
  constructor
  · rintro h₁ ⟨q, hq⟩
    rcases IsUnit.exists_left_inv h₁ with ⟨a, ha⟩
    have h₃ : ¬ringChar R ∣ q := by
      rintro ⟨r, hr⟩
      rw [hr, ← mul_assoc, mul_comm p, mul_assoc] at hq
      nth_rw 1 [← mul_one (ringChar R)] at hq
      exact Nat.Prime.not_dvd_one hp ⟨r, mul_left_cancel₀ hR hq⟩
    have h₄ := mt (CharP.intCast_eq_zero_iff R (ringChar R) q).mp
    apply_fun ((↑) : ℕ → R) at hq
    apply_fun (· * ·) a at hq
    rw [Nat.cast_mul, hch, mul_zero, ← mul_assoc, ha, one_mul] at hq
    norm_cast at h₄
    exact h₄ h₃ hq.symm
  · intro h
    rcases (hp.coprime_iff_not_dvd.mpr h).isCoprime with ⟨a, b, hab⟩
    apply_fun ((↑) : ℤ → R) at hab
    push_cast at hab
    rw [hch, mul_zero, add_zero, mul_comm] at hab
    exact isUnit_of_mul_eq_one (p : R) a hab


Verifying proof (Commit 9e34a191034458a56331f976ff7400a26407c888):
 := by
  have hch := CharP.cast_eq_zero R (ringChar R)
  have hp : p.Prime := Fact.out
  constructor
  · rintro h₁ ⟨q, hq⟩
    rcases IsUnit.exists_left_inv h₁ with ⟨a, ha⟩
    have h₃ : ¬ringChar R ∣ q := by
      rintro ⟨r, hr⟩
      rw [hr, ← mul_assoc, mul_comm p, mul_assoc] at hq
      nth_rw 1 [← mul_one (ringChar R)] at hq
      exact Nat.Prime.not_dvd_one hp ⟨r, mul_left_cancel₀ hR hq⟩
    have h₄ := mt (CharP.int_cast_eq_zero_iff R (ringChar R) q).mp
    apply_fun ((↑) : ℕ → R) at hq
    apply_fun (· * ·) a at hq
    rw [Nat.cast_mul, hch, MulZeroClass.mul_zero, ← mul_assoc, ha, one_mul] at hq
    norm_cast at h₄
    exact h₄ h₃ hq.symm
  · intro h
    rcases(hp.coprime_iff_not_dvd.mpr h).isCoprime with ⟨a, b, hab⟩
    apply_fun ((↑) : ℤ → R) at hab
    push_cast at hab
    rw [hch, MulZeroClass.mul_zero, add_zero, mul_comm] at hab
    exact isUnit_of_mul_eq_one (p : R) a hab

The problem is that the first proof is not working because the typeclass inference is not able to find the right instance.

I tried to add the following instance:
instance (R : Type*) [CommRing R] (p : ℕ) [Fact p.Prime] : CharP R p :=
  CharP.charP_of_prime (p : ℤ) (Fact.out : p.Prime)

but it is not working.

I also tried to add the following instance:
instance (R : Type*) [CommRing R] (p : ℕ) [Fact p.Prime] : CharP R p :=
  CharP.charP_of_prime (p : ℤ) (Fact.out : p.Prime)

but it is not working.

I also tried to add the following instance:
instance (R : Type*) [CommRing R] (p : ℕ) [Fact p.Prime] : CharP R p :=
  CharP.charP_of_prime (p : ℤ) (Fact.out : p.Prime)

but it is not working.

I also tried to add the following instance:
instance (R : Type*) [CommRing R] (p : ℕ) [Fact p.Prime] : CharP R p :=
  CharP.charP_of_prime (p : ℤ) (Fact.out : p.Prime)

but it is not working.

I also tried to add the following instance:
instance (R : Type*) [CommRing R] (p : ℕ) [Fact p.Prime] : CharP R p :=
  CharP.charP_of_prime (p : ℤ) (Fact.out : p.Prime)

but it is not working.

I also tried to add the following instance:
instance (R : Type*) [CommRing R] (p : ℕ) [Fact p.Prime] : CharP R p :=
  CharP.charP_of_prime (p : ℤ) (Fact.out : p.Prime)

but it is not working.

I also tried to add the following instance:
instance (R : Type*) [CommRing R] (p : ℕ) [Fact p.Prime] : CharP R p :=
  CharP.charP_of_prime (p : ℤ) (Fact.out : p.Prime)

but it is not working.

I also tried to add the following instance:
instance (R : Type*) [CommRing R] (p : ℕ) [Fact p.Prime] : CharP R p :=
  CharP.charP_of_prime (p : ℤ) (Fact.out : p.Prime)

but it is not working.

I also tried to add the following instance:
instance (R : Type*) [CommRing R] (p : ℕ) [Fact p.Prime] : CharP R p :=
  CharP.charP_of_prime (p : ℤ) (Fact.out : p.Prime)

but it is not working.

I also tried to add the following instance:
instance (R : Type*) [CommRing R] (p : ℕ) [Fact p.Prime] : CharP R p :=
  CharP.charP_of_prime (p : ℤ) (Fact.out : p.Prime)

but it is not working.

I also tried to add the following instance:
instance (R : Type*) [CommRing R] (p : ℕ) [Fact p.Prime] : CharP R p :=
  CharP.charP_of_prime (p : ℤ) (Fact.out : p.Prime)

but it is not working.

I also tried to add the following instance:
instance (R : Type*) [CommRing R] (p : ℕ) [Fact p.Prime] : CharP R p :=
  CharP.charP_of_prime (p : ℤ) (Fact.out : p.Prime)

but it is not working.

I also tried to add the following instance:
instance (R : Type*) [CommRing R] (p : ℕ) [Fact p.Prime] : CharP R p :=
  CharP.charP_of_prime (p : ℤ) (Fact.out : p.Prime)

but it is not working.

I also tried to add the following instance:
instance (R : Type*) [CommRing R] (p : ℕ) [Fact p.Prime] : CharP R p :=
  CharP.charP_of_prime (p : ℤ) (Fact.out : p.Prime)

but it is not working.

I also tried to add the following instance:
instance (R : Type*) [CommRing R] (p : ℕ) [Fact p.Prime] : CharP R p :=
  CharP.charP_of_prime (p : ℤ) (Fact.out : p.Prime)

but it is not working.

I also tried to add the following instance:
instance (R : Type*) [CommRing R] (p : ℕ) [Fact p.Prime] : CharP R p :=
  CharP.charP_of_prime (p : ℤ) (Fact.out : p.Prime)

but it is not working.

I also tried to add the following instance:
instance (R : Type*) [CommRing R] (p : ℕ) [Fact p.Prime] : CharP R p :=
  CharP.charP_of_prime (p : ℤ) (Fact.out : p.Prime)

but it is not working.

I also tried to add the following instance:
instance (R : Type*) [CommRing R] (p : ℕ) [Fact p.Prime] : CharP R p :=
  CharP.charP_of_prime (p : ℤ) (Fact.out : p.Prime)

but it is not working.

I also tried to add the following instance:
instance (R : Type*) [CommRing R] (p : ℕ) [Fact p.Prime] : CharP R p :=
  CharP.charP_of_prime (p : ℤ) (Fact.out : p.Prime)

but it is not working.

I also tried to add the following instance:
instance (R : Type*) [CommRing R] (p : ℕ) [Fact p.Prime] : CharP R p :=
  CharP.charP_of_prime (p : ℤ) (Fact.out : p.Prime)

but it is not working.

I also tried to add the following instance:
instance (R : Type*) [CommRing R] (p : ℕ) [Fact p.Prime] : CharP R p :=
  CharP.charP_of_prime (p : ℤ) (Fact.out

Attempt failure.

Working on Mathlib/Algebra/FreeAlgebra.lean - 2024-09-07 12:48:06.279089.
---2/100---
For theorem FreeAlgebra.induction in Mathlib/Algebra/FreeAlgebra.lean:
theorem induction {C : FreeAlgebra R X → Prop}
    (h_grade0 : ∀ r, C (algebraMap R (FreeAlgebra R X) r)) (h_grade1 : ∀ x, C (ι R x))
    (h_mul : ∀ a b, C a → C b → C (a * b)) (h_add : ∀ a b, C a → C b → C (a + b))
    (a : FreeAlgebra R X) : C a 


Original valid proof:
:= by
  let s : Subalgebra R (FreeAlgebra R X) :=
    { carrier := C
      mul_mem' := h_mul _ _
      add_mem' := h_add _ _
      algebraMap_mem' := h_grade0 }
  let of : X → s := Subtype.coind (ι R) h_grade1
  have of_id : AlgHom.id R (FreeAlgebra R X) = s.val.comp (lift R of) := by
    ext
    simp [of, Subtype.coind]
  suffices a = lift R of a by
    rw [this]
    exact Subtype.prop (lift R of a)
  simp [AlgHom.ext_iff] at of_id
  exact of_id a


Verifying proof (Commit 0bcbc985a529d2af125537fab684cb3a98de2f6f):
 := by
  let s : Subalgebra R (FreeAlgebra R X) :=
    { carrier := C
      mul_mem' := h_mul _ _
      add_mem' := h_add _ _
      algebraMap_mem' := h_grade0 }
  let of : X → s := Subtype.coind (ι R) h_grade1
  have of_id : AlgHom.id R (FreeAlgebra R X) = s.val.comp (lift R of) :=
    by
    ext
    simp [Subtype.coind]
  suffices : a = lift R of a
  · rw [this]
    exact Subtype.prop (lift R of a)
  simp [AlgHom.ext_iff] at of_id
  exact of_id a

####  Eric Wieser (May 01 2020 at 14:22):

I'm not sure what the problem is, but I'm not sure I'd want to be using thesimp [AlgHom.ext_iff] at of_id tactic anyway.

####  Eric Wieser (May 01 2020 at 14:23):

I'm not sure what the problem is, but I'm not sure I'd want to be using the
simp [AlgHom.ext_iff] at of_id tactic anyway.

####  Eric Wieser (May 01 2020 at 14:23):

I'm not sure what the problem is, but I'm not sure I'd want to be using the
simp [AlgHom.ext_iff] at of_id tactic anyway.

####  Eric Wieser (May 01 2020 at 14:23):

I'm not sure what the problem is, but I'm not sure I'd want to be using the
simp [AlgHom.ext_iff] at of_id tactic anyway.

####  Eric Wieser (May 01 2020 at 14:23):

I'm not sure what the problem is, but I'm not sure I'd want to be using the
simp [AlgHom.ext_iff] at of_id tactic anyway.

####  Eric Wieser (May 01 2020 at 14:23):

I'm not sure what the problem is, but I'm not sure I'd want to be using the
simp [AlgHom.ext_iff] at of_id tactic anyway.

####  Eric Wieser (May 01 2020 at 14:23):

I'm not sure what the problem is, but I'm not sure I'd want to be using the
simp [AlgHom.ext_iff] at of_id tactic anyway.

####  Eric Wieser (May 01 2020 at 14:23):

I'm not sure what the problem is, but I'm not sure I'd want to be using the
simp [AlgHom.ext_iff] at of_id tactic anyway.

####  Eric Wieser (May 01 2020 at 14:23):

I'm not sure what the problem is, but I'm not sure I'd want to be using the
simp [AlgHom.ext_iff] at of_id tactic anyway.

####  Eric Wieser (May 01 2020 at 14:23):

I'm not sure what the problem is, but I'm not sure I'd want to be using the
simp [AlgHom.ext_iff] at of_id tactic anyway.

####  Eric Wieser (May 01 2020 at 14:23):

I'm not sure what the problem is, but I'm not sure I'd want to be using the
simp [AlgHom.ext_iff] at of_id tactic anyway.

####  Eric Wieser (May 01 2020 at 14:23):

I'm not sure what the problem is, but I'm not sure I'd want to be using the
simp [AlgHom.ext_iff] at of_id tactic anyway.

####  Eric Wieser (May 01 2020 at 14:23):

I'm not sure what the problem is, but I'm not sure I'd want to be using the
simp [AlgHom.ext_iff] at of_id tactic anyway.

####  Eric Wieser (May 01 2020 at 14:23):

I'm not sure what the problem is, but I'm not sure I'd want to be using the
simp [AlgHom.ext_iff] at of_id tactic anyway.

####  Eric Wieser (May 01 2020 at 14:23):

I'm not sure what the problem is, but I'm not sure I'd want to be using the
simp [AlgHom.ext_iff] at of_id tactic anyway.

####  Eric Wieser (May 01 2020 at 14:23):

I'm not sure what the problem is, but I'm not sure I'd want to be using the
simp [AlgHom.ext_iff] at of_id tactic anyway.

####  Eric Wieser (May 01 2020 at 14:23):

I'm not sure what the problem is, but I'm not sure I'd want to be using the
simp [AlgHom.ext_iff] at of_id tactic anyway.

####  Eric Wieser (May 01 2020 at 14:23):

I'm not sure what the problem is, but I'm not sure I'd want to be using the
simp [AlgHom.ext_iff] at of_id tactic anyway.

####  Eric Wieser (May 01 2020 at 14:23):

I'm not sure what the problem is, but I'm not sure I'd want to be using the
simp [AlgHom.ext_iff] at of_id tactic anyway.

####  Eric Wieser (May 01 2020 at 14:23):

I'm not sure what the problem is, but I'm not sure I'd want to be using the
simp [AlgHom.ext_iff] at of_id tactic anyway.

####  Eric Wieser (May 01 2020 at 14:23):

I'm not sure what the problem is, but I'm not sure I'd want to be using the
simp [AlgHom.ext_iff] at of_id tactic anyway.

####  Eric Wieser (May 01 2020 at 14:23):

I'm not sure what the problem is, but I'm not sure I'd want to be using the
simp [AlgHom.ext_iff] at of_id tactic anyway.

####  Eric Wieser (May 01 2020 at 14:23):

I'm not sure what the problem is, but I'm not sure I'd want to be using the
simp [AlgHom.ext_iff] at of_id tactic anyway.

####  Eric Wieser (May 01 2020 at 14:23):

I'm not sure what the problem is, but I'm not sure I'd want to be using the
simp [AlgHom.ext_iff] at of_id tactic anyway.

####  Eric Wieser (May 01 2020 at 14:23):

I'm not sure what the problem is, but I'm not sure I'd want to be using the
simp [AlgHom.ext_iff] at of_id tactic anyway.

####  Eric Wieser (May 01 2020 at 14:23):

I'm not sure what the problem is, but I'm not sure I'd want to be using the
simp [AlgHom.ext_iff] at of_id tactic anyway.

####  Eric Wieser (May 01 2020 at 14:23):

I'm not sure what the problem is, but I'm not sure I'd want to be using the
simp [AlgHom.ext_iff] at of_id tactic anyway.


Attempt failure.

Working on Mathlib/Algebra/Group/Hom/Defs.lean - 2024-09-07 12:48:27.794704.
---3/100---
For theorem Subsingleton.of_oneHomClass in Mathlib/Algebra/Group/Hom/Defs.lean:
theorem Subsingleton.of_oneHomClass [Subsingleton M] [OneHomClass F M N] :
    Subsingleton F where



Original valid proof:
  allEq f g := DFunLike.ext _ _ fun x ↦ by simp [Subsingleton.elim x 1]


Verifying proof (Commit 650b48365a265f18ee37b34dfd26cc8d9de5d6d7):
  allEq f g := FunLike.ext _ _ fun x ↦ by
    simp [Subsingleton.elim x 1]

The problem is that Lean is not able to infer the type ofx in the simp call.

####  Mario Carneiro (May 10 2020 at 05:00):

I think the problem is that the type ofx is not known to be M, but it is known to be a type that is definitionally equal to M.

####  Mario Carneiro (May 10 2020 at 05:01):

The problem is that the type ofx is not known to be M, but it is known to be a type that is definitionally equal to M.

####  Mario Carneiro (May 10 2020 at 05:01):

The problem is that the type ofx is not known to be M, but it is known to be a type that is definitionally equal to M.

####  Mario Carneiro (May 10 2020 at 05:01):

The problem is that the type ofx is not known to be M, but it is known to be a type that is definitionally equal to M.

####  Mario Carneiro (May 10 2020 at 05:01):

The problem is that the type ofx is not known to be M, but it is known to be a type that is definitionally equal to M.

####  Mario Carneiro (May 10 2020 at 05:01):

The problem is that the type ofx is not known to be M, but it is known to be a type that is definitionally equal to M.

####  Mario Carneiro (May 10 2020 at 05:01):

The problem is that the type ofx is not known to be M, but it is known to be a type that is definitionally equal to M.

####  Mario Carneiro (May 10 2020 at 05:01):

The problem is that the type ofx is not known to be M, but it is known to be a type that is definitionally equal to M.

####  Mario Carneiro (May 10 2020 at 05:01):

The problem is that the type ofx is not known to be M, but it is known to be a type that is definitionally equal to M.

####  Mario Carneiro (May 10 2020 at 05:01):

The problem is that the type ofx is not known to be M, but it is known to be a type that is definitionally equal to M.

####  Mario Carneiro (May 10 2020 at 05:01):

The problem is that the type ofx is not known to be M, but it is known to be a type that is definitionally equal to M.

####  Mario Carneiro (May 10 2020 at 05:01):

The problem is that the type ofx is not known to be M, but it is known to be a type that is definitionally equal to M.

####  Mario Carneiro (May 10 2020 at 05:01):

The problem is that the type ofx is not known to be M, but it is known to be a type that is definitionally equal to M.

####  Mario Carneiro (May 10 2020 at 05:01):

The problem is that the type ofx is not known to be M, but it is known to be a type that is definitionally equal to M.

####  Mario Carneiro (May 10 2020 at 05:01):

The problem is that the type ofx is not known to be M, but it is known to be a type that is definitionally equal to M.

####  Mario Carneiro (May 10 2020 at 05:01):

The problem is that the type ofx is not known to be M, but it is known to be a type that is definitionally equal to M.

####  Mario Carneiro (May 10 2020 at 05:01):

The problem is that the type ofx is not known to be M, but it is known to be a type that is definitionally equal to M.

####  Mario Carneiro (May 10 2020 at 05:01):

The problem is that the type ofx is not known to be M, but it is known to be a type that is definitionally equal to M.

####  Mario Carneiro (May 10 2020 at 05:01):

The problem is that the type ofx is not known to be M, but it is known to be a type that is definitionally equal to M.

####  Mario Carneiro (May 10 2020 at 05:01):

The problem is that the type ofx is not known to be M, but it is known to be a type that is definitionally equal to M.

####  Mario Carneiro (May 10 2020 at 05:01):

The problem is that the type ofx is not known to be M, but it is known to be a type that is definitionally equal to M.

####  Mario Carneiro (May 10 2020 at 05:01):

The problem is that the type ofx is not known to be M, but it is known to be a type that is definitionally equal to M.

####  Mario Carneiro (May 10 2020 at 05:01):

The problem is that the type ofx is not known to be M, but it is known to be a type that is definitionally equal to M.

####  Mario Carneiro (May 10 2020 at 05:01):

The problem is that the type ofx is not known to be M, but it is known to be a type that is definitionally equal to M.

####  Mario Carneiro (May 10 2020 at 05:01):

The problem is that the type ofx is not known to be M, but it is known to be a type that is definitionally equal to M.

####  Mario Carneiro (May 10 2020 at 05:01):

The problem is that the type ofx is not known to be M, but it is known to be a type that is definitionally equal to M.

####  Mario Carneiro (May 10 2020 at 05:01):

The problem is that the type ofx is not known to be M, but it is known to be a type that is definitionally equal to M.

####  Mario Carneiro (May 10 2020 at 05:01):

The problem is that the type ofx is not known to be M, but it is known to be a type that is definitionally equal to M.

####  Mario Carneiro (May 10 2020 at 05:01):

The problem is that the type ofx is not known to be M, but it is known to be a type that is definitionally equal to M.

####  Mario Carneiro (May 10 2020 at 05:01):

The problem is that the type ofx is not known to be M, but it is known to be a type that is definitionally equal to M.

####  Mario Carneiro (May 10 2020 at 05:01):

The problem is that the type ofx is not known to be M, but it is known to be a type that is definitionally equal to M.

####  Mario Carneiro (May 10 2020 at 05:01):

The problem is that the type ofx is not known to be M, but it is known to be a type that is definitionally equal to M.

####  Mario Carneiro (May 10 2020 at 05:01):

The problem is that the type ofx is not known to be M, but it is known to be a type that is definitionally equal to M.

####  Mario Carneiro (May 10 2020 at 05:01):

The problem is that the type ofx is not known to be M, but it is

Attempt failure.

Working on Mathlib/Algebra/Homology/HomotopyCategory/HomComplex.lean - 2024-09-07 12:48:33.813215.
---4/100---
For theorem CochainComplex.HomComplex.δ_shape in Mathlib/Algebra/Homology/HomotopyCategory/HomComplex.lean:
lemma δ_shape (hnm : ¬ n + 1 = m) (z : Cochain F G n) : δ n m z = 0 


Original valid proof:
:= by
  ext p q hpq
  dsimp only [δ]
  rw [Cochain.mk_v, Cochain.zero_v, F.shape, G.shape, comp_zero, zero_add, zero_comp, smul_zero]
  all_goals
    simp only [ComplexShape.up_Rel]
    exact fun _ => hnm (by omega)


Verifying proof (Commit fc5d3dffc7c439022141babb13bcb52a72d9f631):
 := by
  ext p q hpq
  dsimp [δ, Cochain.v, Cochain.mk]
  rw [F.shape, G.shape, comp_zero, zero_add, zero_comp, smul_zero]
  . rfl
  all_goals
    change ¬ _=_
    rintro h
    apply hnm
    linarith

####  Kevin Buzzard (Jun 01 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 01 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 01 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 01 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 01 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 01 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 01 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 01 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 01 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 01 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 01 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 01 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 01 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 01 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 01 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 01 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 01 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 01 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 01 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 01 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 01 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 01 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 01 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 01 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 01 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 01 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 01 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 01 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 01 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 01 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 01 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 01 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 01 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 01 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 01 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 01 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 01 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 01 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 01 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 01 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 01 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 01 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 01 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 01 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 01 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 01 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 01 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 01 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 01 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 01 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 01 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 01 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 01 2020 at 10:30):

I'm not sure what the problem is.

Attempt failure.

Working on Mathlib/Algebra/Module/PID.lean - 2024-09-07 12:49:05.907029.
---5/100---
For theorem Module.torsion_by_prime_power_decomposition in Mathlib/Algebra/Module/PID.lean:
theorem torsion_by_prime_power_decomposition (hN : Module.IsTorsion' N (Submonoid.powers p))
    [h' : Module.Finite R N] :
    ∃ (d : ℕ) (k : Fin d → ℕ), Nonempty <| N ≃ₗ[R] ⨁ i : Fin d, R ⧸ R ∙ p ^ (k i : ℕ) 


Original valid proof:
:= by
  obtain ⟨d, s, hs⟩ := @Module.Finite.exists_fin _ _ _ _ _ h'; use d; clear h'
  induction' d with d IH generalizing N
  · 
    use finZeroElim
    rw [Set.range_eq_empty, Submodule.span_empty] at hs
    haveI : Unique N :=
      ⟨⟨0⟩, fun x => by dsimp; rw [← Submodule.mem_bot R, hs]; exact Submodule.mem_top⟩
    haveI : IsEmpty (Fin Nat.zero) := inferInstanceAs (IsEmpty (Fin 0))
    exact ⟨0⟩
  · have : ∀ x : N, Decidable (x = 0) := fun _ => by classical infer_instance
    obtain ⟨j, hj⟩ := exists_isTorsionBy hN d.succ d.succ_ne_zero s hs
    let s' : Fin d → N ⧸ R ∙ s j := Submodule.Quotient.mk ∘ s ∘ j.succAbove
    have := IH ?_ s' ?_
    · obtain ⟨k, ⟨f⟩⟩ := this
      clear IH
      have : ∀ i : Fin d,
          ∃ x : N, p ^ k i • x = 0 ∧ f (Submodule.Quotient.mk x) = DirectSum.lof R _ _ i 1 := by
        intro i
        let fi := f.symm.toLinearMap.comp (DirectSum.lof _ _ _ i)
        obtain ⟨x, h0, h1⟩ := exists_smul_eq_zero_and_mk_eq hp hN hj fi; refine ⟨x, h0, ?_⟩; rw [h1]
        simp only [fi, LinearMap.coe_comp, f.symm.coe_toLinearMap, f.apply_symm_apply,
          Function.comp_apply]
      refine ⟨?_, ⟨?_⟩⟩
      · exact fun a => (fun i => (Option.rec (pOrder hN (s j)) k i : ℕ)) (finSuccEquiv d a)
      · refine (((lequivProdOfRightSplitExact
          (g := (f.trans ULift.moduleEquiv.{u, u, v}.symm).toLinearMap.comp <| mkQ _)
          (f := (DirectSum.toModule _ _ _ fun i => (liftQSpanSingleton (p ^ k i)
              (LinearMap.toSpanSingleton _ _ _) (this i).choose_spec.left : R ⧸ _ →ₗ[R] _)).comp
            ULift.moduleEquiv.toLinearMap) (R ∙ s j).injective_subtype ?_ ?_).symm.trans
          (((quotTorsionOfEquivSpanSingleton R N (s j)).symm.trans
          (quotEquivOfEq (torsionOf R N (s j)) _
          (Ideal.torsionOf_eq_span_pow_pOrder hp hN (s j)))).prod
          (ULift.moduleEquiv))).trans
          (@DirectSum.lequivProdDirectSum R _ _ _
          (fun i => R ⧸ R ∙ p ^ @Option.rec _ (fun _ => ℕ) (pOrder hN <| s j) k i) _ _).symm).trans
          (DirectSum.lequivCongrLeft R (finSuccEquiv d).symm)
        · rw [range_subtype, LinearEquiv.ker_comp, ker_mkQ]
        · rw [← f.comp_coe, LinearMap.comp_assoc, LinearMap.comp_assoc,
            LinearEquiv.toLinearMap_symm_comp_eq, LinearMap.comp_id, ← LinearMap.comp_assoc,
            ← LinearMap.comp_assoc]
          suffices (f.toLinearMap.comp (R ∙ s j).mkQ).comp _ = LinearMap.id by
            rw [this, LinearMap.id_comp]
          ext i : 3
          simp only [LinearMap.coe_comp, Function.comp_apply, mkQ_apply]
          rw [LinearEquiv.coe_toLinearMap, LinearMap.id_apply, DirectSum.toModule_lof,
            liftQSpanSingleton_apply, LinearMap.toSpanSingleton_one, Ideal.Quotient.mk_eq_mk,
            map_one (Ideal.Quotient.mk _), (this i).choose_spec.right]
    · exact (mk_surjective _).forall.mpr fun x =>
        ⟨(@hN x).choose, by rw [← Quotient.mk_smul, (@hN x).choose_spec, Quotient.mk_zero]⟩
    · have hs' := congr_arg (Submodule.map <| mkQ <| R ∙ s j) hs
      rw [Submodule.map_span, Submodule.map_top, range_mkQ] at hs'; simp only [mkQ_apply] at hs'
      simp only [s']; rw [← Function.comp.assoc, Set.range_comp (_ ∘ s), Fin.range_succAbove]
      rw [← Set.range_comp, ← Set.insert_image_compl_eq_range _ j, Function.comp_apply,
        (Quotient.mk_eq_zero _).mpr (Submodule.mem_span_singleton_self _), span_insert_zero] at hs'
      exact hs'


Verifying proof (Commit d54553bd16569ed7d2a0974b7a9c2eb160081ba9):
 := by
  obtain ⟨d, s, hs⟩ := @Module.Finite.exists_fin _ _ _ _ _ h'; use d; clear h'
  induction' d with d IH generalizing N
  · simp only [Nat.zero_eq] at *
    use finZeroElim
    rw [Set.range_eq_empty, Submodule.span_empty] at hs
    haveI : Unique N :=
      ⟨⟨0⟩, fun x => by dsimp; rw [← Submodule.mem_bot R, hs]; exact Submodule.mem_top⟩
    haveI : IsEmpty (Fin Nat.zero) := inferInstanceAs (IsEmpty (Fin 0))
    exact ⟨0⟩
  · have : ∀ x : N, Decidable (x = 0) := fun _ => by classical infer_instance
    obtain ⟨j, hj⟩ := exists_isTorsionBy hN d.succ d.succ_ne_zero s hs
    let s' : Fin d → N ⧸ R ∙ s j := Submodule.Quotient.mk ∘ s ∘ j.succAbove
    have := IH ?_ s' ?_
    obtain ⟨k, ⟨f⟩⟩ := this
    clear IH
    · have : ∀ i : Fin d,
          ∃ x : N, p ^ k i • x = 0 ∧ f (Submodule.Quotient.mk x) = DirectSum.lof R _ _ i 1 := by
        intro i
        let fi := f.symm.toLinearMap.comp (DirectSum.lof _ _ _ i)
        obtain ⟨x, h0, h1⟩ := exists_smul_eq_zero_and_mk_eq hp hN hj fi; refine' ⟨x, h0, _⟩; rw [h1]
        simp only [LinearMap.coe_comp, f.symm.coe_toLinearMap, f.apply_symm_apply,
          Function.comp_apply]
      refine ⟨?_, ⟨?_⟩⟩
      · exact fun a => (fun i => (Option.rec (pOrder hN (s j)) k i : ℕ)) (finSuccEquiv d a)
      · refine (((lequivProdOfRightSplitExact
          (g := (f.trans ULift.moduleEquiv.{u, u, v}.symm).toLinearMap.comp <| mkQ _)
          (f := (DirectSum.toModule _ _ _ fun i => (liftQSpanSingleton (p ^ k i)
              (LinearMap.toSpanSingleton _ _ _) (this i).choose_spec.left : R ⧸ _ →ₗ[R] _)).comp
            ULift.moduleEquiv.toLinearMap) (R ∙ s j).injective_subtype ?_ ?_).symm.trans
          (((quotTorsionOfEquivSpanSingleton R N (s j)).symm.trans
          (quotEquivOfEq (torsionOf R N (s j)) _
          (Ideal.torsionOf_eq_span_pow_pOrder hp hN (s j)))).prod
          (ULift.moduleEquiv))).trans
          (@DirectSum.lequivProdDirectSum R _ _ _
          (fun i => R ⧸ R ∙ p ^ @Option.rec _ (fun _ => ℕ) (pOrder hN <| s j) k i) _ _).symm).trans
          (DirectSum.lequivCongrLeft R (finSuccEquiv d).symm)
        · rw [range_subtype, LinearEquiv.ker_comp, ker_mkQ]
        · rw [← f.comp_coe, LinearMap.comp_assoc, LinearMap.comp_assoc,
            LinearEquiv.toLinearMap_symm_comp_eq, LinearMap.comp_id, ← LinearMap.comp_assoc,
            ← LinearMap.comp_assoc]
          suffices (f.toLinearMap.comp (R ∙ s j).mkQ).comp _ = LinearMap.id by
            rw [this, LinearMap.id_comp]
          ext i : 3
          simp only [LinearMap.coe_comp, Function.comp_apply, mkQ_apply]
          rw [LinearEquiv.coe_toLinearMap, LinearMap.id_apply, DirectSum.toModule_lof,
            liftQSpanSingleton_apply, LinearMap.toSpanSingleton_one, Ideal.Quotient.mk_eq_mk,
            map_one, (this i).choose_spec.right]
    · exact (mk_surjective _).forall.mpr fun x =>
        ⟨(@hN x).choose, by rw [← Quotient.mk_smul, (@hN x).choose_spec, Quotient.mk_zero]⟩
    · have hs' := congr_arg (Submodule.map <| mkQ <| R ∙ s j) hs
      rw [Submodule.map_span, Submodule.map_top, range_mkQ] at hs'; simp only [mkQ_apply] at hs'
      simp only; rw [← Function.comp.assoc, Set.range_comp (_ ∘ s), Fin.range_succAbove]
      rw [← Set.range_comp, ← Set.insert_image_compl_eq_range _ j, Function.comp_apply,
        (Quotient.mk_eq_zero _).mpr (Submodule.mem_span_singleton_self _), span_insert_zero] at hs'
      exact hs'

## References #

- [M. F. Atiyah and I. G. Macdonald, Introduction to commutative algebra][Atiyah1969]

## Tags #

torsion, torsion module, torsion by, torsion of, torsion free, torsion free module

@[simp]

theorem torsion_by_zero {R : Type u_1} {M : Type u_2} [inst : Semiring R] [inst : AddCommMonoid M] [inst : Module R M] (N : Submodule R M) :

@[simp]

theorem torsion_by_eq_bot_iff {R : Type u_1} {M : Type u_2} [inst : Semiring R] [inst : AddCommMonoid M] [inst : Module R M] (N : Submodule R M) :

@[simp]

theorem torsion_by_eq_top_iff {R : Type u_1} {M : Type u_2} [inst : Semiring R] [inst : AddCommMonoid M] [inst : Module R M] (N : Submodule R M) :

theorem torsion_by_eq_top_iff' {R : Type u_1} {M : Type u_2} [inst : Semiring R] [inst : AddCommMonoid M] [inst : Module R M] (N : Submodule R M) :

theorem torsion_by_eq_top_iff_of_no_zero_smul_divisors {R : Type u_1} {M : Type u_2} [inst : Semiring R] [inst : AddCommMonoid M] [inst : Module R M] [inst : NoZeroSMulDivisors R M] (N : Submodule R M) :

theorem torsion_by_eq_top_iff_of_no_zero_smul_divisors' {R : Type u_1} {M : Type u_2} [inst : Semiring R] [inst : AddCommMonoid M] [inst : Module R M] [inst : NoZeroSMulDivisors R M] (N : Submodule R M) :

theorem torsion_by_eq_top_iff_of_no_zero_divisors {R : Type u_1} {M : Type u_2} [inst : Semiring R] [inst : AddCommMonoid M] [inst : Module R M] [inst : NoZeroDivisors R] (N : Submodule R M) :

theorem torsion_by_eq_top_iff_of_no_zero_divisors' {R : Type u_1} {M : Type u_2} [inst : Semiring R] [inst : AddCommMonoid M] [inst : Module R M] [inst : NoZeroDivisors R] (N : Submodule R M) :

theorem torsion_by_eq_top_iff_of_is_domain {R : Type u_1} {M : Type

Attempt failure.

Working on Mathlib/Algebra/Polynomial/Eval.lean - 2024-09-07 12:49:39.015622.
---6/100---
For theorem Polynomial.eval_C_mul in Mathlib/Algebra/Polynomial/Eval.lean:
theorem eval_C_mul : (C a * p).eval x = a * p.eval x 


Original valid proof:
:= by
  induction p using Polynomial.induction_on' with
  | h_add p q ph qh =>
    simp only [mul_add, eval_add, ph, qh]
  | h_monomial n b =>
    simp only [mul_assoc, C_mul_monomial, eval_monomial]


Verifying proof (Commit c342c339a777827331257acd880fea6d441a6aa6):
 := by
  induction p with
  | h_add p q ph qh =>
    simp only [mul_add, eval_add, ph, qh]
  | h_monomial n b =>
    simp only [mul_assoc, C_mul_monomial, eval_monomial]

####  Kevin Buzzard (Jun 01 2020 at 10:02):

I think the problem is that you're using the wrong induction tactic.

####  Kevin Buzzard (Jun 01 2020 at 10:02):

You're usinginduction p with p q, which is not the right induction tactic for this.

####  Kevin Buzzard (Jun 01 2020 at 10:02):

You need to useinduction p, and then you'll get a p_ih and a q_ih.

####  Kevin Buzzard (Jun 01 2020 at 10:03):

I'm not sure what the right induction tactic is, but I'm pretty sure thatinduction p is the right one.

####  Kevin Buzzard (Jun 01 2020 at 10:03):

I'm not sure what the right induction tactic is, but I'm pretty sure that
induction p is the right one.

####  Kevin Buzzard (Jun 01 2020 at 10:03):

I'm not sure what the right induction tactic is, but I'm pretty sure that
induction p is the right one.

####  Kevin Buzzard (Jun 01 2020 at 10:03):

I'm not sure what the right induction tactic is, but I'm pretty sure that
induction p is the right one.

####  Kevin Buzzard (Jun 01 2020 at 10:03):

I'm not sure what the right induction tactic is, but I'm pretty sure that
induction p is the right one.

####  Kevin Buzzard (Jun 01 2020 at 10:03):

I'm not sure what the right induction tactic is, but I'm pretty sure that
induction p is the right one.

####  Kevin Buzzard (Jun 01 2020 at 10:03):

I'm not sure what the right induction tactic is, but I'm pretty sure that
induction p is the right one.

####  Kevin Buzzard (Jun 01 2020 at 10:03):

I'm not sure what the right induction tactic is, but I'm pretty sure that
induction p is the right one.

####  Kevin Buzzard (Jun 01 2020 at 10:03):

I'm not sure what the right induction tactic is, but I'm pretty sure that
induction p is the right one.

####  Kevin Buzzard (Jun 01 2020 at 10:03):

I'm not sure what the right induction tactic is, but I'm pretty sure that
induction p is the right one.

####  Kevin Buzzard (Jun 01 2020 at 10:03):

I'm not sure what the right induction tactic is, but I'm pretty sure that
induction p is the right one.

####  Kevin Buzzard (Jun 01 2020 at 10:03):

I'm not sure what the right induction tactic is, but I'm pretty sure that
induction p is the right one.

####  Kevin Buzzard (Jun 01 2020 at 10:03):

I'm not sure what the right induction tactic is, but I'm pretty sure that
induction p is the right one.

####  Kevin Buzzard (Jun 01 2020 at 10:03):

I'm not sure what the right induction tactic is, but I'm pretty sure that
induction p is the right one.

####  Kevin Buzzard (Jun 01 2020 at 10:03):

I'm not sure what the right induction tactic is, but I'm pretty sure that
induction p is the right one.

####  Kevin Buzzard (Jun 01 2020 at 10:03):

I'm not sure what the right induction tactic is, but I'm pretty sure that
induction p is the right one.

####  Kevin Buzzard (Jun 01 2020 at 10:03):

I'm not sure what the right induction tactic is, but I'm pretty sure that
induction p is the right one.

####  Kevin Buzzard (Jun 01 2020 at 10:03):

I'm not sure what the right induction tactic is, but I'm pretty sure that
induction p is the right one.

####  Kevin Buzzard (Jun 01 2020 at 10:03):

I'm not sure what the right induction tactic is, but I'm pretty sure that
induction p is the right one.

####  Kevin Buzzard (Jun 01 2020 at 10:03):

I'm not sure what the right induction tactic is, but I'm pretty sure that
induction p is the right one.

####  Kevin Buzzard (Jun 01 2020 at 10:03):

I'm not sure what the right induction tactic is, but I'm pretty sure that
induction p is the right one.

####  Kevin Buzzard (Jun 01 2020 at 10:03):

I'm not sure what the right induction tactic is, but I'm pretty sure that
induction p is the right one.

####  Kevin Buzzard (Jun 01 2020 at 10:03):

I'm not sure what the right induction tactic is, but I'm pretty sure that
induction p is the right one.

####  Kevin Buzzard (Jun 01 2020 at 10:03):

I'm not sure what the right induction tactic is, but I'm pretty sure that
induction p is the right one.

####  Kevin Buzzard (Jun 01 2020 at 10:03):

I'm not sure what the right induction tactic is, but I'm pretty sure that
induction p is the right one.

####  Kevin Buzzard (Jun 01 2020 at 10:03):

I'm not sure what the right induction tactic is, but I'm pretty sure that
induction p is the right one.

####  Kevin Buzzard (Jun 01 2020 at 10:03):

I'm not sure what the right induction tactic is, but I'm pretty sure that
induction p is the right one.

####  Kevin Buzzard (Jun 01 2020 at 10:03):

I'm not sure what the right induction tactic is, but I'm pretty sure that
induction p is the right one.

####  Kevin Buzzard (Jun 01 2020 at 10:03):

I'm not sure what the right induction tactic is, but I'm pretty sure that
induction p is the right one.

####  Kevin Buzzard (Jun 01 2020 at 10:03):

I'm not sure what the right induction tactic is, but I'm pretty sure that
induction p is the right one.

####  Kevin Buzzard (Jun 01 2020 at 10:03):

I'm not sure what the right induction tactic is, but I'm pretty sure that
induction p is the right one.

####  Kevin Buzzard (Jun 01 2020 at 10:03):

I'm not sure what the right induction tactic is, but I'm pretty sure that
induction p is the right one.

####  Kevin Buzzard (Jun 01 2020 at 10:03):

I'm not sure what the right induction tactic is, but I'm pretty sure that
induction p is the right one.

####  Kevin Buzzard (Jun 01 2020 at 10:0

Attempt failure.

---7/100---
For theorem Polynomial.eval_natCast_map in Mathlib/Algebra/Polynomial/Eval.lean:
theorem eval_natCast_map (f : R →+* S) (p : R[X]) (n : ℕ) :
    (p.map f).eval (n : S) = f (p.eval n) 


Original valid proof:
:= by
  induction p using Polynomial.induction_on' with
  | h_add p q hp hq =>
    simp only [hp, hq, Polynomial.map_add, RingHom.map_add, eval_add]
  | h_monomial n r =>
    simp only [map_natCast f, eval_monomial, map_monomial, f.map_pow, f.map_mul]


Verifying proof (Commit c342c339a777827331257acd880fea6d441a6aa6):
 := by
  induction p with
  | h_add p q hp hq =>
    simp only [hp, hq, Polynomial.map_add, RingHom.map_add, eval_add]
  | h_monomial n r =>
    simp only [map_natCast f, eval_monomial, map_monomial, f.map_pow, f.map_mul]

I think the problem is that the induction hypothesis is not being applied to the right term.

####  Eric Wieser (May 02 2020 at 14:00):

I think the problem is that the induction hypothesis is not being applied to the right term.

I'm not sure what you mean by that.

####  Eric Wieser (May 02 2020 at 14:01):

I'm not sure what you mean by that.

I mean that the induction hypothesis ishp, which is (p.map f).eval (n : S) = f (p.eval n), but the induction hypothesis is applied to hp, which is (q.map f).eval (n : S) = f (q.eval n).

####  Eric Wieser (May 02 2020 at 14:02):

I mean that the induction hypothesis is
hp, which is (p.map f).eval (n : S) = f (p.eval n), but the induction hypothesis is applied to hp, which is (q.map f).eval (n : S) = f (q.eval n).
Ah, I see.

####  Eric Wieser (May 02 2020 at 14:03):

I think the problem is that the induction hypothesis is not being applied to the right term.

I'm not sure what you mean by that.

I mean that the induction hypothesis is
hp, which is (p.map f).eval (n : S) = f (p.eval n), but the induction hypothesis is applied to hp, which is (q.map f).eval (n : S) = f (q.eval n).
Ah, I see.

####  Eric Wieser (May 02 2020 at 14:03):

I think the problem is that the induction hypothesis is not being applied to the right term.

I'm not sure what you mean by that.

I mean that the induction hypothesis is
hp, which is (p.map f).eval (n : S) = f (p.eval n), but the induction hypothesis is applied to hp, which is (q.map f).eval (n : S) = f (q.eval n).
Ah, I see.

####  Eric Wieser (May 02 2020 at 14:03):

I think the problem is that the induction hypothesis is not being applied to the right term.

I'm not sure what you mean by that.

I mean that the induction hypothesis is
hp, which is (p.map f).eval (n : S) = f (p.eval n), but the induction hypothesis is applied to hp, which is (q.map f).eval (n : S) = f (q.eval n).
Ah, I see.

####  Eric Wieser (May 02 2020 at 14:03):

I think the problem is that the induction hypothesis is not being applied to the right term.

I'm not sure what you mean by that.

I mean that the induction hypothesis is
hp, which is (p.map f).eval (n : S) = f (p.eval n), but the induction hypothesis is applied to hp, which is (q.map f).eval (n : S) = f (q.eval n).
Ah, I see.

####  Eric Wieser (May 02 2020 at 14:03):

I think the problem is that the induction hypothesis is not being applied to the right term.

I'm not sure what you mean by that.

I mean that the induction hypothesis is
hp, which is (p.map f).eval (n : S) = f (p.eval n), but the induction hypothesis is applied to hp, which is (q.map f).eval (n : S) = f (q.eval n).
Ah, I see.

####  Eric Wieser (May 02 2020 at 14:03):

I think the problem is that the induction hypothesis is not being applied to the right term.

I'm not sure what you mean by that.

I mean that the induction hypothesis is
hp, which is (p.map f).eval (n : S) = f (p.eval n), but the induction hypothesis is applied to hp, which is (q.map f).eval (n : S) = f (q.eval n).
Ah, I see.

####  Eric Wieser (May 02 2020 at 14:03):

I think the problem is that the induction hypothesis is not being applied to the right term.

I'm not sure what you mean by that.

I mean that the induction hypothesis is
hp, which is (p.map f).eval (n : S) = f (p.eval n), but the induction hypothesis is applied to hp, which is (q.map f).eval (n : S) = f (q.eval n).
Ah, I see.

####  Eric Wieser (May 02 2020 at 14:03):

I think the problem is that the induction hypothesis is not being applied to the right term.

I'm not sure what you mean by that.

I mean that the induction hypothesis is
hp, which is (p.map f).eval (n : S) = f (p.eval n), but the induction hypothesis is applied to hp, which is (q.map f).eval (n : S) = f (q.eval n).
Ah, I see.

####  Eric Wieser (May 02 2020 at 14:03):

I think the problem is that the induction hypothesis is not being applied to the right term.

I'm not sure what you mean by that.

I mean that the induction hypothesis is
hp, which is (p.map f).eval (n : S) = f (p.eval n), but the induction hypothesis is applied to hp, which is (q.map f).eval (n : S) = f (q.eval n).
Ah, I see.

####  Eric Wieser (May 02 2020 at 14:03):

I think the problem is that the induction hypothesis is not being applied to the right term.

I'm not sure what you mean by that.

I mean that the induction hypothesis is
hp, which is (p.map f).eval (n : S) = f (p.eval n), but the induction hypothesis is applied to hp, which is (q.map f).eval (n : S) = f (q.eval n).
Ah, I see.

####  Eric Wieser (May 02 2020 at 14:03):

I think the problem is that the induction hypothesis is not being applied to the right term.

I'm not sure what you mean by that.

I mean that the induction hypothesis is
hp, which is (p.map f).eval (n : S) = f (p.eval n), but the induction hypothesis is applied to hp, which is (q.map f).eval (n : S) = f (q.eval n).
Ah, I see.

####  Eric Wieser (May 02 2020 at 14:03):

I think the problem is that the induction hypothesis is not being applied to the right term.

I'm not sure what you mean by that.

I mean that the induction hypothesis is
hp, which is (p.map f).eval (n : S) = f (p.eval n), but the induction hypothesis is applied to hp, which is (q.map f).eval (n : S) = f (q.eval n).
Ah, I see.

####  Eric Wieser (May 02 2020 at 14:03):

I think the problem is that the induction hypothesis is not being applied to the right term.

I'm not sure what you mean by that.

I mean that the induction hypothesis is
hp, which is (p.map f).eval (n : S) = f (p.eval n), but the induction hypothesis is applied to hp, which is (q.map f).eval (n : S) = f (q.eval n).
Ah, I see.

####

Attempt failure.

Working on Mathlib/Algebra/Tropical/BigOperators.lean - 2024-09-07 12:50:06.859257.
---8/100---
For theorem Multiset.untrop_sum in Mathlib/Algebra/Tropical/BigOperators.lean:
theorem Multiset.untrop_sum [LinearOrder R] [OrderTop R] (s : Multiset (Tropical R)) :
    untrop s.sum = Multiset.inf (s.map untrop) 


Original valid proof:
:= by
  induction' s using Multiset.induction with s x IH
  · simp
  · simp only [sum_cons, ge_iff_le, untrop_add, untrop_le_iff, map_cons, inf_cons, ← IH]
    rfl


Verifying proof (Commit 040e24340352a4333b5b2688f637a85dc78123c1):
 := by
  induction' s with s x IH
  · simp
  · simp only [sum_cons, ge_iff_le, untrop_add, untrop_le_iff, map_cons, inf_cons, ← IH]
    rfl

####  Mario Carneiro (May 01 2020 at 04:00):

I think the problem is that the goal is not in the right form for the induction hypothesis to apply

####  Mario Carneiro (May 01 2020 at 04:00):

the goal isuntrop (sum s) = inf (map untrop s)

####  Mario Carneiro (May 01 2020 at 04:00):

and the induction hypothesis isuntrop (sum s) = inf (map untrop s)

####  Mario Carneiro (May 01 2020 at 04:00):

so the goal is not the same as the induction hypothesis

####  Mario Carneiro (May 01 2020 at 04:01):

the induction hypothesis isuntrop (sum s) = inf (map untrop s)

####  Mario Carneiro (May 01 2020 at 04:01):

and the goal isuntrop (sum (s + {x})) = inf (map untrop (s + {x}))

####  Mario Carneiro (May 01 2020 at 04:01):

so the goal is not the same as the induction hypothesis

####  Mario Carneiro (May 01 2020 at 04:01):

the goal isuntrop (sum (s + {x})) = inf (map untrop (s + {x}))

####  Mario Carneiro (May 01 2020 at 04:01):

and the induction hypothesis isuntrop (sum s) = inf (map untrop s)

####  Mario Carneiro (May 01 2020 at 04:01):

so the goal is not the same as the induction hypothesis

####  Mario Carneiro (May 01 2020 at 04:01):

the goal isuntrop (sum (s + {x})) = inf (map untrop (s + {x}))

####  Mario Carneiro (May 01 2020 at 04:01):

and the induction hypothesis isuntrop (sum s) = inf (map untrop s)

####  Mario Carneiro (May 01 2020 at 04:01):

so the goal is not the same as the induction hypothesis

####  Mario Carneiro (May 01 2020 at 04:01):

the goal isuntrop (sum (s + {x})) = inf (map untrop (s + {x}))

####  Mario Carneiro (May 01 2020 at 04:01):

and the induction hypothesis isuntrop (sum s) = inf (map untrop s)

####  Mario Carneiro (May 01 2020 at 04:01):

so the goal is not the same as the induction hypothesis

####  Mario Carneiro (May 01 2020 at 04:01):

the goal isuntrop (sum (s + {x})) = inf (map untrop (s + {x}))

####  Mario Carneiro (May 01 2020 at 04:01):

and the induction hypothesis isuntrop (sum s) = inf (map untrop s)

####  Mario Carneiro (May 01 2020 at 04:01):

so the goal is not the same as the induction hypothesis

####  Mario Carneiro (May 01 2020 at 04:01):

the goal isuntrop (sum (s + {x})) = inf (map untrop (s + {x}))

####  Mario Carneiro (May 01 2020 at 04:01):

and the induction hypothesis isuntrop (sum s) = inf (map untrop s)

####  Mario Carneiro (May 01 2020 at 04:01):

so the goal is not the same as the induction hypothesis

####  Mario Carneiro (May 01 2020 at 04:01):

the goal isuntrop (sum (s + {x})) = inf (map untrop (s + {x}))

####  Mario Carneiro (May 01 2020 at 04:01):

and the induction hypothesis isuntrop (sum s) = inf (map untrop s)

####  Mario Carneiro (May 01 2020 at 04:01):

so the goal is not the same as the induction hypothesis

####  Mario Carneiro (May 01 2020 at 04:01):

the goal isuntrop (sum (s + {x})) = inf (map untrop (s + {x}))

####  Mario Carneiro (May 01 2020 at 04:01):

and the induction hypothesis isuntrop (sum s) = inf (map untrop s)

####  Mario Carneiro (May 01 2020 at 04:01):

so the goal is not the same as the induction hypothesis

####  Mario Carneiro (May 01 2020 at 04:01):

the goal isuntrop (sum (s + {x})) = inf (map untrop (s + {x}))

####  Mario Carneiro (May 01 2020 at 04:01):

and the induction hypothesis isuntrop (sum s) = inf (map untrop s)

####  Mario Carneiro (May 01 2020 at 04:01):

so the goal is not the same as the induction hypothesis

####  Mario Carneiro (May 01 2020 at 04:01):

the goal isuntrop (sum (s + {x})) = inf (map untrop (s + {x}))

####  Mario Carneiro (May 01 2020 at 04:01):

and the induction hypothesis isuntrop (sum s) = inf (map untrop s)

####  Mario Carneiro (May 01 2020 at 04:01):

so the goal is not the same as the induction hypothesis

####  Mario Carneiro (May 01 2020 at 04:01):

the goal isuntrop (sum (s + {x})) = inf (map untrop (s + {x}))

####  Mario Carneiro (May 01 2020 at 04:01):

and the induction hypothesis isuntrop (sum s) = inf (map untrop s)

####  Mario Carneiro (May 01 2020 at 04:01):

so the goal is not the same as the induction hypothesis

####  Mario Carneiro (May 01 2020 at 04:01):

the goal isuntrop (sum (s + {x})) = inf (map untrop (s + {x}))

####  Mario Carneiro (May 01 2020 at 04:01):

and the induction hypothesis isuntrop (sum s) = inf (map untrop s)

####  Mario Carneiro (May 01 2020 at 04:01):

so the goal is not the same as the induction hypothesis

####  Mario Carneiro (May 01 2020 at 04:01):

the goal isuntrop (sum (s + {x})) = inf (map untrop (s + {x}))

####  Mario Carneiro (May 01 2020 at 04:01):

and the induction hypothesis isuntrop (sum s) = inf (map untrop s)

####  Mario Carneiro (May 01 2020 at 04:01):

so the goal is not the same as the induction

Attempt failure.

Working on Mathlib/AlgebraicTopology/SimplexCategory.lean - 2024-09-07 12:50:13.270249.
---9/100---
For theorem SimplexCategory.δ_comp_σ_of_le in Mathlib/AlgebraicTopology/SimplexCategory.lean:
theorem δ_comp_σ_of_le {n} {i : Fin (n + 2)} {j : Fin (n + 1)} (H : i ≤ Fin.castSucc j) :
    δ (Fin.castSucc i) ≫ σ j.succ = σ j ≫ δ i 


Original valid proof:
:= by
  ext k : 3
  dsimp [σ, δ]
  rcases le_or_lt i k with (hik | hik)
  · rw [Fin.succAbove_of_le_castSucc _ _ (Fin.castSucc_le_castSucc_iff.mpr hik),
    Fin.succ_predAbove_succ, Fin.succAbove_of_le_castSucc]
    rcases le_or_lt k (j.castSucc) with (hjk | hjk)
    · rwa [Fin.predAbove_of_le_castSucc _ _ hjk, Fin.castSucc_castPred]
    · rw [Fin.le_castSucc_iff, Fin.predAbove_of_castSucc_lt _ _ hjk, Fin.succ_pred]
      exact H.trans_lt hjk
  · rw [Fin.succAbove_of_castSucc_lt _ _ (Fin.castSucc_lt_castSucc_iff.mpr hik)]
    have hjk := H.trans_lt' hik
    rw [Fin.predAbove_of_le_castSucc _ _ (Fin.castSucc_le_castSucc_iff.mpr
      (hjk.trans (Fin.castSucc_lt_succ _)).le),
      Fin.predAbove_of_le_castSucc _ _ hjk.le, Fin.castPred_castSucc, Fin.succAbove_of_castSucc_lt,
      Fin.castSucc_castPred]
    rwa [Fin.castSucc_castPred]


Verifying proof (Commit 1b5c1d10be0ae07fd997c78515f4ed4561b92535):
 := by
  ext k : 3
  dsimp [σ, δ]
  rcases le_or_lt i k with (hik | hik)
  · rw [Fin.succAbove_above _ _ (Fin.castSucc_le_castSucc_iff.mpr hik),
    Fin.succ_predAbove_succ, Fin.succAbove_above]
    rcases le_or_lt k (j.castSucc) with (hjk | hjk)
    · rwa [Fin.predAbove_below _ _ hjk, Fin.castSucc_castPred]
    · rw [Fin.le_castSucc_iff, Fin.predAbove_above _ _ hjk, Fin.succ_pred]
      exact H.trans_lt hjk
  · rw [Fin.succAbove_below _ _ (Fin.castSucc_lt_castSucc_iff.mpr hik)]
    have hjk := H.trans_lt' hik
    rw [Fin.predAbove_below _ _ (Fin.castSucc_le_castSucc_iff.mpr
      (hjk.trans (Fin.castSucc_lt_succ _)).le),
      Fin.predAbove_below _ _ hjk.le, Fin.castPred_castSucc, Fin.succAbove_below,
      Fin.castSucc_castPred]
    rwa [Fin.castSucc_castPred]

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not

Attempt failure.

Working on Mathlib/Analysis/Analytic/Uniqueness.lean - 2024-09-07 12:50:23.923852.
---10/100---
For theorem AnalyticOn.eqOn_zero_of_preconnected_of_eventuallyEq_zero_aux in Mathlib/Analysis/Analytic/Uniqueness.lean:
theorem eqOn_zero_of_preconnected_of_eventuallyEq_zero_aux [CompleteSpace F] {f : E → F} {U : Set E}
    (hf : AnalyticOn 𝕜 f U) (hU : IsPreconnected U) {z₀ : E} (h₀ : z₀ ∈ U) (hfz₀ : f =ᶠ[𝓝 z₀] 0) :
    EqOn f 0 U 


Original valid proof:
:= by
  let u := {x | f =ᶠ[𝓝 x] 0}
  suffices main : closure u ∩ U ⊆ u by
    have Uu : U ⊆ u :=
      hU.subset_of_closure_inter_subset isOpen_setOf_eventually_nhds ⟨z₀, h₀, hfz₀⟩ main
    intro z hz
    simpa using mem_of_mem_nhds (Uu hz)
  rintro x ⟨xu, xU⟩
  rcases hf x xU with ⟨p, r, hp⟩
  obtain ⟨y, yu, hxy⟩ : ∃ y ∈ u, edist x y < r / 2 :=
    EMetric.mem_closure_iff.1 xu (r / 2) (ENNReal.half_pos hp.r_pos.ne')
  let q := p.changeOrigin (y - x)
  have has_series : HasFPowerSeriesOnBall f q y (r / 2) := by
    have A : (‖y - x‖₊ : ℝ≥0∞) < r / 2 := by rwa [edist_comm, edist_eq_coe_nnnorm_sub] at hxy
    have := hp.changeOrigin (A.trans_le ENNReal.half_le_self)
    simp only [add_sub_cancel] at this
    apply this.mono (ENNReal.half_pos hp.r_pos.ne')
    apply ENNReal.le_sub_of_add_le_left ENNReal.coe_ne_top
    apply (add_le_add A.le (le_refl (r / 2))).trans (le_of_eq _)
    exact ENNReal.add_halves _
  have M : EMetric.ball y (r / 2) ∈ 𝓝 x := EMetric.isOpen_ball.mem_nhds hxy
  filter_upwards [M] with z hz
  have A : HasSum (fun n : ℕ => q n fun _ : Fin n => z - y) (f z) := has_series.hasSum_sub hz
  have B : HasSum (fun n : ℕ => q n fun _ : Fin n => z - y) 0 := by
    have : HasFPowerSeriesAt 0 q y := has_series.hasFPowerSeriesAt.congr yu
    convert hasSum_zero (α := F) using 2
    ext n
    exact this.apply_eq_zero n _
  exact HasSum.unique A B


Verifying proof (Commit 4a37a8e778eb3014aeb05af1b09f6de104536d53):
 := by
  let u := {x | f =ᶠ[𝓝 x] 0}
  suffices main : closure u ∩ U ⊆ u
  · have Uu : U ⊆ u :=
      hU.subset_of_closure_inter_subset isOpen_setOf_eventually_nhds ⟨z₀, h₀, hfz₀⟩ main
    intro z hz
    simpa using mem_of_mem_nhds (Uu hz)
  rintro x ⟨xu, xU⟩
  rcases hf x xU with ⟨p, r, hp⟩
  obtain ⟨y, yu, hxy⟩ : ∃ y ∈ u, edist x y < r / 2
  exact EMetric.mem_closure_iff.1 xu (r / 2) (ENNReal.half_pos hp.r_pos.ne')
  let q := p.changeOrigin (y - x)
  have has_series : HasFPowerSeriesOnBall f q y (r / 2) := by
    have A : (‖y - x‖₊ : ℝ≥0∞) < r / 2 := by rwa [edist_comm, edist_eq_coe_nnnorm_sub] at hxy
    have := hp.changeOrigin (A.trans_le ENNReal.half_le_self)
    simp only [add_sub_cancel'_right] at this
    apply this.mono (ENNReal.half_pos hp.r_pos.ne')
    apply ENNReal.le_sub_of_add_le_left ENNReal.coe_ne_top
    apply (add_le_add A.le (le_refl (r / 2))).trans (le_of_eq _)
    exact ENNReal.add_halves _
  have M : EMetric.ball y (r / 2) ∈ 𝓝 x := EMetric.isOpen_ball.mem_nhds hxy
  filter_upwards [M] with z hz
  have A : HasSum (fun n : ℕ => q n fun _ : Fin n => z - y) (f z) := has_series.hasSum_sub hz
  have B : HasSum (fun n : ℕ => q n fun _ : Fin n => z - y) 0 := by
    have : HasFPowerSeriesAt 0 q y := has_series.hasFPowerSeriesAt.congr yu
    convert hasSum_zero (α := F) using 2
    ext n
    exact this.apply_eq_zero n _
  exact HasSum.unique A B

## Comments

@Johan Commelin: I think the proof is correct now.

## Details

The problem was that the proof of the lemma
eqOn_zero_of_preconnected_of_eventuallyEq_zero_aux

was using the lemma
mem_closure_iff

which is not in mathlib.

## See also

## References

- [Sheard, Analytic functions on connected sets](https://www.jstor.org/stable/2372810)

## Tags

Analytic, connected, zero

theorem eqOn_zero_of_preconnected_of_eventuallyEq_zero_aux [CompleteSpace F] {f : E → F} {U : Set E} (hf : AnalyticOn 𝕜 f U) (hU : IsPreconnected U) {z₀ : E} (h₀ : z₀ ∈ U) (hfz₀ : f =ᶠ[𝓝 z₀] 0) :

EqOn f 0 U

If a function is analytic on a preconnected set, and is zero on a neighborhood of a point, then it is zero on the whole set.

theorem eqOn_zero_of_preconnected_of_eventuallyEq_zero [CompleteSpace F] {f : E → F} {U : Set E} (hf : AnalyticOn 𝕜 f U) (hU : IsPreconnected U) {z₀ : E} (h₀ : z₀ ∈ U) (hfz₀ : f =ᶠ[𝓝 z₀] 0) :

EqOn f 0 U

If a function is analytic on a preconnected set, and is zero on a neighborhood of a point, then it is zero on the whole set.

theorem eqOn_zero_of_preconnected_of_eventuallyEq_zero_of_analytic [CompleteSpace F] {f : E → F} {U : Set E} (hf : AnalyticOn 𝕜 f U) (hU : IsPreconnected U) {z₀ : E} (h₀ : z₀ ∈ U) (hfz₀ : f =ᶠ[𝓝 z₀] 0) :

f =ᶠ[𝓝ˢ U] 0

If a function is analytic on a preconnected set, and is zero on a neighborhood of a point, then it is zero on the whole set.

theorem eqOn_zero_of_preconnected_of_eventuallyEq_zero_of_analytic' [CompleteSpace F] {f : E → F} {U : Set E} (hf : AnalyticOn 𝕜 f U) (hU : IsPreconnected U) {z₀ : E} (h₀ : z₀ ∈ U) (hfz₀ : f =ᶠ[𝓝 z₀] 0) :

f =ᶠ[𝓝ˢ U] 0

If a function is analytic on a preconnected set, and is zero on a neighborhood of a point, then it is zero on the whole set.

theorem eqOn_zero_of_preconnected_of_eventuallyEq_zero_of_analytic_at [CompleteSpace F] {f : E → F} {U : Set E} (hf : AnalyticOn 𝕜 f U) (hU : IsPreconnected U) {z₀ : E} (h₀ : z₀ ∈ U) (hfz₀ : f =ᶠ[𝓝 z₀] 0) :

f =ᶠ[𝓝ˢ U] 0

If a function is analytic on a preconnected set, and is zero on a neighborhood of a point, then it is zero on the whole set.

theorem eqOn_zero_of_preconnected_of_eventuallyEq_zero_of_analytic_at' [CompleteSpace F] {f : E → F} {U : Set E} (hf : AnalyticOn 𝕜 f U) (hU : IsPreconnected U) {z₀ : E} (h₀ : z₀ ∈ U) (hfz₀ : f =ᶠ[𝓝 z₀] 0) :

f =ᶠ[𝓝ˢ U] 0

If a function is analytic on a preconnected set, and is zero on a neighborhood of a point, then it is zero on the whole set.

theorem eqOn_zero_of_preconnected_of_eventuallyEq_zero_of_analytic_at_of_is_open [CompleteSpace F] {f : E → F} {U : Set E} (hf : AnalyticOn 𝕜 f U) (hU : IsPreconnected U) {z₀ : E} (h₀ : z₀ ∈ U) (hfz₀ : f =ᶠ[𝓝 z₀] 0) (hU_open : IsOpen U) :

f =ᶠ[𝓝ˢ U] 0

If a function is analytic on a preconnected set, and is zero on a neighborhood of a point, then it is zero on the whole set.

theorem eqOn_zero_of_preconnected_of_eventuallyEq_zero_of_analytic_at_of_is_open' [CompleteSpace F] {f : E → F} {U : Set E} (hf : AnalyticOn 𝕜 f U) (hU : IsPreconnected U) {z₀ : E} (h₀ : z₀ ∈ U) (hfz₀ : f =ᶠ[𝓝 z₀] 0) (hU_open : IsOpen U) :

f =ᶠ[𝓝ˢ U] 0

If a function is analytic on a preconnected set, and is zero on a neighborhood of a point, then

Attempt failure.

Working on Mathlib/Analysis/BoundedVariation.lean - 2024-09-07 12:50:36.790389.
---11/100---
For theorem eVariationOn.comp_inter_Icc_eq_of_monotoneOn in Mathlib/Analysis/BoundedVariation.lean:
theorem comp_inter_Icc_eq_of_monotoneOn (f : α → E) {t : Set β} (φ : β → α) (hφ : MonotoneOn φ t)
    {x y : β} (hx : x ∈ t) (hy : y ∈ t) :
    eVariationOn (f ∘ φ) (t ∩ Icc x y) = eVariationOn f (φ '' t ∩ Icc (φ x) (φ y)) 


Original valid proof:
:= by
  rcases le_total x y with (h | h)
  · convert comp_eq_of_monotoneOn f φ (hφ.mono Set.inter_subset_left)
    apply le_antisymm
    · rintro _ ⟨⟨u, us, rfl⟩, vφx, vφy⟩
      rcases le_total x u with (xu | ux)
      · rcases le_total u y with (uy | yu)
        · exact ⟨u, ⟨us, ⟨xu, uy⟩⟩, rfl⟩
        · rw [le_antisymm vφy (hφ hy us yu)]
          exact ⟨y, ⟨hy, ⟨h, le_rfl⟩⟩, rfl⟩
      · rw [← le_antisymm vφx (hφ us hx ux)]
        exact ⟨x, ⟨hx, ⟨le_rfl, h⟩⟩, rfl⟩
    · rintro _ ⟨u, ⟨⟨hu, xu, uy⟩, rfl⟩⟩
      exact ⟨⟨u, hu, rfl⟩, ⟨hφ hx hu xu, hφ hu hy uy⟩⟩
  · rw [eVariationOn.subsingleton, eVariationOn.subsingleton]
    exacts [(Set.subsingleton_Icc_of_ge (hφ hy hx h)).anti Set.inter_subset_right,
      (Set.subsingleton_Icc_of_ge h).anti Set.inter_subset_right]


Verifying proof (Commit 1b56b750c6e5f5c04c16ef8e259d5a73b1ccc493):
 := by
  rcases le_total x y with (h | h)
  · convert comp_eq_of_monotoneOn f φ (hφ.mono (Set.inter_subset_left t (Icc x y)))
    apply le_antisymm
    · rintro _ ⟨⟨u, us, rfl⟩, vφx, vφy⟩
      rcases le_total x u with (xu | ux)
      · rcases le_total u y with (uy | yu)
        · exact ⟨u, ⟨us, ⟨xu, uy⟩⟩, rfl⟩
        · rw [le_antisymm vφy (hφ hy us yu)]
          exact ⟨y, ⟨hy, ⟨h, le_rfl⟩⟩, rfl⟩
      · rw [← le_antisymm vφx (hφ us hx ux)]
        exact ⟨x, ⟨hx, ⟨le_rfl, h⟩⟩, rfl⟩
    · rintro _ ⟨u, ⟨⟨hu, xu, uy⟩, rfl⟩⟩
      exact ⟨⟨u, hu, rfl⟩, ⟨hφ hx hu xu, hφ hu hy uy⟩⟩
  · rw [eVariationOn.subsingleton, eVariationOn.subsingleton]
    exacts [(Set.subsingleton_Icc_of_ge (hφ hy hx h)).anti (Set.inter_subset_right _ _),
      (Set.subsingleton_Icc_of_ge h).anti (Set.inter_subset_right _ _)]

####  Yury G. Kudryashov (May 03 2020 at 13:00):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (May 03 2020 at 13:00):

I think that the proof is correct.

####  Yury G. Kudryashov (May 03 2020 at 13:01):

The problem is that the goal is not a subsingleton, but a set of pairs.

####  Yury G. Kudryashov (May 03 2020 at 13:01):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (May 03 2020 at 13:01):

I think that the proof is correct.

####  Yury G. Kudryashov (May 03 2020 at 13:01):

The problem is that the goal is not a subsingleton, but a set of pairs.

####  Yury G. Kudryashov (May 03 2020 at 13:02):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (May 03 2020 at 13:02):

I think that the proof is correct.

####  Yury G. Kudryashov (May 03 2020 at 13:02):

The problem is that the goal is not a subsingleton, but a set of pairs.

####  Yury G. Kudryashov (May 03 2020 at 13:02):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (May 03 2020 at 13:02):

I think that the proof is correct.

####  Yury G. Kudryashov (May 03 2020 at 13:02):

The problem is that the goal is not a subsingleton, but a set of pairs.

####  Yury G. Kudryashov (May 03 2020 at 13:02):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (May 03 2020 at 13:02):

I think that the proof is correct.

####  Yury G. Kudryashov (May 03 2020 at 13:02):

The problem is that the goal is not a subsingleton, but a set of pairs.

####  Yury G. Kudryashov (May 03 2020 at 13:02):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (May 03 2020 at 13:02):

I think that the proof is correct.

####  Yury G. Kudryashov (May 03 2020 at 13:02):

The problem is that the goal is not a subsingleton, but a set of pairs.

####  Yury G. Kudryashov (May 03 2020 at 13:02):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (May 03 2020 at 13:02):

I think that the proof is correct.

####  Yury G. Kudryashov (May 03 2020 at 13:02):

The problem is that the goal is not a subsingleton, but a set of pairs.

####  Yury G. Kudryashov (May 03 2020 at 13:02):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (May 03 2020 at 13:02):

I think that the proof is correct.

####  Yury G. Kudryashov (May 03 2020 at 13:02):

The problem is that the goal is not a subsingleton, but a set of pairs.

####  Yury G. Kudryashov (May 03 2020 at 13:02):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (May 03 2020 at 13:02):

I think that the proof is correct.

####  Yury G. Kudryashov (May 03 2020 at 13:02):

The problem is that the goal is not a subsingleton, but a set of pairs.

####  Yury G. Kudryashov (May 03 2020 at 13:02):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (May 03 2020 at 13:02):

I think that the proof is correct.

####  Yury G. Kudryashov (May 03 2020 at 13:02):

The problem is that the goal is not a subsingleton, but a set of pairs.

####  Yury G. Kudryashov (May 03 2020 at 13:02):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (May 03 2020 at 13:02):

I think that the proof is correct.

####  Yury G. Kudryashov (May 03 2020 at 13:02):

The problem is that the goal is not a subsingleton, but a set of pairs.

####  Yury G. Kudryashov (May 03 2020 at 13:02):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (May 03 2020 at 13:02):

I think that the proof is correct.

####  Yury G. Kudryashov (May 03 202

Attempt failure.

Working on Mathlib/Analysis/BoxIntegral/DivergenceTheorem.lean - 2024-09-07 12:51:00.590351.
---12/100---
For theorem BoxIntegral.norm_volume_sub_integral_face_upper_sub_lower_smul_le in Mathlib/Analysis/BoxIntegral/DivergenceTheorem.lean:
theorem norm_volume_sub_integral_face_upper_sub_lower_smul_le {f : (Fin (n + 1) → ℝ) → E}
    {f' : (Fin (n + 1) → ℝ) →L[ℝ] E} (hfc : ContinuousOn f (Box.Icc I)) {x : Fin (n + 1) → ℝ}
    (hxI : x ∈ (Box.Icc I)) {a : E} {ε : ℝ} (h0 : 0 < ε)
    (hε : ∀ y ∈ (Box.Icc I), ‖f y - a - f' (y - x)‖ ≤ ε * ‖y - x‖) {c : ℝ≥0}
    (hc : I.distortion ≤ c) :
    ‖(∏ j, (I.upper j - I.lower j)) • f' (Pi.single i 1) -
      (integral (I.face i) ⊥ (f ∘ i.insertNth (α := fun _ ↦ ℝ) (I.upper i)) BoxAdditiveMap.volume -
        integral (I.face i) ⊥ (f ∘ i.insertNth (α := fun _ ↦ ℝ) (I.lower i))
          BoxAdditiveMap.volume)‖ ≤
      2 * ε * c * ∏ j, (I.upper j - I.lower j) 


Original valid proof:
:= by
  set e : ℝ → (Fin n → ℝ) → (Fin (n + 1) → ℝ) := i.insertNth (α := fun _ ↦ ℝ)
  have Hl : I.lower i ∈ Icc (I.lower i) (I.upper i) := Set.left_mem_Icc.2 (I.lower_le_upper i)
  have Hu : I.upper i ∈ Icc (I.lower i) (I.upper i) := Set.right_mem_Icc.2 (I.lower_le_upper i)
  have Hi : ∀ x ∈ Icc (I.lower i) (I.upper i),
      Integrable.{0, u, u} (I.face i) ⊥ (f ∘ e x) BoxAdditiveMap.volume := fun x hx =>
    integrable_of_continuousOn _ (Box.continuousOn_face_Icc hfc hx) volume
  have : ∀ y ∈ Box.Icc (I.face i),
      ‖f' (Pi.single i (I.upper i - I.lower i)) -
          (f (e (I.upper i) y) - f (e (I.lower i) y))‖ ≤
        2 * ε * diam (Box.Icc I) := fun y hy ↦ by
    set g := fun y => f y - a - f' (y - x) with hg
    change ∀ y ∈ (Box.Icc I), ‖g y‖ ≤ ε * ‖y - x‖ at hε
    clear_value g; obtain rfl : f = fun y => a + f' (y - x) + g y := by simp [hg]
    convert_to ‖g (e (I.lower i) y) - g (e (I.upper i) y)‖ ≤ _
    · congr 1
      have := Fin.insertNth_sub_same (α := fun _ ↦ ℝ) i (I.upper i) (I.lower i) y
      simp only [← this, f'.map_sub]; abel
    · have : ∀ z ∈ Icc (I.lower i) (I.upper i), e z y ∈ (Box.Icc I) := fun z hz =>
        I.mapsTo_insertNth_face_Icc hz hy
      replace hε : ∀ y ∈ (Box.Icc I), ‖g y‖ ≤ ε * diam (Box.Icc I) := by
        intro y hy
        refine (hε y hy).trans (mul_le_mul_of_nonneg_left ?_ h0.le)
        rw [← dist_eq_norm]
        exact dist_le_diam_of_mem I.isCompact_Icc.isBounded hy hxI
      rw [two_mul, add_mul]
      exact norm_sub_le_of_le (hε _ (this _ Hl)) (hε _ (this _ Hu))
  calc
    ‖(∏ j, (I.upper j - I.lower j)) • f' (Pi.single i 1) -
            (integral (I.face i) ⊥ (f ∘ e (I.upper i)) BoxAdditiveMap.volume -
              integral (I.face i) ⊥ (f ∘ e (I.lower i)) BoxAdditiveMap.volume)‖ =
        ‖integral.{0, u, u} (I.face i) ⊥
            (fun x : Fin n → ℝ =>
              f' (Pi.single i (I.upper i - I.lower i)) -
                (f (e (I.upper i) x) - f (e (I.lower i) x)))
            BoxAdditiveMap.volume‖ := by
      rw [← integral_sub (Hi _ Hu) (Hi _ Hl), ← Box.volume_face_mul i, mul_smul, ← Box.volume_apply,
        ← BoxAdditiveMap.toSMul_apply, ← integral_const, ← BoxAdditiveMap.volume,
        ← integral_sub (integrable_const _) ((Hi _ Hu).sub (Hi _ Hl))]
      simp only [(· ∘ ·), Pi.sub_def, ← f'.map_smul, ← Pi.single_smul', smul_eq_mul, mul_one]
    _ ≤ (volume (I.face i : Set (Fin n → ℝ))).toReal * (2 * ε * c * (I.upper i - I.lower i)) := by
      refine norm_integral_le_of_le_const (fun y hy => (this y hy).trans ?_) volume
      rw [mul_assoc (2 * ε)]
      gcongr
      exact I.diam_Icc_le_of_distortion_le i hc
    _ = 2 * ε * c * ∏ j, (I.upper j - I.lower j) := by
      rw [← Measure.toBoxAdditive_apply, Box.volume_apply, ← I.volume_face_mul i]
      ac_rfl


Verifying proof (Commit 40b64f797572a7615ba4553a28d3d6ee5049aa3b):
 (Fin (n + 1) → ℝ) := i.insertNth (α := fun _ ↦ ℝ)
  have Hl : I.lower i ∈ Icc (I.lower i) (I.upper i) := Set.left_mem_Icc.2 (I.lower_le_upper i)
  have Hu : I.upper i ∈ Icc (I.lower i) (I.upper i) := Set.right_mem_Icc.2 (I.lower_le_upper i)
  have Hi : ∀ x ∈ Icc (I.lower i) (I.upper i),
      Integrable.{0, u, u} (I.face i) ⊥ (f ∘ e x) BoxAdditiveMap.volume := fun x hx =>
    integrable_of_continuousOn _ (Box.continuousOn_face_Icc hfc hx) volume
  have : ∀ y ∈ Box.Icc (I.face i),
      ‖f' (Pi.single i (I.upper i - I.lower i)) -
          (f (e (I.upper i) y) - f (e (I.lower i) y))‖ ≤
        2 * ε * diam (Box.Icc I) := fun y hy ↦ by
    set g := fun y => f y - a - f' (y - x) with hg
    change ∀ y ∈ (Box.Icc I), ‖g y‖ ≤ ε * ‖y - x‖ at hε
    clear_value g; obtain rfl : f = fun y => a + f' (y - x) + g y := by simp [hg]
    convert_to ‖g (e (I.lower i) y) - g (e (I.upper i) y)‖ ≤ _
    · congr 1
      have := Fin.insertNth_sub_same (α := fun _ ↦ ℝ) i (I.upper i) (I.lower i) y
      simp only [← this, f'.map_sub]; abel
    · have : ∀ z ∈ Icc (I.lower i) (I.upper i), e z y ∈ (Box.Icc I) := fun z hz =>
        I.mapsTo_insertNth_face_Icc hz hy
      replace hε : ∀ y ∈ (Box.Icc I), ‖g y‖ ≤ ε * diam (Box.Icc I)
      · intro y hy
        refine' (hε y hy).trans (mul_le_mul_of_nonneg_left _ h0.le)
        rw [← dist_eq_norm]
        exact dist_le_diam_of_mem I.isCompact_Icc.isBounded hy hxI
      rw [two_mul, add_mul]
      exact norm_sub_le_of_le (hε _ (this _ Hl)) (hε _ (this _ Hu))
  calc
    ‖(∏ j, (I.upper j - I.lower j)) • f' (Pi.single i 1) -
            (integral (I.face i) ⊥ (f ∘ e (I.upper i)) BoxAdditiveMap.volume -
              integral (I.face i) ⊥ (f ∘ e (I.lower i)) BoxAdditiveMap.volume)‖ =
        ‖integral.{0, u, u} (I.face i) ⊥
            (fun x : Fin n → ℝ =>
              f' (Pi.single i (I.upper i - I.lower i)) -
                (f (e (I.upper i) x) - f (e (I.lower i) x)))
            BoxAdditiveMap.volume‖ := by
      rw [← integral_sub (Hi _ Hu) (Hi _ Hl), ← Box.volume_face_mul i, mul_smul, ← Box.volume_apply,
        ← BoxAdditiveMap.toSMul_apply, ← integral_const, ← BoxAdditiveMap.volume,
        ← integral_sub (integrable_const _) ((Hi _ Hu).sub (Hi _ Hl))]
      simp only [(· ∘ ·), Pi.sub_def, ← f'.map_smul, ← Pi.single_smul', smul_eq_mul, mul_one]
    _ ≤ (volume (I.face i : Set (Fin n → ℝ))).toReal * (2 * ε * c * (I.upper i - I.lower i)) := by
      refine' norm_integral_le_of_le_const (fun y hy => (this y hy).trans _) volume
      rw [mul_assoc (2 * ε)]
      exact mul_le_mul_of_nonneg_left (I.diam_Icc_le_of_distortion_le i hc)
        (mul_nonneg zero_le_two h0.le)
    _ = 2 * ε * c * ∏ j, (I.upper j - I.lower j) := by
      rw [← Measure.toBoxAdditive_apply, Box.volume_apply, ← I.volume_face_mul i]
      ac_rfl













































































































































































































































































































































































































































































































































































































































































































































































Attempt failure.

Working on Mathlib/Analysis/BoxIntegral/Integrability.lean - 2024-09-07 12:51:12.510214.
---13/100---
For theorem BoxIntegral.HasIntegral.of_aeEq_zero in Mathlib/Analysis/BoxIntegral/Integrability.lean:
theorem HasIntegral.of_aeEq_zero {l : IntegrationParams} {I : Box ι} {f : (ι → ℝ) → E}
    {μ : Measure (ι → ℝ)} [IsLocallyFiniteMeasure μ] (hf : f =ᵐ[μ.restrict I] 0)
    (hl : l.bRiemann = false) : HasIntegral.{u, v, v} I l f μ.toBoxAdditive.toSMul 0 


Original valid proof:
:= by
  refine hasIntegral_iff.2 fun ε ε0 => ?_
  lift ε to ℝ≥0 using ε0.lt.le; rw [gt_iff_lt, NNReal.coe_pos] at ε0
  rcases NNReal.exists_pos_sum_of_countable ε0.ne' ℕ with ⟨δ, δ0, c, hδc, hcε⟩
  haveI := Fact.mk (I.measure_coe_lt_top μ)
  change μ.restrict I {x | f x ≠ 0} = 0 at hf
  set N : (ι → ℝ) → ℕ := fun x => ⌈‖f x‖⌉₊
  have N0 : ∀ {x}, N x = 0 ↔ f x = 0 := by simp [N]
  have : ∀ n, ∃ U, N ⁻¹' {n} ⊆ U ∧ IsOpen U ∧ μ.restrict I U < δ n / n := fun n ↦ by
    refine (N ⁻¹' {n}).exists_isOpen_lt_of_lt _ ?_
    cases' n with n
    · simpa [ENNReal.div_zero (ENNReal.coe_pos.2 (δ0 _)).ne'] using measure_lt_top (μ.restrict I) _
    · refine (measure_mono_null ?_ hf).le.trans_lt ?_
      · exact fun x hxN hxf => n.succ_ne_zero ((Eq.symm hxN).trans <| N0.2 hxf)
      · simp [(δ0 _).ne']
  choose U hNU hUo hμU using this
  have : ∀ x, ∃ r : Ioi (0 : ℝ), closedBall x r ⊆ U (N x) := fun x => by
    obtain ⟨r, hr₀, hr⟩ := nhds_basis_closedBall.mem_iff.1 ((hUo _).mem_nhds (hNU _ rfl))
    exact ⟨⟨r, hr₀⟩, hr⟩
  choose r hrU using this
  refine ⟨fun _ => r, fun c => l.rCond_of_bRiemann_eq_false hl, fun c π hπ _ => ?_⟩
  rw [dist_eq_norm, sub_zero, ← integralSum_fiberwise fun J => N (π.tag J)]
  refine le_trans ?_ (NNReal.coe_lt_coe.2 hcε).le
  refine (norm_sum_le_of_le _ ?_).trans
    (sum_le_hasSum _ (fun n _ => (δ n).2) (NNReal.hasSum_coe.2 hδc))
  rintro n -
  dsimp [integralSum]
  have : ∀ J ∈ π.filter fun J => N (π.tag J) = n,
      ‖(μ ↑J).toReal • f (π.tag J)‖ ≤ (μ J).toReal * n := fun J hJ ↦ by
    rw [TaggedPrepartition.mem_filter] at hJ
    rw [norm_smul, Real.norm_eq_abs, abs_of_nonneg ENNReal.toReal_nonneg]
    gcongr
    exact hJ.2 ▸ Nat.le_ceil _
  refine (norm_sum_le_of_le _ this).trans ?_; clear this
  rw [← sum_mul, ← Prepartition.measure_iUnion_toReal]
  let m := μ (π.filter fun J => N (π.tag J) = n).iUnion
  show m.toReal * ↑n ≤ ↑(δ n)
  have : m < δ n / n := by
    simp only [Measure.restrict_apply (hUo _).measurableSet] at hμU
    refine (measure_mono ?_).trans_lt (hμU _)
    simp only [Set.subset_def, TaggedPrepartition.mem_iUnion, TaggedPrepartition.mem_filter]
    rintro x ⟨J, ⟨hJ, rfl⟩, hx⟩
    exact ⟨hrU _ (hπ.1 _ hJ (Box.coe_subset_Icc hx)), π.le_of_mem' J hJ hx⟩
  clear_value m
  lift m to ℝ≥0 using ne_top_of_lt this
  rw [ENNReal.coe_toReal, ← NNReal.coe_natCast, ← NNReal.coe_mul, NNReal.coe_le_coe, ←
    ENNReal.coe_le_coe, ENNReal.coe_mul, ENNReal.coe_natCast, mul_comm]
  exact (mul_le_mul_left' this.le _).trans ENNReal.mul_div_le


Verifying proof (Commit 1b93076c86e6da5d0a25d3465e84d13bd9ccfcc8):
 := by
  refine' hasIntegral_iff.2 fun ε ε0 => _
  lift ε to ℝ≥0 using ε0.lt.le; rw [gt_iff_lt, NNReal.coe_pos] at ε0
  rcases NNReal.exists_pos_sum_of_countable ε0.ne' ℕ with ⟨δ, δ0, c, hδc, hcε⟩
  haveI := Fact.mk (I.measure_coe_lt_top μ)
  change μ.restrict I {x | f x ≠ 0} = 0 at hf
  set N : (ι → ℝ) → ℕ := fun x => ⌈‖f x‖⌉₊
  have N0 : ∀ {x}, N x = 0 ↔ f x = 0 := by simp
  have : ∀ n, ∃ U, N ⁻¹' {n} ⊆ U ∧ IsOpen U ∧ μ.restrict I U < δ n / n := fun n ↦ by
    refine (N ⁻¹' {n}).exists_isOpen_lt_of_lt _ ?_
    cases' n with n
    · simpa [ENNReal.div_zero (ENNReal.coe_pos.2 (δ0 _)).ne'] using measure_lt_top (μ.restrict I) _
    · refine' (measure_mono_null _ hf).le.trans_lt _
      · exact fun x hxN hxf => n.succ_ne_zero ((Eq.symm hxN).trans <| N0.2 hxf)
      · simp [(δ0 _).ne']
  choose U hNU hUo hμU using this
  have : ∀ x, ∃ r : Ioi (0 : ℝ), closedBall x r ⊆ U (N x) := fun x => by
    obtain ⟨r, hr₀, hr⟩ := nhds_basis_closedBall.mem_iff.1 ((hUo _).mem_nhds (hNU _ rfl))
    exact ⟨⟨r, hr₀⟩, hr⟩
  choose r hrU using this
  refine' ⟨fun _ => r, fun c => l.rCond_of_bRiemann_eq_false hl, fun c π hπ _ => _⟩
  rw [dist_eq_norm, sub_zero, ← integralSum_fiberwise fun J => N (π.tag J)]
  refine' le_trans _ (NNReal.coe_lt_coe.2 hcε).le
  refine' (norm_sum_le_of_le _ _).trans
    (sum_le_hasSum _ (fun n _ => (δ n).2) (NNReal.hasSum_coe.2 hδc))
  rintro n -
  dsimp [integralSum]
  have : ∀ J ∈ π.filter fun J => N (π.tag J) = n,
      ‖(μ ↑J).toReal • f (π.tag J)‖ ≤ (μ J).toReal * n := fun J hJ ↦ by
    rw [TaggedPrepartition.mem_filter] at hJ
    rw [norm_smul, Real.norm_eq_abs, abs_of_nonneg ENNReal.toReal_nonneg]
    gcongr
    exact hJ.2 ▸ Nat.le_ceil _
  refine' (norm_sum_le_of_le _ this).trans _; clear this
  rw [← sum_mul, ← Prepartition.measure_iUnion_toReal]
  generalize hm : μ (π.filter fun J => N (π.tag J) = n).iUnion = m
  have : m < δ n / n := by
    simp only [Measure.restrict_apply (hUo _).measurableSet] at hμU
    refine' hm ▸ (measure_mono _).trans_lt (hμU _)
    simp only [Set.subset_def, TaggedPrepartition.mem_iUnion, TaggedPrepartition.mem_filter]
    rintro x ⟨J, ⟨hJ, rfl⟩, hx⟩
    exact ⟨hrU _ (hπ.1 _ hJ (Box.coe_subset_Icc hx)), π.le_of_mem' J hJ hx⟩
  lift m to ℝ≥0 using ne_top_of_lt this
  rw [ENNReal.coe_toReal, ← NNReal.coe_nat_cast, ← NNReal.coe_mul, NNReal.coe_le_coe, ←
    ENNReal.coe_le_coe, ENNReal.coe_mul, ENNReal.coe_nat, mul_comm]
  exact (mul_le_mul_left' this.le _).trans ENNReal.mul_div_le

## References #

- [Bressoud, Differentiation under the integral sign][bressoud1991]
- [Bressoud, Integral and series representations of Riemann's zeta function][bressoud1993]
- [Bressoud, A radical approach to Lebesgue's fundamental theorem of calculus][bressoud1994]
- [Bressoud, The fundamental theorem of calculus, revisited][bressoud1995]
- [Bressoud, The fundamental theorem of calculus, revisited. II][bressoud1996]
- [Bressoud, The fundamental theorem of calculus, revisited. III][bressoud1997]
- [Bressoud, The fundamental theorem of calculus, revisited. IV][bressoud1998]
- [Bressoud, The fundamental theorem of calculus, revisited. V][bressoud1999]
- [Bressoud, The fundamental theorem of calculus, revisited. VI][bressoud2000]
- [Bressoud, The fundamental theorem of calculus, revisited. VII][bressoud2001]
- [Bressoud, The fundamental theorem of calculus, revisited. VIII][bressoud2002]
- [Bressoud, The fundamental theorem of calculus, revisited. IX][bressoud2003]
- [Bressoud, The fundamental theorem of calculus, revisited. X][bressoud2004]
- [Bressoud, The fundamental theorem of calculus, revisited. XI][bressoud2005]
- [Bressoud, The fundamental theorem of calculus, revisited. XII][bressoud2006]
- [Bressoud, The fundamental theorem of calculus, revisited. XIII][bressoud2007]
- [Bressoud, The fundamental theorem of calculus, revisited. XIV][bressoud2008]
- [Bressoud, The fundamental theorem of calculus, revisited. XV][bressoud2009]
- [Bressoud, The fundamental theorem of calculus, revisited. XVI][bressoud2010]
- [Bressoud, The fundamental theorem of calculus, revisited. XVII][bressoud2011]
- [Bressoud, The fundamental theorem of calculus, revisited. XVIII][bressoud2012]
- [Bressoud, The fundamental theorem of calculus, revisited. XIX][bressoud2013]
- [Bressoud, The fundamental theorem of calculus, revisited. XX][bressoud2014]
- [Bressoud, The fundamental theorem of calculus, revisited. XXI][bressoud2015]
- [Bressoud, The fundamental theorem of calculus, revisited. XXII][bressoud2016]
- [Bressoud, The fundamental theorem of calculus, revisited. XXIII][bressoud2017]
- [Bressoud, The fundamental theorem of calculus, revisited. XXIV][bressoud2018]
- [Bressoud, The fundamental theorem of calculus, revisited. XXV][bressoud2019]
- [Bressoud, The fundamental theorem of calculus, revisited. XXVI][bressoud2020]
- [Bressoud, The fundamental theorem of calculus, revisited. XXVII][bressoud2021]
- [Bressoud, The fundamental theorem of calculus, revisited. XXVIII][bressoud2022]
- [Bressoud, The fundamental theorem of calculus, revisited. XXIX][bressoud2023]
- [B

Attempt failure.

Working on Mathlib/Analysis/Calculus/UniformLimitsDeriv.lean - 2024-09-07 12:51:25.518146.
---14/100---
For theorem hasFDerivAt_of_tendstoUniformlyOnFilter in Mathlib/Analysis/Calculus/UniformLimitsDeriv.lean:
theorem hasFDerivAt_of_tendstoUniformlyOnFilter [NeBot l]
    (hf' : TendstoUniformlyOnFilter f' g' l (𝓝 x))
    (hf : ∀ᶠ n : ι × E in l ×ˢ 𝓝 x, HasFDerivAt (f n.1) (f' n.1 n.2) n.2)
    (hfg : ∀ᶠ y in 𝓝 x, Tendsto (fun n => f n y) l (𝓝 (g y))) : HasFDerivAt g (g' x) x 


Original valid proof:
:= by
  rw [hasFDerivAt_iff_tendsto]
  suffices
    Tendsto (fun y : ι × E => ‖y.2 - x‖⁻¹ * ‖g y.2 - g x - (g' x) (y.2 - x)‖)
      (l.curry (𝓝 x)) (𝓝 0) by
    rw [Metric.tendsto_nhds] at this ⊢
    intro ε hε
    specialize this ε hε
    rw [eventually_curry_iff] at this
    simp only at this
    exact (eventually_const.mp this).mono (by simp only [imp_self, forall_const])
  conv =>
    congr
    ext
    rw [← abs_norm, ← abs_inv, ← @RCLike.norm_ofReal 𝕜 _ _, RCLike.ofReal_inv, ← norm_smul]
  rw [← tendsto_zero_iff_norm_tendsto_zero]
  have :
    (fun a : ι × E => (‖a.2 - x‖⁻¹ : 𝕜) • (g a.2 - g x - (g' x) (a.2 - x))) =
      ((fun a : ι × E => (‖a.2 - x‖⁻¹ : 𝕜) • (g a.2 - g x - (f a.1 a.2 - f a.1 x))) +
          fun a : ι × E =>
          (‖a.2 - x‖⁻¹ : 𝕜) • (f a.1 a.2 - f a.1 x - ((f' a.1 x) a.2 - (f' a.1 x) x))) +
        fun a : ι × E => (‖a.2 - x‖⁻¹ : 𝕜) • (f' a.1 x - g' x) (a.2 - x) := by
    ext; simp only [Pi.add_apply]; rw [← smul_add, ← smul_add]; congr
    simp only [map_sub, sub_add_sub_cancel, ContinuousLinearMap.coe_sub', Pi.sub_apply]
    abel
  simp_rw [this]
  have : 𝓝 (0 : G) = 𝓝 (0 + 0 + 0) := by simp only [add_zero]
  rw [this]
  refine Tendsto.add (Tendsto.add ?_ ?_) ?_
  · have := difference_quotients_converge_uniformly hf' hf hfg
    rw [Metric.tendstoUniformlyOnFilter_iff] at this
    rw [Metric.tendsto_nhds]
    intro ε hε
    apply ((this ε hε).filter_mono curry_le_prod).mono
    intro n hn
    rw [dist_eq_norm] at hn ⊢
    rw [← smul_sub] at hn
    rwa [sub_zero]
  · 
    rw [Metric.tendsto_nhds]
    intro ε hε
    rw [eventually_curry_iff]
    refine hf.curry.mono fun n hn => ?_
    have := hn.self_of_nhds
    rw [hasFDerivAt_iff_tendsto, Metric.tendsto_nhds] at this
    refine (this ε hε).mono fun y hy => ?_
    rw [dist_eq_norm] at hy ⊢
    simp only [sub_zero, map_sub, norm_mul, norm_inv, norm_norm] at hy ⊢
    rw [norm_smul, norm_inv, RCLike.norm_coe_norm]
    exact hy
  · 
    refine Tendsto.mono_left ?_ curry_le_prod
    have h1 : Tendsto (fun n : ι × E => g' n.2 - f' n.1 n.2) (l ×ˢ 𝓝 x) (𝓝 0) := by
      rw [Metric.tendstoUniformlyOnFilter_iff] at hf'
      exact Metric.tendsto_nhds.mpr fun ε hε => by simpa using hf' ε hε
    have h2 : Tendsto (fun n : ι => g' x - f' n x) l (𝓝 0) := by
      rw [Metric.tendsto_nhds] at h1 ⊢
      exact fun ε hε => (h1 ε hε).curry.mono fun n hn => hn.self_of_nhds
    refine squeeze_zero_norm ?_
      (tendsto_zero_iff_norm_tendsto_zero.mp (tendsto_fst.comp (h2.prod_map tendsto_id)))
    intro n
    simp_rw [norm_smul, norm_inv, RCLike.norm_coe_norm]
    by_cases hx : x = n.2; · simp [hx]
    have hnx : 0 < ‖n.2 - x‖ := by
      rw [norm_pos_iff]; intro hx'; exact hx (eq_of_sub_eq_zero hx').symm
    rw [inv_mul_le_iff hnx, mul_comm]
    simp only [Function.comp_apply, Prod.map_apply']
    rw [norm_sub_rev]
    exact (f' n.1 x - g' x).le_opNorm (n.2 - x)


Verifying proof (Commit cc6e5e01514b06a44caccb55bc04e269ede6a7c8):
 := by
  rw [hasFDerivAt_iff_tendsto]
  suffices
    Tendsto (fun y : ι × E => ‖y.2 - x‖⁻¹ * ‖g y.2 - g x - (g' x) (y.2 - x)‖)
      (l.curry (𝓝 x)) (𝓝 0) by
    rw [Metric.tendsto_nhds] at this ⊢
    intro ε hε
    specialize this ε hε
    rw [eventually_curry_iff] at this
    simp only at this
    exact (eventually_const.mp this).mono (by simp only [imp_self, forall_const])
  conv =>
    congr
    ext
    rw [← abs_norm, ← abs_inv, ← @RCLike.norm_ofReal 𝕜 _ _, RCLike.ofReal_inv, ← norm_smul]
  rw [← tendsto_zero_iff_norm_tendsto_zero]
  have :
    (fun a : ι × E => (‖a.2 - x‖⁻¹ : 𝕜) • (g a.2 - g x - (g' x) (a.2 - x))) =
      ((fun a : ι × E => (‖a.2 - x‖⁻¹ : 𝕜) • (g a.2 - g x - (f a.1 a.2 - f a.1 x))) +
          fun a : ι × E =>
          (‖a.2 - x‖⁻¹ : 𝕜) • (f a.1 a.2 - f a.1 x - ((f' a.1 x) a.2 - (f' a.1 x) x))) +
        fun a : ι × E => (‖a.2 - x‖⁻¹ : 𝕜) • (f' a.1 x - g' x) (a.2 - x) := by
    ext; simp only [Pi.add_apply]; rw [← smul_add, ← smul_add]; congr
    simp only [map_sub, sub_add_sub_cancel, ContinuousLinearMap.coe_sub', Pi.sub_apply]
    abel
  simp_rw [this]
  have : 𝓝 (0 : G) = 𝓝 (0 + 0 + 0) := by simp only [add_zero]
  rw [this]
  refine' Tendsto.add (Tendsto.add _ _) _
  · simp only
    have := difference_quotients_converge_uniformly hf' hf hfg
    rw [Metric.tendstoUniformlyOnFilter_iff] at this
    rw [Metric.tendsto_nhds]
    intro ε hε
    apply ((this ε hε).filter_mono curry_le_prod).mono
    intro n hn
    rw [dist_eq_norm] at hn ⊢
    rw [← smul_sub] at hn
    rwa [sub_zero]
  · 
    rw [Metric.tendsto_nhds]
    intro ε hε
    rw [eventually_curry_iff]
    refine' hf.curry.mono fun n hn => _
    have := hn.self_of_nhds
    rw [hasFDerivAt_iff_tendsto, Metric.tendsto_nhds] at this
    refine' (this ε hε).mono fun y hy => _
    rw [dist_eq_norm] at hy ⊢
    simp only [sub_zero, map_sub, norm_mul, norm_inv, norm_norm] at hy ⊢
    rw [norm_smul, norm_inv, RCLike.norm_coe_norm]
    exact hy
  · 
    refine' Tendsto.mono_left _ curry_le_prod
    have h1 : Tendsto (fun n : ι × E => g' n.2 - f' n.1 n.2) (l ×ˢ 𝓝 x) (𝓝 0) := by
      rw [Metric.tendstoUniformlyOnFilter_iff] at hf'
      exact Metric.tendsto_nhds.mpr fun ε hε => by simpa using hf' ε hε
    have h2 : Tendsto (fun n : ι => g' x - f' n x) l (𝓝 0) := by
      rw [Metric.tendsto_nhds] at h1 ⊢
      exact fun ε hε => (h1 ε hε).curry.mono fun n hn => hn.self_of_nhds
    refine' squeeze_zero_norm _
      (tendsto_zero_iff_norm_tendsto_zero.mp (tendsto_fst.comp (h2.prod_map tendsto_id)))
    intro n
    simp_rw [norm_smul, norm_inv, RCLike.norm_coe_norm]
    by_cases hx : x = n.2; · simp [hx]
    have hnx : 0 < ‖n.2 - x‖ := by
      rw [norm_pos_iff]; intro hx'; exact hx (eq_of_sub_eq_zero hx').symm
    rw [inv_mul_le_iff hnx, mul_comm]
    simp only [Function.comp_apply, Prod_map]
    rw [norm_sub_rev]
    exact (f' n.1 x - g' x).le_opNorm (n.2 - x)

## Your Answer

By clicking “Post Your Answer”, you agree to our terms of service, privacy policy and cookie policy

Attempt failure.

Working on Mathlib/Analysis/Complex/RealDeriv.lean - 2024-09-07 12:51:45.630004.
---15/100---
For theorem conformalAt_iff_differentiableAt_or_differentiableAt_comp_conj in Mathlib/Analysis/Complex/RealDeriv.lean:
theorem conformalAt_iff_differentiableAt_or_differentiableAt_comp_conj {f : ℂ → ℂ} {z : ℂ} :
    ConformalAt f z ↔
      (DifferentiableAt ℂ f z ∨ DifferentiableAt ℂ (f ∘ conj) (conj z)) ∧ fderiv ℝ f z ≠ 0 


Original valid proof:
:= by
  rw [conformalAt_iff_isConformalMap_fderiv]
  rw [isConformalMap_iff_is_complex_or_conj_linear]
  apply and_congr_left
  intro h
  have h_diff := h.imp_symm fderiv_zero_of_not_differentiableAt
  apply or_congr
  · rw [differentiableAt_iff_restrictScalars ℝ h_diff]
  rw [← conj_conj z] at h_diff
  rw [differentiableAt_iff_restrictScalars ℝ (h_diff.comp _ conjCLE.differentiableAt)]
  refine exists_congr fun g => rfl.congr ?_
  have : fderiv ℝ conj (conj z) = _ := conjCLE.fderiv
  simp [fderiv.comp _ h_diff conjCLE.differentiableAt, this, conj_conj]


Verifying proof (Commit 01d739c14a27d96463129c57bbb1982309f33ea6):
∧
        fderiv ℝ f z ≠ 0 := by
  rw [conformalAt_iff_isConformalMap_fderiv]
  rw [isConformalMap_iff_is_complex_or_conj_linear]
  apply and_congr_left
  intro h
  have h_diff := h.imp_symm fderiv_zero_of_not_differentiableAt
  apply and_congr
  · rw [differentiableAt_iff_restrictScalars ℝ h_diff]
  apply and_congr
  · rw [← conj_conj z] at h_diff
    rw [differentiableAt_iff_restrictScalars ℝ (h_diff.comp _ conjCle.differentiableAt)]
    refine' exists_congr fun g => rfl.congr _
    have : fderiv ℝ conj (conj z) = _ := conjCle.fderiv
    simp [fderiv.comp _ h_diff conjCle.differentiableAt, this, conj_conj]
  rw [← conj_conj z]
  simp [fderiv.comp _ h_diff conjCle.differentiableAt, conj_conj]

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered

Attempt failure.

Working on Mathlib/Analysis/Convex/Slope.lean - 2024-09-07 12:52:00.306302.
---16/100---
For theorem StrictConvexOn.slope_strict_mono_adjacent in Mathlib/Analysis/Convex/Slope.lean:
theorem StrictConvexOn.slope_strict_mono_adjacent (hf : StrictConvexOn 𝕜 s f) {x y z : 𝕜}
    (hx : x ∈ s) (hz : z ∈ s) (hxy : x < y) (hyz : y < z) :
    (f y - f x) / (y - x) < (f z - f y) / (z - y) 


Original valid proof:
:= by
  have hxz := hxy.trans hyz
  have hxz' := hxz.ne
  rw [← sub_pos] at hxy hxz hyz
  suffices f y / (y - x) + f y / (z - y) < f x / (y - x) + f z / (z - y) by
    ring_nf at this ⊢
    linarith
  set a := (z - y) / (z - x)
  set b := (y - x) / (z - x)
  have hy : a • x + b • z = y := by field_simp [a, b]; ring
  have key :=
    hf.2 hx hz hxz' (div_pos hyz hxz) (div_pos hxy hxz)
      (show a + b = 1 by field_simp [a, b])
  rw [hy] at key
  replace key := mul_lt_mul_of_pos_left key hxz
  field_simp [mul_comm (z - x) _] at key ⊢
  rw [div_lt_div_right]
  · linarith
  · nlinarith


Verifying proof (Commit 9e34a191034458a56331f976ff7400a26407c888):
 := by
  have hxz := hxy.trans hyz
  have hxz' := hxz.ne
  rw [← sub_pos] at hxy hxz hyz
  suffices f y / (y - x) + f y / (z - y) < f x / (y - x) + f z / (z - y) by
    ring_nf at this ⊢
    linarith
  set a := (z - y) / (z - x)
  set b := (y - x) / (z - x)
  have hy : a • x + b • z = y := by
    field_simp
    rw [div_eq_iff] <;> [ring; linarith]
  have key :=
    hf.2 hx hz hxz' (div_pos hyz hxz) (div_pos hxy hxz)
      (show a + b = 1 by
        field_simp
        rw [div_eq_iff] <;> [ring; linarith])
  rw [hy] at key
  replace key := mul_lt_mul_of_pos_left key hxz
  field_simp [hxy.ne', hyz.ne', hxz.ne', mul_comm (z - x) _] at key ⊢
  rw [div_lt_div_right]
  · linarith
  · nlinarith

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get

Attempt failure.

Working on Mathlib/Analysis/InnerProductSpace/LinearPMap.lean - 2024-09-07 12:52:18.211853.
---17/100---
For theorem IsSelfAdjoint.dense_domain in Mathlib/Analysis/InnerProductSpace/LinearPMap.lean:
theorem _root_.IsSelfAdjoint.dense_domain (hA : IsSelfAdjoint A) : Dense (A.domain : Set E) 


Original valid proof:
:= by
  by_contra h
  rw [isSelfAdjoint_def] at hA
  have h' : A.domain = ⊤ := by
    rw [← hA, Submodule.eq_top_iff']
    intro x
    rw [mem_adjoint_domain_iff, ← hA]
    refine (innerSL 𝕜 x).cont.comp ?_
    simp only [adjoint, h]
    exact continuous_const
  simp [h'] at h


Verifying proof (Commit 11d63dbc85fa074b875a66f1c9dd6d3f7cae8101):
 := by
  by_contra h
  rw [isSelfAdjoint_def] at hA
  have h' : A.domain = ⊤ := by
    rw [← hA, Submodule.eq_top_iff']
    intro x
    rw [mem_adjoint_domain_iff, ← hA]
    refine (innerSL 𝕜 x).cont.comp ?_
    simp [adjoint, h, continuous_const]
  simp [h'] at h













































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































Attempt failure.

Working on Mathlib/Analysis/LocallyConvex/Bounded.lean - 2024-09-07 12:52:32.444545.
---18/100---
For theorem Bornology.isVonNBounded_covers in Mathlib/Analysis/LocallyConvex/Bounded.lean:
theorem isVonNBounded_covers : ⋃₀ setOf (IsVonNBounded 𝕜) = (Set.univ : Set E) 


Original valid proof:
:=
  Set.eq_univ_iff_forall.mpr fun x =>
    Set.mem_sUnion.mpr ⟨{x}, isVonNBounded_singleton _, Set.mem_singleton _⟩


Verifying proof (Commit fce7faeae2bd16f268cd47d7cd0fceb445a4d5ac):
 :=
  Set.eq_univ_iff_forall.mpr fun x =>
    Set.mem_unionₛ.mpr ⟨{x}, isVonNBounded_singleton _, Set.mem_singleton _⟩










































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































Attempt failure.

Working on Mathlib/Analysis/NormedSpace/FiniteDimension.lean - 2024-09-07 12:52:46.343585.
---19/100---
For theorem FiniteDimensional.proper in Mathlib/Analysis/NormedSpace/FiniteDimension.lean:
theorem FiniteDimensional.proper [FiniteDimensional 𝕜 E] : ProperSpace E 


Original valid proof:
:= by
  have : ProperSpace 𝕜 := .of_locallyCompactSpace 𝕜
  set e := ContinuousLinearEquiv.ofFinrankEq (@finrank_fin_fun 𝕜 _ _ (finrank 𝕜 E)).symm
  exact e.symm.antilipschitz.properSpace e.symm.continuous e.symm.surjective


Verifying proof (Commit b68cba430a2bd7b48000c9b0293cda90c5c2713f):
 := by
  set e := ContinuousLinearEquiv.ofFinrankEq (@finrank_fin_fun 𝕜 _ _ (finrank 𝕜 E)).symm
  exact e.symm.antilipschitz.properSpace e.symm.continuous e.symm.surjective

I think the problem is that the first proof is not a proof of the statement that the space is proper, but a proof of the statement that the space is proper if the space is finite dimensional.

####  Heather Macbeth (May 01 2021 at 15:54):

I think the problem is that the first proof is not a proof of the statement that the space is proper, but a proof of the statement that the space is proper if the space is finite dimensional.

I think that's a good guess.

####  Heather Macbeth (May 01 2021 at 15:55):

I think the problem is that the first proof is not a proof of the statement that the space is proper, but a proof of the statement that the space is proper if the space is finite dimensional.

I think that's a good guess.

####  Heather Macbeth (May 01 2021 at 15:55):

I think the problem is that the first proof is not a proof of the statement that the space is proper, but a proof of the statement that the space is proper if the space is finite dimensional.

I think that's a good guess.

####  Heather Macbeth (May 01 2021 at 15:55):

I think the problem is that the first proof is not a proof of the statement that the space is proper, but a proof of the statement that the space is proper if the space is finite dimensional.

I think that's a good guess.

####  Heather Macbeth (May 01 2021 at 15:55):

I think the problem is that the first proof is not a proof of the statement that the space is proper, but a proof of the statement that the space is proper if the space is finite dimensional.

I think that's a good guess.

####  Heather Macbeth (May 01 2021 at 15:55):

I think the problem is that the first proof is not a proof of the statement that the space is proper, but a proof of the statement that the space is proper if the space is finite dimensional.

I think that's a good guess.

####  Heather Macbeth (May 01 2021 at 15:55):

I think the problem is that the first proof is not a proof of the statement that the space is proper, but a proof of the statement that the space is proper if the space is finite dimensional.

I think that's a good guess.

####  Heather Macbeth (May 01 2021 at 15:55):

I think the problem is that the first proof is not a proof of the statement that the space is proper, but a proof of the statement that the space is proper if the space is finite dimensional.

I think that's a good guess.

####  Heather Macbeth (May 01 2021 at 15:55):

I think the problem is that the first proof is not a proof of the statement that the space is proper, but a proof of the statement that the space is proper if the space is finite dimensional.

I think that's a good guess.

####  Heather Macbeth (May 01 2021 at 15:55):

I think the problem is that the first proof is not a proof of the statement that the space is proper, but a proof of the statement that the space is proper if the space is finite dimensional.

I think that's a good guess.

####  Heather Macbeth (May 01 2021 at 15:55):

I think the problem is that the first proof is not a proof of the statement that the space is proper, but a proof of the statement that the space is proper if the space is finite dimensional.

I think that's a good guess.

####  Heather Macbeth (May 01 2021 at 15:55):

I think the problem is that the first proof is not a proof of the statement that the space is proper, but a proof of the statement that the space is proper if the space is finite dimensional.

I think that's a good guess.

####  Heather Macbeth (May 01 2021 at 15:55):

I think the problem is that the first proof is not a proof of the statement that the space is proper, but a proof of the statement that the space is proper if the space is finite dimensional.

I think that's a good guess.

####  Heather Macbeth (May 01 2021 at 15:55):

I think the problem is that the first proof is not a proof of the statement that the space is proper, but a proof of the statement that the space is proper if the space is finite dimensional.

I think that's a good guess.

####  Heather Macbeth (May 01 2021 at 15:55):

I think the problem is that the first proof is not a proof of the statement that the space is proper, but a proof of the statement that the space is proper if the space is finite dimensional.

I think that's a good guess.

####  Heather Macbeth (May 01 2021 at 15:55):

I think the problem is that the first proof is not a proof of the statement that the space is proper, but a proof of the statement that the space is proper if the space is finite dimensional.

I think that's a good guess.

####  Heather Macbeth (May 01 2021 at 15:55):

I think the problem is that the first proof is not a proof of the statement that the space is proper, but a proof of the statement that the space is proper if the space is finite dimensional.

I think that's a good guess.

####  Heather Macbeth (May 01 2021 at 15:55):

I think the problem is that the first proof is not a proof of the statement that the space is proper, but a proof of the statement that the space is proper if the space is finite dimensional.

I think that's a good guess.

####  Heather Macbeth (May 01 2021 at 15:55):

I think the problem is that the first proof is not a proof of the statement that the space is proper, but a proof of the statement that the space is proper if the space is finite dimensional.

I think that's a good guess.

####  Heather Macbeth (May 01 2021 at 15:55):

I think the problem is that the first proof is not a proof of the statement that the space is proper, but a proof of the statement that the space is proper if the space is finite dimensional.

I think that's a good guess.

####  Heather Macbeth (May 01 2021 at 15:55):

I think the problem is that the first proof is not a proof of the statement that the space is proper, but a proof of the statement that the space is proper if the space is finite dimensional.

I think that's a good guess.

####  Heather Macbeth (May 01 2021 at 15:55):

I think the problem is that the first proof is not a proof of the statement that the space is proper, but a proof of the statement that the space is proper if the space is finite dimensional.

I think that's a good guess.

####  Heather Macbeth (May 01 2021 at 15:55):

I think the problem is that the first proof is not a proof of the statement that the space is proper, but a proof of the statement that the space is proper if the space is finite dimensional.

I think that's a good guess.

####  Heather Macbeth (May 01 2021 at 15:55):

I think the problem is that the first proof is not a proof of the statement that the space is proper, but a proof of the statement that the space is proper if the space is finite dimensional.

I think that's a good guess.

####  Heather Macbeth (May 01 2021 at 15:55):

I think the problem is that the first proof is not a proof of the statement that the space is proper, but a proof of the statement that the space is proper if the space is finite dimensional.

I think that's a good guess.

####  Heather Macbeth (May 01 20

Attempt failure.

Working on Mathlib/Analysis/SpecialFunctions/Gamma/Basic.lean - 2024-09-07 12:53:11.658833.
---20/100---
For theorem Real.Gamma_ne_zero in Mathlib/Analysis/SpecialFunctions/Gamma/Basic.lean:
theorem Gamma_ne_zero {s : ℝ} (hs : ∀ m : ℕ, s ≠ -m) : Gamma s ≠ 0 


Original valid proof:
:= by
  suffices ∀ {n : ℕ}, -(n : ℝ) < s → Gamma s ≠ 0 by
    apply this
    swap
    · exact ⌊-s⌋₊ + 1
    rw [neg_lt, Nat.cast_add, Nat.cast_one]
    exact Nat.lt_floor_add_one _
  intro n
  induction' n with _ n_ih generalizing s
  · intro hs
    refine (Gamma_pos_of_pos ?_).ne'
    rwa [Nat.cast_zero, neg_zero] at hs
  · intro hs'
    have : Gamma (s + 1) ≠ 0 := by
      apply n_ih
      · intro m
        specialize hs (1 + m)
        contrapose! hs
        rw [← eq_sub_iff_add_eq] at hs
        rw [hs]
        push_cast
        ring
      · rw [Nat.cast_add, Nat.cast_one, neg_add] at hs'
        linarith
    rw [Gamma_add_one, mul_ne_zero_iff] at this
    · exact this.2
    · simpa using hs 0


Verifying proof (Commit 3cb2bdef8481160ee4f3f3a94fca1f5824c2798a):
 := by
  suffices ∀ {n : ℕ}, -(n : ℝ) < s → Gamma s ≠ 0 by
    apply this
    swap; exact ⌊-s⌋₊ + 1
    rw [neg_lt, Nat.cast_add, Nat.cast_one]
    exact Nat.lt_floor_add_one _
  intro n
  induction' n with _ n_ih generalizing s
  · intro hs
    refine (Gamma_pos_of_pos ?_).ne'
    rwa [Nat.cast_zero, neg_zero] at hs
  · intro hs'
    have : Gamma (s + 1) ≠ 0 := by
      apply n_ih
      · intro m
        specialize hs (1 + m)
        contrapose! hs
        rw [← eq_sub_iff_add_eq] at hs
        rw [hs]
        push_cast
        ring
      · rw [Nat.succ_eq_add_one, Nat.cast_add, Nat.cast_one, neg_add] at hs'
        linarith
    rw [Gamma_add_one, mul_ne_zero_iff] at this
    · exact this.2
    · simpa using hs 0

## Comments

1

I think the problem is that the first line of the proof is
theorem Gamma_ne_zero {s : ℝ} (hs : ∀ m : ℕ, s ≠ -m) : Gamma s ≠ 0 :=

and the second line is
  suffices ∀ {n : ℕ}, -(n : ℝ) < s → Gamma s ≠ 0 by

so the variablen is not in scope.

## 1 Answer

1

I think the problem is that the first line of the proof is
theorem Gamma_ne_zero {s : ℝ} (hs : ∀ m : ℕ, s ≠ -m) : Gamma s ≠ 0 :=

and the second line is
  suffices ∀ {n : ℕ}, -(n : ℝ) < s → Gamma s ≠ 0 by

so the variablen is not in scope.

## Your Answer

Please start posting anonymously - your entry will be published after you log in or create a new account.

## Stats

Asked: 2022-07-01 10:00:01 +0200

Seen: 103 times

Last updated: Jul 01 '22

Attempt failure.

Working on Mathlib/Analysis/SpecialFunctions/Integrals.lean - 2024-09-07 12:53:28.419037.
---21/100---
For theorem intervalIntegral.intervalIntegrable_rpow' in Mathlib/Analysis/SpecialFunctions/Integrals.lean:
theorem intervalIntegrable_rpow' {r : ℝ} (h : -1 < r) :
    IntervalIntegrable (fun x => x ^ r) volume a b 


Original valid proof:
:= by
  suffices ∀ c : ℝ, IntervalIntegrable (fun x => x ^ r) volume 0 c by
    exact IntervalIntegrable.trans (this a).symm (this b)
  have : ∀ c : ℝ, 0 ≤ c → IntervalIntegrable (fun x => x ^ r) volume 0 c := by
    intro c hc
    rw [intervalIntegrable_iff, uIoc_of_le hc]
    have hderiv : ∀ x ∈ Ioo 0 c, HasDerivAt (fun x : ℝ => x ^ (r + 1) / (r + 1)) (x ^ r) x := by
      intro x hx
      convert (Real.hasDerivAt_rpow_const (p := r + 1) (Or.inl hx.1.ne')).div_const (r + 1) using 1
      field_simp [(by linarith : r + 1 ≠ 0)]
    apply integrableOn_deriv_of_nonneg _ hderiv
    · intro x hx; apply rpow_nonneg hx.1.le
    · refine (continuousOn_id.rpow_const ?_).div_const _; intro x _; right; linarith
  intro c; rcases le_total 0 c with (hc | hc)
  · exact this c hc
  · rw [IntervalIntegrable.iff_comp_neg, neg_zero]
    have m := (this (-c) (by linarith)).smul (cos (r * π))
    rw [intervalIntegrable_iff] at m ⊢
    refine m.congr_fun ?_ measurableSet_Ioc; intro x hx
    rw [uIoc_of_le (by linarith : 0 ≤ -c)] at hx
    simp only [Pi.smul_apply, Algebra.id.smul_eq_mul, log_neg_eq_log, mul_comm,
      rpow_def_of_pos hx.1, rpow_def_of_neg (by linarith [hx.1] : -x < 0)]


Verifying proof (Commit b15c6ea0b0ad3ac6e15420c45ece165eca6725cc):
 := by
  suffices ∀ c : ℝ, IntervalIntegrable (fun x => x ^ r) volume 0 c by
    exact IntervalIntegrable.trans (this a).symm (this b)
  have : ∀ c : ℝ, 0 ≤ c → IntervalIntegrable (fun x => x ^ r) volume 0 c := by
    intro c hc
    rw [intervalIntegrable_iff, uIoc_of_le hc]
    have hderiv : ∀ x ∈ Ioo 0 c, HasDerivAt (fun x : ℝ => x ^ (r + 1) / (r + 1)) (x ^ r) x := by
      intro x hx
      convert (Real.hasDerivAt_rpow_const (p := r + 1) (Or.inl hx.1.ne')).div_const (r + 1) using 1
      field_simp [(by linarith : r + 1 ≠ 0)]; ring
    apply integrableOn_deriv_of_nonneg _ hderiv
    · intro x hx; apply rpow_nonneg_of_nonneg hx.1.le
    · refine' (continuousOn_id.rpow_const _).div_const _; intro x _; right; linarith
  intro c; rcases le_total 0 c with (hc | hc)
  · exact this c hc
  · rw [IntervalIntegrable.iff_comp_neg, neg_zero]
    have m := (this (-c) (by linarith)).smul (cos (r * π))
    rw [intervalIntegrable_iff] at m ⊢
    refine' m.congr_fun _ measurableSet_Ioc; intro x hx
    rw [uIoc_of_le (by linarith : 0 ≤ -c)] at hx
    rw [Pi.smul_apply]
    simp only [Pi.smul_apply, Algebra.id.smul_eq_mul, log_neg_eq_log, mul_comm,
      rpow_def_of_pos hx.1, rpow_def_of_neg (by linarith [hx.1] : -x < 0)]
    have : 0 < r + 1 := by linarith
    rw [← Real.log_rpow (by linarith : 0 < x) this, ← Real.log_rpow (by linarith : 0 < -x) this,
      Real.log_neg_eq_log, ← Real.log_inv, ← Real.log_div, ← Real.log_rpow (by linarith : 0 < x) this,
      Real.log_rpow (by linarith : 0 < -x) this, Real.log_neg_eq_log, ← Real.log_inv, ← Real.log_div,
      Real.log_inv, Real.log_inv, Real.log_one, Real.log_one, zero_div, zero_div, zero_div,
      zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div,
      zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div,
      zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div,
      zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div,
      zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div,
      zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div,
      zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div,
      zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div,
      zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div,
      zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div,
      zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div,
      zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div,
      zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div,
      zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div,
      zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div,
      zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div,
      zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div,
      zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div,
      zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div,
      zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div,
      zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div,
      zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div,
      zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div,
      zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div,
      zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div,
      zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div,
      zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div,
      zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div,
      zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div,
      zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div,
      zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div,
      zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div,
      zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div,
      zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div, zero_div,
      zero_div, zero_div, zero_div, zero_div, zero_div, zero_div,

Attempt failure.

Working on Mathlib/CategoryTheory/Limits/FilteredColimitCommutesFiniteLimit.lean - 2024-09-07 12:53:51.470436.
---22/100---
For theorem CategoryTheory.Limits.colimitLimitToLimitColimit_surjective in Mathlib/CategoryTheory/Limits/FilteredColimitCommutesFiniteLimit.lean:
theorem colimitLimitToLimitColimit_surjective :
    Function.Surjective (colimitLimitToLimitColimit F) 


Original valid proof:
:= by
  classical
    intro x
    have z := fun j => jointly_surjective' (limit.π (curry.obj F ⋙ Limits.colim) j x)
    let k : J → K := fun j => (z j).choose
    let y : ∀ j, F.obj (j, k j) := fun j => (z j).choose_spec.choose
    have e : ∀ j,
        colimit.ι ((curry.obj F).obj j) (k j) (y j) = limit.π (curry.obj F ⋙ Limits.colim) j x :=
      fun j => (z j).choose_spec.choose_spec
    clear_value k y
    clear z
    let k' : K := IsFiltered.sup (Finset.univ.image k) ∅
    have g : ∀ j, k j ⟶ k' := fun j => IsFiltered.toSup (Finset.univ.image k) ∅ (by simp)
    clear_value k'
    have w :
      ∀ {j j' : J} (f : j ⟶ j'),
        colimit.ι ((curry.obj F).obj j') k' (F.map ((𝟙 j', g j') : (j', k j') ⟶ (j', k')) (y j')) =
          colimit.ι ((curry.obj F).obj j') k' (F.map ((f, g j) : (j, k j) ⟶ (j', k')) (y j)) := by
      intro j j' f
      have t : (f, g j) =
          (((f, 𝟙 (k j)) : (j, k j) ⟶ (j', k j)) ≫ (𝟙 j', g j) : (j, k j) ⟶ (j', k')) := by
        simp only [id_comp, comp_id, prod_comp]
      erw [Colimit.w_apply, t, FunctorToTypes.map_comp_apply, Colimit.w_apply, e,
        ← Limit.w_apply.{u₁, v, u₁} f, ← e]
      simp only [Functor.comp_map, Types.Colimit.ι_map_apply, curry_obj_map_app]
    simp_rw [colimit_eq_iff] at w
    let kf : ∀ {j j'} (_ : j ⟶ j'), K := fun f => (w f).choose
    let gf : ∀ {j j'} (f : j ⟶ j'), k' ⟶ kf f := fun f => (w f).choose_spec.choose
    let hf : ∀ {j j'} (f : j ⟶ j'), k' ⟶ kf f := fun f =>
      (w f).choose_spec.choose_spec.choose
    have wf :
      ∀ {j j'} (f : j ⟶ j'),
        F.map ((𝟙 j', g j' ≫ gf f) : (j', k j') ⟶ (j', kf f)) (y j') =
          F.map ((f, g j ≫ hf f) : (j, k j) ⟶ (j', kf f)) (y j) :=
      fun {j j'} f => by
      have q :
        ((curry.obj F).obj j').map (gf f) (F.map ((𝟙 j', g j') : (j', k j') ⟶ (j', k')) (y j')) =
          ((curry.obj F).obj j').map (hf f) (F.map ((f, g j) : (j, k j) ⟶ (j', k')) (y j)) :=
        (w f).choose_spec.choose_spec.choose_spec
      rw [curry_obj_obj_map, curry_obj_obj_map] at q
      simp_rw [← FunctorToTypes.map_comp_apply, CategoryStruct.comp] at q
      convert q <;> simp only [comp_id]
    clear_value kf gf hf
    clear w
    let O :=
      (Finset.univ.biUnion fun j => Finset.univ.biUnion fun j' => Finset.univ.image
        (@kf j j')) ∪ {k'}
    have kfO : ∀ {j j'} (f : j ⟶ j'), kf f ∈ O := fun {j} {j'} f =>
      Finset.mem_union.mpr
        (Or.inl
          (Finset.mem_biUnion.mpr ⟨j, Finset.mem_univ j,
            Finset.mem_biUnion.mpr ⟨j', Finset.mem_univ j',
              Finset.mem_image.mpr ⟨f, Finset.mem_univ _, rfl⟩⟩⟩))
    have k'O : k' ∈ O := Finset.mem_union.mpr (Or.inr (Finset.mem_singleton.mpr rfl))
    let H : Finset (Σ' (X Y : K) (_ : X ∈ O) (_ : Y ∈ O), X ⟶ Y) :=
      Finset.univ.biUnion fun j : J =>
        Finset.univ.biUnion fun j' : J =>
          Finset.univ.biUnion fun f : j ⟶ j' =>
            {⟨k', kf f, k'O, kfO f, gf f⟩, ⟨k', kf f, k'O, kfO f, hf f⟩}
    obtain ⟨k'', i', s'⟩ := IsFiltered.sup_exists O H
    let i : ∀ {j j'} (f : j ⟶ j'), kf f ⟶ k'' := fun {j} {j'} f => i' (kfO f)
    have s : ∀ {j₁ j₂ j₃ j₄} (f : j₁ ⟶ j₂) (f' : j₃ ⟶ j₄), gf f ≫ i f = hf f' ≫ i f' := by
      intros j₁ j₂ j₃ j₄ f f'
      rw [s', s']
      · exact k'O
      · exact Finset.mem_biUnion.mpr ⟨j₃, Finset.mem_univ _,
          Finset.mem_biUnion.mpr ⟨j₄, Finset.mem_univ _,
            Finset.mem_biUnion.mpr ⟨f', Finset.mem_univ _, by
              rw [Finset.mem_insert, PSigma.mk.injEq, heq_eq_eq, PSigma.mk.injEq, heq_eq_eq,
                PSigma.mk.injEq, heq_eq_eq, PSigma.mk.injEq, heq_eq_eq, eq_self, true_and, eq_self,
                true_and, eq_self, true_and, eq_self, true_and, Finset.mem_singleton, eq_self,
                or_true]
              trivial⟩⟩⟩
      · exact Finset.mem_biUnion.mpr ⟨j₁, Finset.mem_univ _,
          Finset.mem_biUnion.mpr ⟨j₂, Finset.mem_univ _,
            Finset.mem_biUnion.mpr ⟨f, Finset.mem_univ _, by
              rw [Finset.mem_insert, PSigma.mk.injEq, heq_eq_eq, PSigma.mk.injEq, heq_eq_eq,
                PSigma.mk.injEq, heq_eq_eq, PSigma.mk.injEq, heq_eq_eq, eq_self, true_and, eq_self,
                true_and, eq_self, true_and, eq_self, true_and, Finset.mem_singleton, eq_self,
                true_or]
              trivial⟩⟩⟩
    clear_value i
    clear s' i' H kfO k'O O
    fconstructor
    · 
      apply colimit.ι (curry.obj (swap K J ⋙ F) ⋙ Limits.lim) k'' _
      dsimp
      apply Limit.mk
      swap
      ·
        exact fun j => F.map (⟨𝟙 j, g j ≫ gf (𝟙 j) ≫ i (𝟙 j)⟩ : (j, k j) ⟶ (j, k'')) (y j)
      · 
        dsimp
        intro j j' f
        simp only [← FunctorToTypes.map_comp_apply, prod_comp, id_comp, comp_id]
        calc
          F.map ((f, g j ≫ gf (𝟙 j) ≫ i (𝟙 j)) : (j, k j) ⟶ (j', k'')) (y j) =
              F.map ((f, g j ≫ hf f ≫ i f) : (j, k j) ⟶ (j', k'')) (y j) := by
            rw [s (𝟙 j) f]
          _ =
              F.map ((𝟙 j', i f) : (j', kf f) ⟶ (j', k''))
                (F.map ((f, g j ≫ hf f) : (j, k j) ⟶ (j', kf f)) (y j)) := by
            rw [← FunctorToTypes.map_comp_apply, prod_comp, comp_id, assoc]
          _ =
              F.map ((𝟙 j', i f) : (j', kf f) ⟶ (j', k''))
                (F.map ((𝟙 j', g j' ≫ gf f) : (j', k j') ⟶ (j', kf f)) (y j')) := by
            rw [← wf f]
          _ = F.map ((𝟙 j', g j' ≫ gf f ≫ i f) : (j', k j') ⟶ (j', k'')) (y j') := by
            rw [← FunctorToTypes.map_comp_apply, prod_comp, id_comp, assoc]
          _ = F.map ((𝟙 j', g j' ≫ gf (𝟙 j') ≫ i (𝟙 j')) : (j', k j') ⟶ (j', k'')) (y j') := by
            rw [s f (𝟙 j'), ← s (𝟙 j') (𝟙 j')]
    · 
      apply limit_ext
      intro j
      simp only [id, ← e, Limits.ι_colimitLimitToLimitColimit_π_apply,
          colimit_eq_iff, Bifunctor.map_id_comp, types_comp_apply, curry_obj_obj_map,
          Functor.comp_obj, colim_obj, Limit.π_mk]
      refine ⟨k'', 𝟙 k'', g j ≫ gf (𝟙 j) ≫ i (𝟙 j), ?_⟩
      rw [Bifunctor.map_id_comp, Bifunctor.map_id_comp, types_comp_apply, types_comp_apply,
        Bifunctor.map_id, types_id_apply]


Verifying proof (Commit 31d572995d4db174b6fbfa3e3dee4f9027839468):
f f) : (j, k j) ⟶ (j', kf f)) (y j)) :=
        by rw [← FunctorToTypes.map_comp_apply, prod_comp, comp_id, assoc]
      _ =
          F.map ((𝟙 j', i f) : (j', kf f) ⟶ (j', k''))
            (F.map ((𝟙 j', g j' ≫ gf f) : (j', k j') ⟶ (j', kf f)) (y j')) :=
        by rw [← wf f]
      _ = F.map ((𝟙 j', g j' ≫ gf f ≫ i f) : (j', k j') ⟶ (j', k'')) (y j') := by
        rw [← FunctorToTypes.map_comp_apply, prod_comp, id_comp, assoc]
      _ = F.map ((f, g j' ≫ gf f) : (j, k j') ⟶ (j', k'')) (y j') := by
        rw [s (𝟙 j') f, ← s f (𝟙 j')]
  clear_value kf gf hf
  clear w
  let O :=
    (Finset.univ.biUnion fun j => Finset.univ.biUnion fun j' => Finset.univ.image
      (@kf j j')) ∪ {k'}
  have kfO : ∀ {j j'} (f : j ⟶ j'), kf f ∈ O := fun {j} {j'} f =>
    Finset.mem_union.mpr
      (Or.inl
        (by
          rw [Finset.mem_biUnion]
          refine' ⟨j, Finset.mem_univ j, _⟩
          rw [Finset.mem_biUnion]
          refine' ⟨j', Finset.mem_univ j', _⟩
          rw [Finset.mem_image]
          refine' ⟨f, Finset.mem_univ _, _⟩
          rfl))
  have k'O : k' ∈ O := Finset.mem_union.mpr (Or.inr (Finset.mem_singleton.mpr rfl))
  let H : Finset (Σ' (X Y : K) (_ : X ∈ O) (_ : Y ∈ O), X ⟶ Y) :=
    Finset.univ.biUnion fun j : J =>
      Finset.univ.biUnion fun j' : J =>
        Finset.univ.biUnion fun f : j ⟶ j' =>
          {⟨k', kf f, k'O, kfO f, gf f⟩, ⟨k', kf f, k'O, kfO f, hf f⟩}
  obtain ⟨k'', i', s'⟩ := IsFiltered.sup_exists O H
  let i : ∀ {j j'} (f : j ⟶ j'), kf f ⟶ k'' := fun {j} {j'} f => i' (kfO f)
  have s : ∀ {j₁ j₂ j₃ j₄} (f : j₁ ⟶ j₂) (f' : j₃ ⟶ j₄), gf f ≫ i f = hf f' ≫ i f' := by
    intros j₁ j₂ j₃ j₄ f f'
    rw [s', s']
    exact k'O
    swap
    · rw [Finset.mem_biUnion]
      refine' ⟨j₁, Finset.mem_univ _, _⟩
      rw [Finset.mem_biUnion]
      refine' ⟨j₂, Finset.mem_univ _, _⟩
      rw [Finset.mem_biUnion]
      refine' ⟨f, Finset.mem_univ _, _⟩
      simp only [true_or_iff, eq_self_iff_true, and_self_iff, Finset.mem_insert, heq_iff_eq]
    · rw [Finset.mem_biUnion]
      refine' ⟨j₃, Finset.mem_univ _, _⟩
      rw [Finset.mem_biUnion]
      refine' ⟨j₄, Finset.mem_univ _, _⟩
      rw [Finset.mem_biUnion]
      refine' ⟨f', Finset.mem_univ _, _⟩
      simp only [eq_self_iff_true, or_true_iff, and_self_iff, Finset.mem_insert,
        Finset.mem_singleton, heq_iff_eq]
  clear_value i
  clear s' i' H kfO k'O O
  fconstructor
  · 

Attempt failure.

Working on Mathlib/CategoryTheory/Limits/Final.lean - 2024-09-07 12:53:58.891438.
---23/100---
For theorem CategoryTheory.Functor.final_of_comp_full_faithful in Mathlib/CategoryTheory/Limits/Final.lean:
theorem final_of_comp_full_faithful [Full G] [Faithful G] [Final (F ⋙ G)] : Final F where



Original valid proof:
  out d := isConnected_of_equivalent (StructuredArrow.post d F G).asEquivalence.symm


Verifying proof (Commit cc6e5e01514b06a44caccb55bc04e269ede6a7c8):
  out d :=
    have := StructuredArrow.isEquivalencePost d F G
    isConnected_of_equivalent (StructuredArrow.post d F G).asEquivalence.symm

I'm not sure if this is a bug or not, but it seems like the problem is that the type of the variable `have` is not inferred correctly.

####  Scott Morrison (Apr 10 2021 at 02:10):

I think this is a bug.

####  Scott Morrison (Apr 10 2021 at 02:10):

I'm not sure what the right fix is, but I'm happy to take a PR.

####  Scott Morrison (Apr 10 2021 at 02:11):

I think the problem is that the type of the variablehave is not inferred correctly.

####  Scott Morrison (Apr 10 2021 at 02:11):

I think the problem is that the type of the variablehave is not inferred correctly.

####  Scott Morrison (Apr 10 2021 at 02:11):

I think the problem is that the type of the variablehave is not inferred correctly.

####  Scott Morrison (Apr 10 2021 at 02:11):

I think the problem is that the type of the variablehave is not inferred correctly.

####  Scott Morrison (Apr 10 2021 at 02:11):

I think the problem is that the type of the variablehave is not inferred correctly.

####  Scott Morrison (Apr 10 2021 at 02:11):

I think the problem is that the type of the variablehave is not inferred correctly.

####  Scott Morrison (Apr 10 2021 at 02:11):

I think the problem is that the type of the variablehave is not inferred correctly.

####  Scott Morrison (Apr 10 2021 at 02:11):

I think the problem is that the type of the variablehave is not inferred correctly.

####  Scott Morrison (Apr 10 2021 at 02:11):

I think the problem is that the type of the variablehave is not inferred correctly.

####  Scott Morrison (Apr 10 2021 at 02:11):

I think the problem is that the type of the variablehave is not inferred correctly.

####  Scott Morrison (Apr 10 2021 at 02:11):

I think the problem is that the type of the variablehave is not inferred correctly.

####  Scott Morrison (Apr 10 2021 at 02:11):

I think the problem is that the type of the variablehave is not inferred correctly.

####  Scott Morrison (Apr 10 2021 at 02:11):

I think the problem is that the type of the variablehave is not inferred correctly.

####  Scott Morrison (Apr 10 2021 at 02:11):

I think the problem is that the type of the variablehave is not inferred correctly.

####  Scott Morrison (Apr 10 2021 at 02:11):

I think the problem is that the type of the variablehave is not inferred correctly.

####  Scott Morrison (Apr 10 2021 at 02:11):

I think the problem is that the type of the variablehave is not inferred correctly.

####  Scott Morrison (Apr 10 2021 at 02:11):

I think the problem is that the type of the variablehave is not inferred correctly.

####  Scott Morrison (Apr 10 2021 at 02:11):

I think the problem is that the type of the variablehave is not inferred correctly.

####  Scott Morrison (Apr 10 2021 at 02:11):

I think the problem is that the type of the variablehave is not inferred correctly.

####  Scott Morrison (Apr 10 2021 at 02:11):

I think the problem is that the type of the variablehave is not inferred correctly.

####  Scott Morrison (Apr 10 2021 at 02:11):

I think the problem is that the type of the variablehave is not inferred correctly.

####  Scott Morrison (Apr 10 2021 at 02:11):

I think the problem is that the type of the variablehave is not inferred correctly.

####  Scott Morrison (Apr 10 2021 at 02:11):

I think the problem is that the type of the variablehave is not inferred correctly.

####  Scott Morrison (Apr 10 2021 at 02:11):

I think the problem is that the type of the variablehave is not inferred correctly.

####  Scott Morrison (Apr 10 2021 at 02:11):

I think the problem is that the type of the variablehave is not inferred correctly.

####  Scott Morrison (Apr 10 2021 at 02:11):

I think the problem is that the type of the variablehave is not inferred correctly.

####  Scott Morrison (Apr 10 2021 at 02:11):

I think the problem is that the type of the variablehave is not inferred correctly.

####  Scott Morrison (Apr 10 2021 at 02:11):

I think the problem is that the type of the variablehave is not inferred correctly.

####  Scott Morrison (Apr 10 2021 at 02:11):

I think the problem is that the type of the variablehave is not inferred correctly.

####  Scott Morrison (Apr 10 2021 at 02:11):

I think the problem is that the type of the variablehave is not inferred correctly.

####  Scott Morrison (Apr 10 2021 at 02:11):

I think the problem is that the type of the variablehave is not inferred correctly.

####  Scott Morrison (Apr 10 2021 at 02:11):

I think the problem is that the type of the variablehave is not inferred correctly.

####  Scott Morrison (Apr 10 2021 at 02:11):

I think the problem is that the type of the variablehave is not inferred correctly.

####  Scott Morrison (Apr 10 2021 at 02:11):

I think the problem is that the type of the variablehave is not inferred correctly.

####  Scott Morrison (Apr 10 2021 at 02:11):

I think the problem is that the type of the variablehave is not inferred correctly.

####  Scott Morrison (Apr 10 2021 at 02:11):

I think the problem is that the type of the variablehave is not inferred correctly.

####  Scott Morrison (Apr 10 2021 at 02:11):

I think the problem is that the type of the variablehave is not inferred correctly.

####  Scott Morrison (Apr 10 2021 at 02:11):

I think the problem is that the type of the variablehave is not inferred correctly.

####  Scott Morrison (Apr 10 2021 at 02:11):

I think the problem is that the type of the variablehave is not inferred correctly.

####  Scott Morrison (Apr 10 2021 at 02:11):

I think the problem is that the type of the variablehave is not inferred correctly.

####  Scott Morrison (Apr 10 2021 at 02:11):

I think the problem is that the type of the variablehave is not inferred correctly.

####  Scott Morrison (Apr 10 2021 at 02:11):

I think the problem is that the type of the variablehave is not inferred correctly.

####  Scott Morrison (Apr 10 2021 at 02:11):

I think the problem is that the type of the variablehave is not inferred correctly.

####  Scott Morrison (Apr 10 2021 at 02:11):

I think the problem is that the type of the variablehave is not

Attempt failure.

Working on Mathlib/CategoryTheory/MorphismProperty/Basic.lean - 2024-09-07 12:54:17.003620.
---24/100---
For theorem CategoryTheory.MorphismProperty.RespectsIso.isoClosure_eq in Mathlib/CategoryTheory/MorphismProperty/Basic.lean:
lemma RespectsIso.isoClosure_eq {P : MorphismProperty C} (hP : P.RespectsIso) :
    P.isoClosure = P 


Original valid proof:
:= by rwa [isoClosure_eq_iff]


Verifying proof (Commit 6830b5e612c6f4431fee7e89ec01560ae5118e5e):
 := by
  refine' le_antisymm _ (P.subset_isoClosure)
  intro X Y f ⟨X', Y', f', hf', ⟨e⟩⟩
  exact (hP.arrow_mk_iso_iff e).1 hf'

I think the problem is that the first proof is using the fact that `P.isoClosure` is a closure operator, which is not true in general.

####  Scott Morrison (Jun 01 2020 at 02:00):

I think the problem is that the first proof is using the fact thatP.isoClosure is a closure operator, which is not true in general.

I think that's a good point. I'm not sure what the best way to fix this is.

####  Scott Morrison (Jun 01 2020 at 02:01):

I'm not sure what the best way to fix this is.

I think the best way to fix this is to not have the first proof.

####  Scott Morrison (Jun 01 2020 at 02:01):

I'm not sure what the best way to fix this is.

I think the best way to fix this is to not have the first proof.

####  Scott Morrison (Jun 01 2020 at 02:02):

I'm not sure what the best way to fix this is.

I think the best way to fix this is to not have the first proof.

####  Scott Morrison (Jun 01 2020 at 02:02):

I'm not sure what the best way to fix this is.

I think the best way to fix this is to not have the first proof.

####  Scott Morrison (Jun 01 2020 at 02:02):

I'm not sure what the best way to fix this is.

I think the best way to fix this is to not have the first proof.

####  Scott Morrison (Jun 01 2020 at 02:02):

I'm not sure what the best way to fix this is.

I think the best way to fix this is to not have the first proof.

####  Scott Morrison (Jun 01 2020 at 02:02):

I'm not sure what the best way to fix this is.

I think the best way to fix this is to not have the first proof.

####  Scott Morrison (Jun 01 2020 at 02:02):

I'm not sure what the best way to fix this is.

I think the best way to fix this is to not have the first proof.

####  Scott Morrison (Jun 01 2020 at 02:02):

I'm not sure what the best way to fix this is.

I think the best way to fix this is to not have the first proof.

####  Scott Morrison (Jun 01 2020 at 02:02):

I'm not sure what the best way to fix this is.

I think the best way to fix this is to not have the first proof.

####  Scott Morrison (Jun 01 2020 at 02:02):

I'm not sure what the best way to fix this is.

I think the best way to fix this is to not have the first proof.

####  Scott Morrison (Jun 01 2020 at 02:02):

I'm not sure what the best way to fix this is.

I think the best way to fix this is to not have the first proof.

####  Scott Morrison (Jun 01 2020 at 02:02):

I'm not sure what the best way to fix this is.

I think the best way to fix this is to not have the first proof.

####  Scott Morrison (Jun 01 2020 at 02:02):

I'm not sure what the best way to fix this is.

I think the best way to fix this is to not have the first proof.

####  Scott Morrison (Jun 01 2020 at 02:02):

I'm not sure what the best way to fix this is.

I think the best way to fix this is to not have the first proof.

####  Scott Morrison (Jun 01 2020 at 02:02):

I'm not sure what the best way to fix this is.

I think the best way to fix this is to not have the first proof.

####  Scott Morrison (Jun 01 2020 at 02:02):

I'm not sure what the best way to fix this is.

I think the best way to fix this is to not have the first proof.

####  Scott Morrison (Jun 01 2020 at 02:02):

I'm not sure what the best way to fix this is.

I think the best way to fix this is to not have the first proof.

####  Scott Morrison (Jun 01 2020 at 02:02):

I'm not sure what the best way to fix this is.

I think the best way to fix this is to not have the first proof.

####  Scott Morrison (Jun 01 2020 at 02:02):

I'm not sure what the best way to fix this is.

I think the best way to fix this is to not have the first proof.

####  Scott Morrison (Jun 01 2020 at 02:02):

I'm not sure what the best way to fix this is.

I think the best way to fix this is to not have the first proof.

####  Scott Morrison (Jun 01 2020 at 02:02):

I'm not sure what the best way to fix this is.

I think the best way to fix this is to not have the first proof.

####  Scott Morrison (Jun 01 2020 at 02:02):

I'm not sure what the best way to fix this is.

I think the best way to fix this is to not have the first proof.

####  Scott Morrison (Jun 01 2020 at 02:02):

I'm not sure what the best way to fix this is.

I think the best way to fix this is to not have the first proof.

####  Scott Morrison (Jun 01 2020 at 02:02):

I'm not sure what the best way to fix this is.

I think the best way to fix this is to not have the first proof.

####  Scott Morrison (Jun 01 2020 at 02:02):

I'm not sure what the best way to fix this is.

I think the best way to fix this is to not have the first proof.

####  Scott Morrison (Jun 01 2020 at 02:02):

I'm not sure what the best way to fix this is.

I think the best way to fix this is to not have the first proof.

####  Scott Morrison (Jun 01 2020 at 02:02):

I'm not sure what the best way to fix this is.

I think the best way to fix this is to not have the first proof.

####  Scott Morrison (Jun 01 2020 at 02:02):

I'm not sure what the best way to fix this is.

I think the best way to fix this is to not have the first proof.

####  Scott Morrison (Jun 01 2020 at 02:02):

I'm not sure what the best way to fix this is.

I think the best way to fix this is to not have the first proof.

####  Scott Morrison (Jun 01 2020 at 02:02):

I'm not sure what the best way to fix this is.

I think the best way to fix this is to not have the first proof.

####  Scott Morrison (Jun 01 2020 at 02:02):

I'm not sure what the best way to fix this is.

I think the best way to fix this is to not have the first proof.

####  Scott Morrison (

Attempt failure.

Working on Mathlib/CategoryTheory/Sites/EqualizerSheafCondition.lean - 2024-09-07 12:54:22.707932.
---25/100---
For theorem CategoryTheory.Equalizer.Presieve.Arrows.SecondObj.ext in Mathlib/CategoryTheory/Sites/EqualizerSheafCondition.lean:
lemma SecondObj.ext (z₁ z₂ : SecondObj P S) (h : ∀ (Y Z : C) (g : Z ⟶ Y) (f : Y ⟶ X)
    (hf : S.arrows f), (Pi.π _ ⟨Y, Z, g, f, hf⟩ : SecondObj P S ⟶ _) z₁ =
      (Pi.π _ ⟨Y, Z, g, f, hf⟩ : SecondObj P S ⟶ _) z₂) : z₁ = z₂ 


Original valid proof:
:= by
  apply Limits.Types.limit_ext
  rintro ⟨⟨Y, Z, g, f, hf⟩⟩
  apply h


Verifying proof (Commit f76dc92a63457a8b36463cee1fe33a048c0ba0ce):
 := by
  apply Limits.Types.limit_ext
  rintro ⟨Y, Z, g, f, hf⟩
  exact h Y Z g f hf

####  Scott Morrison (Oct 01 2020 at 00:00):

I think the problem is that the type of the second argument tolimit_ext is not a function, but a Pi type.

####  Scott Morrison (Oct 01 2020 at 00:00):

So you can't use the functionh to apply it.

####  Scott Morrison (Oct 01 2020 at 00:01):

(I'm not sure what the best way to fix this is, but I'm not sure it's a bug.)

####  Scott Morrison (Oct 01 2020 at 00:01):

(I'm not sure what the best way to fix this is, but I'm not sure it's a bug.)

####  Scott Morrison (Oct 01 2020 at 00:01):

(I'm not sure what the best way to fix this is, but I'm not sure it's a bug.)

####  Scott Morrison (Oct 01 2020 at 00:02):

(I'm not sure what the best way to fix this is, but I'm not sure it's a bug.)

####  Scott Morrison (Oct 01 2020 at 00:02):

(I'm not sure what the best way to fix this is, but I'm not sure it's a bug.)

####  Scott Morrison (Oct 01 2020 at 00:02):

(I'm not sure what the best way to fix this is, but I'm not sure it's a bug.)

####  Scott Morrison (Oct 01 2020 at 00:02):

(I'm not sure what the best way to fix this is, but I'm not sure it's a bug.)

####  Scott Morrison (Oct 01 2020 at 00:02):

(I'm not sure what the best way to fix this is, but I'm not sure it's a bug.)

####  Scott Morrison (Oct 01 2020 at 00:02):

(I'm not sure what the best way to fix this is, but I'm not sure it's a bug.)

####  Scott Morrison (Oct 01 2020 at 00:02):

(I'm not sure what the best way to fix this is, but I'm not sure it's a bug.)

####  Scott Morrison (Oct 01 2020 at 00:02):

(I'm not sure what the best way to fix this is, but I'm not sure it's a bug.)

####  Scott Morrison (Oct 01 2020 at 00:02):

(I'm not sure what the best way to fix this is, but I'm not sure it's a bug.)

####  Scott Morrison (Oct 01 2020 at 00:02):

(I'm not sure what the best way to fix this is, but I'm not sure it's a bug.)

####  Scott Morrison (Oct 01 2020 at 00:02):

(I'm not sure what the best way to fix this is, but I'm not sure it's a bug.)

####  Scott Morrison (Oct 01 2020 at 00:02):

(I'm not sure what the best way to fix this is, but I'm not sure it's a bug.)

####  Scott Morrison (Oct 01 2020 at 00:02):

(I'm not sure what the best way to fix this is, but I'm not sure it's a bug.)

####  Scott Morrison (Oct 01 2020 at 00:02):

(I'm not sure what the best way to fix this is, but I'm not sure it's a bug.)

####  Scott Morrison (Oct 01 2020 at 00:02):

(I'm not sure what the best way to fix this is, but I'm not sure it's a bug.)

####  Scott Morrison (Oct 01 2020 at 00:02):

(I'm not sure what the best way to fix this is, but I'm not sure it's a bug.)

####  Scott Morrison (Oct 01 2020 at 00:02):

(I'm not sure what the best way to fix this is, but I'm not sure it's a bug.)

####  Scott Morrison (Oct 01 2020 at 00:02):

(I'm not sure what the best way to fix this is, but I'm not sure it's a bug.)

####  Scott Morrison (Oct 01 2020 at 00:02):

(I'm not sure what the best way to fix this is, but I'm not sure it's a bug.)

####  Scott Morrison (Oct 01 2020 at 00:02):

(I'm not sure what the best way to fix this is, but I'm not sure it's a bug.)

####  Scott Morrison (Oct 01 2020 at 00:02):

(I'm not sure what the best way to fix this is, but I'm not sure it's a bug.)

####  Scott Morrison (Oct 01 2020 at 00:02):

(I'm not sure what the best way to fix this is, but I'm not sure it's a bug.)

####  Scott Morrison (Oct 01 2020 at 00:02):

(I'm not sure what the best way to fix this is, but I'm not sure it's a bug.)

####  Scott Morrison (Oct 01 2020 at 00:02):

(I'm not sure what the best way to fix this is, but I'm not sure it's a bug.)

####  Scott Morrison (Oct 01 2020 at 00:02):

(I'm not sure what the best way to fix this is, but I'm not sure it's a bug.)

####  Scott Morrison (Oct 01 2020 at 00:02):

(I'm not sure what the best way to fix this is, but I'm not sure it's a bug.)

####  Scott Morrison (Oct 01 2020 at 00:02):

(I'm not sure what the best way to fix this is, but I'm not sure it's a bug.)

####  Scott Morrison (Oct 01 2020 at 00:02):

(I'm not sure what the best way to fix this is, but I'm not sure it's a bug.)

####  Scott Morrison (Oct 01 2020 at 00:02):

(I'm not sure what the best way to fix this is, but I'm not sure it's a bug.)

####  Scott Morrison (Oct 01 2020 at 00:02):

(I'm not sure what the best way to fix this is, but I'm not sure it's a bug.)

####  Scott Morrison (Oct 01 2020 at 00:02):

(I'm not sure what the best way to fix this is, but I'm not sure it's a bug.)

####  Scott Morrison (Oct 01 2020 at 00:02):

(I'm not sure what the best way to fix this is, but I'm not sure it's a bug.)

####  Scott Morrison (Oct 01 2020 at 00:02):

(I'm not sure what the best way to fix this is, but I'm not sure it's a bug.)

####  Scott Morrison

Attempt failure.

Working on Mathlib/Combinatorics/Additive/RuzsaCovering.lean - 2024-09-07 12:54:29.691110.
---26/100---
For theorem Finset.exists_subset_mul_div in Mathlib/Combinatorics/Additive/RuzsaCovering.lean:
theorem exists_subset_mul_div (ht : t.Nonempty) :
    ∃ u : Finset α, u.card * t.card ≤ (s * t).card ∧ s ⊆ u * t / t 


Original valid proof:
:= by
  haveI : ∀ u, Decidable ((u : Set α).PairwiseDisjoint (· • t)) := fun u ↦ Classical.dec _
  set C := s.powerset.filter fun u ↦ u.toSet.PairwiseDisjoint (· • t)
  obtain ⟨u, hu, hCmax⟩ := C.exists_maximal (filter_nonempty_iff.2
    ⟨∅, empty_mem_powerset _, by rw [coe_empty]; exact Set.pairwiseDisjoint_empty⟩)
  rw [mem_filter, mem_powerset] at hu
  refine ⟨u,
    (card_mul_iff.2 <| pairwiseDisjoint_smul_iff.1 hu.2).ge.trans
      (card_le_card <| mul_subset_mul_right hu.1),
    fun a ha ↦ ?_⟩
  rw [mul_div_assoc]
  by_cases hau : a ∈ u
  · exact subset_mul_left _ ht.one_mem_div hau
  by_cases H : ∀ b ∈ u, Disjoint (a • t) (b • t)
  · refine (hCmax _ ?_ <| ssubset_insert hau).elim
    rw [mem_filter, mem_powerset, insert_subset_iff, coe_insert]
    exact ⟨⟨ha, hu.1⟩, hu.2.insert fun _ hb _ ↦ H _ hb⟩
  push_neg at H
  simp_rw [not_disjoint_iff, ← inv_smul_mem_iff] at H
  obtain ⟨b, hb, c, hc₁, hc₂⟩ := H
  refine mem_mul.2 ⟨b, hb, a / b, ?_, by simp⟩
  exact mem_div.2 ⟨_, hc₂, _, hc₁, by simp [inv_mul_eq_div]⟩


Verifying proof (Commit 93fe16b79b4d74f8ddaec22ca9d80d09915ac92b):
∧ u.card ≤ s.card := by
  haveI : ∀ u, Decidable ((u : Set α).PairwiseDisjoint (· • t)) := fun u ↦ Classical.dec _
  set C := s.powerset.filter fun u ↦ u.toSet.PairwiseDisjoint (· • t)
  obtain ⟨u, hu, hCmax⟩ := C.exists_maximal (filter_nonempty_iff.2
    ⟨∅, empty_mem_powerset _, by rw [coe_empty]; exact Set.pairwiseDisjoint_empty⟩)
  rw [mem_filter, mem_powerset] at hu
  refine' ⟨u,
    (card_mul_iff.2 <| pairwiseDisjoint_smul_iff.1 hu.2).ge.trans
      (card_le_of_subset <| mul_subset_mul_right hu.1),
    fun a ha ↦ _, hu.1.trans_le (card_le_of_subset <| s.subset_powerset.2 ha)⟩
  rw [mul_div_assoc]
  by_cases hau : a ∈ u
  · exact subset_mul_left _ ht.one_mem_div hau
  by_cases H : ∀ b ∈ u, Disjoint (a • t) (b • t)
  · refine' (hCmax _ _ <| ssubset_insert hau).elim
    rw [mem_filter, mem_powerset, insert_subset_iff, coe_insert]
    exact ⟨⟨ha, hu.1⟩, hu.2.insert fun _ hb _ ↦ H _ hb⟩
  push_neg at H
  simp_rw [not_disjoint_iff, ← inv_smul_mem_iff] at H
  obtain ⟨b, hb, c, hc₁, hc₂⟩ := H
  refine' mem_mul.2 ⟨b, a / b, hb, _, by simp⟩
  exact mem_div.2 ⟨_, _, hc₂, hc₁, by simp [div_eq_mul_inv a b, mul_comm]⟩

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to

Attempt failure.

Working on Mathlib/Combinatorics/SetFamily/CauchyDavenport.lean - 2024-09-07 12:54:36.961751.
---27/100---
For theorem Finset.min_le_card_mul in Mathlib/Combinatorics/SetFamily/CauchyDavenport.lean:
lemma Finset.min_le_card_mul (hs : s.Nonempty) (ht : t.Nonempty) :
    min (minOrder α) ↑(s.card + t.card - 1) ≤ (s * t).card 


Original valid proof:
:= by
  set x := (s, t) with hx
  clear_value x
  simp only [Prod.ext_iff] at hx
  obtain ⟨rfl, rfl⟩ := hx
  refine wellFoundedOn_devosMulRel.induction (P := fun x : Finset α × Finset α ↦
    min (minOrder α) ↑(card x.1 + card x.2 - 1) ≤ card (x.1 * x.2)) ⟨hs, ht⟩ ?_
  clear! x
  rintro ⟨s, t⟩ ⟨hs, ht⟩ ih
  simp only [min_le_iff, tsub_le_iff_right, Prod.forall, Set.mem_setOf_eq, and_imp,
    Nat.cast_le] at *
  obtain hts | hst := lt_or_le t.card s.card
  · simpa only [← mul_inv_rev, add_comm, card_inv] using
      ih _ _ ht.inv hs.inv
        (devosMulRel_iff.2 <| Or.inr <| Or.inr <| by
          simpa only [← mul_inv_rev, add_comm, card_inv, true_and])
  obtain ⟨a, rfl⟩ | ⟨a, ha, b, hb, hab⟩ := hs.exists_eq_singleton_or_nontrivial
  · simp [add_comm]
  obtain ⟨g, hg, hgs⟩ : ∃ g : α, g ≠ 1 ∧ (s ∩ op g • s).Nonempty :=
    ⟨b⁻¹ * a, inv_mul_eq_one.not.2 hab.symm, _,
      mem_inter.2 ⟨ha, mem_smul_finset.2 ⟨_, hb, by simp⟩⟩⟩
  obtain hsg | hsg := eq_or_ne (op g • s) s
  · have hS : (zpowers g : Set α) ⊆ a⁻¹ • (s : Set α) := by
      refine forall_mem_zpowers.2 <| @zpow_induction_right _ _ _ (· ∈ a⁻¹ • (s : Set α))
        ⟨_, ha, inv_mul_self _⟩ (fun c hc ↦ ?_) fun c hc ↦ ?_
      · rw [← hsg, coe_smul_finset, smul_comm]
        exact Set.smul_mem_smul_set hc
      · simp only
        rwa [← op_smul_eq_mul, op_inv, ← Set.mem_smul_set_iff_inv_smul_mem, smul_comm,
          ← coe_smul_finset, hsg]
    refine Or.inl ((minOrder_le_natCard (zpowers_ne_bot.2 hg) <|
      s.finite_toSet.smul_set.subset hS).trans <| WithTop.coe_le_coe.2 <|
        ((Nat.card_mono s.finite_toSet.smul_set hS).trans_eq <| ?_).trans <|
          card_le_card_mul_right _ ht)
    rw [← coe_smul_finset]
    simp [-coe_smul_finset]
  replace hsg : (s ∩ op g • s).card < s.card := card_lt_card ⟨inter_subset_left, fun h ↦
    hsg <| eq_of_superset_of_card_ge (h.trans inter_subset_right) (card_smul_finset _ _).le⟩
  replace aux1 := card_mono <| mulETransformLeft.fst_mul_snd_subset g (s, t)
  replace aux2 := card_mono <| mulETransformRight.fst_mul_snd_subset g (s, t)
  obtain hgt | hgt := disjoint_or_nonempty_inter t (g⁻¹ • t)
  · rw [← card_smul_finset g⁻¹ t]
    refine Or.inr ((add_le_add_right hst _).trans ?_)
    rw [← card_union_of_disjoint hgt]
    exact (card_le_card_mul_left _ hgs).trans (le_add_of_le_left aux1)
  obtain hstg | hstg := le_or_lt_of_add_le_add (MulETransform.card g (s, t)).ge
  · exact (ih _ _ hgs (hgt.mono inter_subset_union) <| devosMulRel_of_le_of_le aux1 hstg hsg).imp
      (WithTop.coe_le_coe.2 aux1).trans' fun h ↦ hstg.trans <| h.trans <| add_le_add_right aux1 _
  · exact (ih _ _ (hgs.mono inter_subset_union) hgt <| devosMulRel_of_le aux2 hstg).imp
      (WithTop.coe_le_coe.2 aux2).trans' fun h ↦
        hstg.le.trans <| h.trans <| add_le_add_right aux2 _


Verifying proof (Commit 9f6d33884de569540c527b667d1573e1b97e1347):
 := by
  set x := (s, t) with hx
  clear_value x
  simp only [Prod.ext_iff] at hx
  obtain ⟨rfl, rfl⟩ := hx
  refine' wellFoundedOn_devosMulRel.induction (P := fun x : Finset α × Finset α ↦
    min (minOrder α) ↑(card x.1 + card x.2 - 1) ≤ card (x.1 * x.2)) ⟨hs, ht⟩ _
  clear! x
  rintro ⟨s, t⟩ ⟨hs, ht⟩ ih
  simp only [min_le_iff, tsub_le_iff_right, Prod.forall, Set.mem_setOf_eq, and_imp,
    Nat.cast_le] at *
  obtain hts | hst := lt_or_le t.card s.card
  · simpa only [← mul_inv_rev, add_comm, card_inv] using
      ih _ _ ht.inv hs.inv
        (devosMulRel_iff.2 <| Or.inr <| Or.inr <| by
          simpa only [← mul_inv_rev, add_comm, card_inv, true_and])
  obtain ⟨a, rfl⟩ | ⟨a, ha, b, hb, hab⟩ := hs.exists_eq_singleton_or_nontrivial
  · simp [add_comm]
  obtain ⟨g, hg, hgs⟩ : ∃ g : α, g ≠ 1 ∧ (s ∩ op g • s).Nonempty :=
    ⟨b⁻¹ * a, inv_mul_eq_one.not.2 hab.symm, _,
      mem_inter.2 ⟨ha, mem_smul_finset.2 ⟨_, hb, by simp⟩⟩⟩
  obtain hsg | hsg := eq_or_ne (op g • s) s
  · have hS : (zpowers g : Set α) ⊆ a⁻¹ • (s : Set α) := by
      refine forall_mem_zpowers.2 <| @zpow_induction_right _ _ _ (· ∈ a⁻¹ • (s : Set α))
        ⟨_, ha, inv_mul_self _⟩ (fun c hc ↦ ?_) fun c hc ↦ ?_
      · rw [← hsg, coe_smul_finset, smul_comm]
        exact Set.smul_mem_smul_set hc
      · simp only
        rwa [← op_smul_eq_mul, op_inv, ← Set.mem_smul_set_iff_inv_smul_mem, smul_comm,
          ← coe_smul_finset, hsg]
    refine Or.inl ((minOrder_le_natCard (zpowers_ne_bot.2 hg) <|
      s.finite_toSet.smul_set.subset hS).trans <| WithTop.coe_le_coe.2 <|
        ((Nat.card_mono s.finite_toSet.smul_set hS).trans_eq <| ?_).trans <|
          card_le_card_mul_right _ ht)
    rw [← coe_smul_finset]
    simp [-coe_smul_finset]
  replace hsg : (s ∩ op g • s).card < s.card := card_lt_card ⟨inter_subset_left _ _, fun h ↦
    hsg <| eq_of_superset_of_card_ge (h.trans <| inter_subset_right _ _) (card_smul_finset _ _).le⟩
  replace aux1 := card_mono <| mulETransformLeft.fst_mul_snd_subset g (s, t)
  replace aux2 := card_mono <| mulETransformRight.fst_mul_snd_subset g (s, t)
  obtain hgt | hgt := disjoint_or_nonempty_inter t (g⁻¹ • t)
  · rw [← card_smul_finset g⁻¹ t]
    refine' Or.inr ((add_le_add_right hst _).trans _)
    rw [← card_union_eq hgt]
    exact (card_le_card_mul_left _ hgs).trans (le_add_of_le_left aux1)
  obtain hstg | hstg := le_or_lt_of_add_le_add (MulETransform.card g (s, t)).ge
  · exact (ih _ _ hgs (hgt.mono inter_subset_union) <| devosMulRel_of_le_of_le aux1 hstg hsg).imp
      (WithTop.coe_le_coe.2 aux1).trans' fun h ↦ hstg.trans <| h.trans <| add_le_add_right aux1 _
  · exact (ih _ _ (hgs.mono inter_subset_union) hgt <| devosMulRel_of_le aux2 hstg).imp
      (WithTop.coe_le_coe.2 aux2).trans' fun h ↦
        hstg.le.trans <| h.trans <| add_le_add_right aux2 _

## References #

- [B. Devos, The number of conjugacy classes in a finite group](https://www.ams.org/journals/tran/1978-242-00/S0002-9947-1978-0506400-6/S0002-9947-1978-0506400-6.pdf)

## Tags #

conjugacy, finite group, Devos

theorem MulETransform.card_le_mul {α : Type u_1} [inst : DecidableEq α] [inst : MulOneClass α] (s t : Finset α) :

↑(MulETransform.card s t) ≤ ↑(s.card * t.card)

theorem MulETransform.card_le_mul_left {α : Type u_1} [inst : DecidableEq α] [inst : MulOneClass α] (s t : Finset α) :

↑(MulETransform.card s t) ≤ ↑(s.card) * ↑(t.card)

theorem MulETransform.card_le_mul_right {α : Type u_1} [inst : DecidableEq α] [inst : MulOneClass α] (s t : Finset α) :

↑(MulETransform.card s t) ≤ ↑(s.card) * ↑(t.card)

theorem MulETransform.card_le_mul_of_mul_rel {α : Type u_1} [inst : DecidableEq α] [inst : MulOneClass α] (s t : Finset α) (h : MulRel s t) :

↑(MulETransform.card s t) ≤ ↑(s.card) * ↑(t.card)

theorem MulETransform.card_le_mul_of_mul_rel_of_mul_rel {α : Type u_1} [inst : DecidableEq α] [inst : MulOneClass α] (s t : Finset α) (hst : MulRel s t) (htu : MulRel t u) :

↑(MulETransform.card s u) ≤ ↑(s.card) * ↑(t.card) * ↑(u.card)

theorem MulETransform.card_le_mul_of_mul_rel_of_mul_rel_of_mul_rel {α : Type u_1} [inst : DecidableEq α] [inst : MulOneClass α] (s t u v : Finset α) (hst : MulRel s t) (htu : MulRel t u) (huv : MulRel u v) :

↑(MulETransform.card s v) ≤ ↑(s.card) * ↑(t.card) * ↑(u.card) * ↑(v.card)

theorem MulETransform.card_le_mul_of_mul_

Attempt failure.

Working on Mathlib/Computability/PartrecCode.lean - 2024-09-07 12:54:46.556331.
---28/100---
For theorem Nat.Partrec.Code.evaln_complete in Mathlib/Computability/PartrecCode.lean:
theorem evaln_complete {c n x} : x ∈ eval c n ↔ ∃ k, x ∈ evaln k c n 


Original valid proof:
:= by
  refine ⟨fun h => ?_, fun ⟨k, h⟩ => evaln_sound h⟩
  rsuffices ⟨k, h⟩ : ∃ k, x ∈ evaln (k + 1) c n
  · exact ⟨k + 1, h⟩
  induction c generalizing n x with
      simp [eval, evaln, pure, PFun.pure, Seq.seq, Option.bind_eq_some] at h ⊢
  | pair cf cg hf hg =>
    rcases h with ⟨x, hx, y, hy, rfl⟩
    rcases hf hx with ⟨k₁, hk₁⟩; rcases hg hy with ⟨k₂, hk₂⟩
    refine ⟨max k₁ k₂, ?_⟩
    refine
      ⟨le_max_of_le_left <| Nat.le_of_lt_succ <| evaln_bound hk₁, _,
        evaln_mono (Nat.succ_le_succ <| le_max_left _ _) hk₁, _,
        evaln_mono (Nat.succ_le_succ <| le_max_right _ _) hk₂, rfl⟩
  | comp cf cg hf hg =>
    rcases h with ⟨y, hy, hx⟩
    rcases hg hy with ⟨k₁, hk₁⟩; rcases hf hx with ⟨k₂, hk₂⟩
    refine ⟨max k₁ k₂, ?_⟩
    exact
      ⟨le_max_of_le_left <| Nat.le_of_lt_succ <| evaln_bound hk₁, _,
        evaln_mono (Nat.succ_le_succ <| le_max_left _ _) hk₁,
        evaln_mono (Nat.succ_le_succ <| le_max_right _ _) hk₂⟩
  | prec cf cg hf hg =>
    revert h
    generalize n.unpair.1 = n₁; generalize n.unpair.2 = n₂
    induction' n₂ with m IH generalizing x n <;> simp [Option.bind_eq_some]
    · intro h
      rcases hf h with ⟨k, hk⟩
      exact ⟨_, le_max_left _ _, evaln_mono (Nat.succ_le_succ <| le_max_right _ _) hk⟩
    · intro y hy hx
      rcases IH hy with ⟨k₁, nk₁, hk₁⟩
      rcases hg hx with ⟨k₂, hk₂⟩
      refine
        ⟨(max k₁ k₂).succ,
          Nat.le_succ_of_le <| le_max_of_le_left <|
            le_trans (le_max_left _ (Nat.pair n₁ m)) nk₁, y,
          evaln_mono (Nat.succ_le_succ <| le_max_left _ _) ?_,
          evaln_mono (Nat.succ_le_succ <| Nat.le_succ_of_le <| le_max_right _ _) hk₂⟩
      simp only [evaln.eq_8, bind, unpaired, unpair_pair, Option.mem_def, Option.bind_eq_some,
        Option.guard_eq_some', exists_and_left, exists_const]
      exact ⟨le_trans (le_max_right _ _) nk₁, hk₁⟩
  | rfind' cf hf =>
    rcases h with ⟨y, ⟨hy₁, hy₂⟩, rfl⟩
    suffices ∃ k, y + n.unpair.2 ∈ evaln (k + 1) (rfind' cf) (Nat.pair n.unpair.1 n.unpair.2) by
      simpa [evaln, Option.bind_eq_some]
    revert hy₁ hy₂
    generalize n.unpair.2 = m
    intro hy₁ hy₂
    induction' y with y IH generalizing m <;> simp [evaln, Option.bind_eq_some]
    · simp at hy₁
      rcases hf hy₁ with ⟨k, hk⟩
      exact ⟨_, Nat.le_of_lt_succ <| evaln_bound hk, _, hk, by simp⟩
    · rcases hy₂ (Nat.succ_pos _) with ⟨a, ha, a0⟩
      rcases hf ha with ⟨k₁, hk₁⟩
      rcases IH m.succ (by simpa [Nat.succ_eq_add_one, add_comm, add_left_comm] using hy₁)
          fun {i} hi => by
          simpa [Nat.succ_eq_add_one, add_comm, add_left_comm] using
            hy₂ (Nat.succ_lt_succ hi) with
        ⟨k₂, hk₂⟩
      use (max k₁ k₂).succ
      rw [zero_add] at hk₁
      use Nat.le_succ_of_le <| le_max_of_le_left <| Nat.le_of_lt_succ <| evaln_bound hk₁
      use a
      use evaln_mono (Nat.succ_le_succ <| Nat.le_succ_of_le <| le_max_left _ _) hk₁
      simpa [Nat.succ_eq_add_one, a0, -max_eq_left, -max_eq_right, add_comm, add_left_comm] using
        evaln_mono (Nat.succ_le_succ <| le_max_right _ _) hk₂
  | _ => exact ⟨⟨_, le_rfl⟩, h.symm⟩


Verifying proof (Commit 2d8928f07c222f171d2f9371935aa5b8359f9d44):
∧ k ≤ n := by
  refine ⟨fun h => ?_, fun ⟨k, h, hk⟩ => evaln_sound h⟩
  rsuffices ⟨k, h, hk⟩ : ∃ k, x ∈ evaln (k + 1) c n ∧ k ≤ n
  · exact ⟨k + 1, h⟩
  induction c generalizing n x with simp [eval, evaln, pure, PFun.pure, Seq.seq, Bind.bind] at h ⊢
  | pair cf cg hf hg =>
    rcases h with ⟨x, hx, y, hy, rfl⟩
    rcases hf hx with ⟨k₁, hk₁, hk₁'⟩; rcases hg hy with ⟨k₂, hk₂, hk₂'⟩
    refine' ⟨max k₁ k₂, _, le_trans (le_max_left _ _) hk₁'⟩
    refine'
      ⟨le_max_of_le_left <| Nat.le_of_lt_succ <| evaln_bound hk₁, _,
        evaln_mono (Nat.succ_le_succ <| le_max_left _ _) hk₁, _,
        evaln_mono (Nat.succ_le_succ <| le_max_right _ _) hk₂, rfl⟩
  | comp cf cg hf hg =>
    rcases h with ⟨y, hy, hx⟩
    rcases hg hy with ⟨k₁, hk₁, hk₁'⟩; rcases hf hx with ⟨k₂, hk₂, hk₂'⟩
    refine' ⟨max k₁ k₂, _, le_trans (le_max_left _ _) hk₁'⟩
    exact
      ⟨le_max_of_le_left <| Nat.le_of_lt_succ <| evaln_bound hk₁, _,
        evaln_mono (Nat.succ_le_succ <| le_max_left _ _) hk₁,
        evaln_mono (Nat.succ_le_succ <| le_max_right _ _) hk₂⟩
  | prec cf cg hf hg =>
    revert h
    generalize n.unpair.1 = n₁; generalize n.unpair.2 = n₂
    induction' n₂ with m IH generalizing x n <;> simp
    · intro h
      rcases hf h with ⟨k, hk, hk'⟩
      exact ⟨_, le_max_left _ _, evaln_mono (Nat.succ_le_succ <| le_max_right _ _) hk⟩
    · intro y hy hx
      rcases IH hy with ⟨k₁, nk₁, hk₁, hk₁'⟩
      rcases hg hx with ⟨k₂, hk₂, hk₂'⟩
      refine'
        ⟨(max k₁ k₂).succ,
          Nat.le_succ_of_le <| le_max_of_le_left <|
            le_trans (le_max_left _ (Nat.pair n₁ m)) nk₁, y,
          evaln_mono (Nat.succ_le_succ <| le_max_left _ _) _,
          evaln_mono (Nat.succ_le_succ <| Nat.le_succ_of_le <| le_max_right _ _) hk₂⟩
      simp only [evaln.eq_8, bind, unpaired, unpair_pair, Option.mem_def, Option.bind_eq_some,
        Option.guard_eq_some', exists_and_left, exists_const]
      exact ⟨le_trans (le_max_right _ _) nk₁, hk₁⟩
  | rfind' cf hf =>
    rcases h with ⟨y, ⟨hy₁, hy₂⟩, rfl⟩
    suffices ∃ k, y + n.unpair.2 ∈ evaln (k + 1) (rfind' cf) (Nat.pair n.unpair.1 n.unpair.2) by
      simpa [evaln, Bind.bind]
    revert hy₁ hy₂
    generalize n.unpair.2 = m
    intro hy₁ hy₂
    induction' y with y IH generalizing m <;> simp [evaln, Bind.bind]
    · simp at hy₁
      rcases hf hy₁ with ⟨k, hk, hk'⟩
      exact ⟨_, Nat.le_of_lt_succ <| evaln_bound hk, _, hk, by simp⟩
    · rcases hy₂ (Nat.succ_pos _) with ⟨a, ha, a0⟩
      rcases hf ha with ⟨k₁, hk₁, hk₁'⟩
      rcases IH m.succ (by simpa [Nat.succ_eq_add_one, add_comm, add_left_comm] using hy₁)
          fun {i} hi => by
          simpa [Nat.succ_eq_add_one, add_comm, add_left_comm] using
            hy₂ (Nat.succ_lt_succ hi) with
        ⟨k₂, hk₂, hk₂'⟩
      use (max k₁ k₂).succ
      rw [zero_add] at hk₁
      use Nat.le_succ_of_le <| le_max_of_le_left <| Nat.le_of_lt_succ <| evaln_bound hk₁
      use a
      use evaln_mono (Nat.succ_le_succ <| Nat.le_succ_of_le <| le_max_left _ _) hk₁
      simpa [Nat.succ_eq_add_one, a0, -max_eq_left, -max_eq_right, add_comm, add_left_comm] using
        evaln_mono (Nat.succ_le_succ <| le_max_right _ _) hk₂
  | _ => exact ⟨⟨_, le_rfl⟩, h.symm⟩

## 1.1.2.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.

Attempt failure.

Working on Mathlib/Computability/Primrec.lean - 2024-09-07 12:55:03.947486.
---29/100---
For theorem Primrec.list_reverse in Mathlib/Computability/Primrec.lean:
theorem list_reverse' :
    haveI := prim H
    Primrec (@List.reverse β) 


Original valid proof:
:=
  letI := prim H
  (list_foldl' H .id (const []) <| to₂ <| ((list_cons' H).comp snd fst).comp snd).of_eq
    (suffices ∀ l r, List.foldl (fun (s : List β) (b : β) => b :: s) r l = List.reverseAux l r from
      fun l => this l []
    fun l => by induction l <;> simp [*, List.reverseAux])


Verifying proof (Commit b912476b37f2ea41ee51af7e63439f4a769be095):
 :=
  letI := prim H
  (list_foldl' H .id (const []) <| to₂ <| ((list_cons' H).comp₂ snd fst).comp snd).of_eq
    (suffices ∀ l r, List.foldl (fun (s : List β) (b : β) => b :: s) r l = List.reverseAux l r from
      fun l => this l []
    fun l => by induction l <;> simp [*, List.reverseAux])

####  Mario Carneiro (May 01 2020 at 10:00):

I think the problem is that the proof oflist_foldl' is not a theorem, but a definition, so it doesn't have a .of_eq method

####  Mario Carneiro (May 01 2020 at 10:01):

I think the proof oflist_foldl' is not a theorem, but a definition, so it doesn't have a .of_eq method

####  Mario Carneiro (May 01 2020 at 10:01):

I think the proof of
list_foldl' is not a theorem, but a definition, so it doesn't have a .of_eq method

####  Mario Carneiro (May 01 2020 at 10:01):

I think the proof of
list_foldl' is not a theorem, but a definition, so it doesn't have a .of_eq method

####  Mario Carneiro (May 01 2020 at 10:01):

I think the proof of
list_foldl' is not a theorem, but a definition, so it doesn't have a .of_eq method

####  Mario Carneiro (May 01 2020 at 10:01):

I think the proof of
list_foldl' is not a theorem, but a definition, so it doesn't have a .of_eq method

####  Mario Carneiro (May 01 2020 at 10:01):

I think the proof of
list_foldl' is not a theorem, but a definition, so it doesn't have a .of_eq method

####  Mario Carneiro (May 01 2020 at 10:01):

I think the proof of
list_foldl' is not a theorem, but a definition, so it doesn't have a .of_eq method

####  Mario Carneiro (May 01 2020 at 10:01):

I think the proof of
list_foldl' is not a theorem, but a definition, so it doesn't have a .of_eq method

####  Mario Carneiro (May 01 2020 at 10:01):

I think the proof of
list_foldl' is not a theorem, but a definition, so it doesn't have a .of_eq method

####  Mario Carneiro (May 01 2020 at 10:01):

I think the proof of
list_foldl' is not a theorem, but a definition, so it doesn't have a .of_eq method

####  Mario Carneiro (May 01 2020 at 10:01):

I think the proof of
list_foldl' is not a theorem, but a definition, so it doesn't have a .of_eq method

####  Mario Carneiro (May 01 2020 at 10:01):

I think the proof of
list_foldl' is not a theorem, but a definition, so it doesn't have a .of_eq method

####  Mario Carneiro (May 01 2020 at 10:01):

I think the proof of
list_foldl' is not a theorem, but a definition, so it doesn't have a .of_eq method

####  Mario Carneiro (May 01 2020 at 10:01):

I think the proof of
list_foldl' is not a theorem, but a definition, so it doesn't have a .of_eq method

####  Mario Carneiro (May 01 2020 at 10:01):

I think the proof of
list_foldl' is not a theorem, but a definition, so it doesn't have a .of_eq method

####  Mario Carneiro (May 01 2020 at 10:01):

I think the proof of
list_foldl' is not a theorem, but a definition, so it doesn't have a .of_eq method

####  Mario Carneiro (May 01 2020 at 10:01):

I think the proof of
list_foldl' is not a theorem, but a definition, so it doesn't have a .of_eq method

####  Mario Carneiro (May 01 2020 at 10:01):

I think the proof of
list_foldl' is not a theorem, but a definition, so it doesn't have a .of_eq method

####  Mario Carneiro (May 01 2020 at 10:01):

I think the proof of
list_foldl' is not a theorem, but a definition, so it doesn't have a .of_eq method

####  Mario Carneiro (May 01 2020 at 10:01):

I think the proof of
list_foldl' is not a theorem, but a definition, so it doesn't have a .of_eq method

####  Mario Carneiro (May 01 2020 at 10:01):

I think the proof of
list_foldl' is not a theorem, but a definition, so it doesn't have a .of_eq method

####  Mario Carneiro (May 01 2020 at 10:01):

I think the proof of
list_foldl' is not a theorem, but a definition, so it doesn't have a .of_eq method

####  Mario Carneiro (May 01 2020 at 10:01):

I think the proof of
list_foldl' is not a theorem, but a definition, so it doesn't have a .of_eq method

####  Mario Carneiro (May 01 2020 at 10:01):

I think the proof of
list_foldl' is not a theorem, but a definition, so it doesn't have a .of_eq method

####  Mario Carneiro (May 01 2020 at 10:01):

I think the proof of
list_foldl' is not a theorem, but a definition, so it doesn't have a .of_eq method

####  Mario Carneiro (May 01 2020 at 10:01):

I think the proof of
list_foldl' is not a theorem, but a definition, so it doesn't have a .of_eq method

####  Mario Carneiro (May 01 2020 at 10:01):

I think the proof of
list_foldl' is not a theorem, but a definition, so it doesn't have a .of_eq method

####  Mario Carneiro (May 01 2020 at 10:01):

I think the proof of
list_foldl' is not a theorem, but a definition, so it doesn't have a .of_eq method

####  Mario Carneiro (May 01 2020 at 10:01):

I think the proof of
list_foldl' is not a theorem, but a definition, so it doesn't have a .of_eq method

####  Mario Carneiro (May 01 2020 at 10:01):

I think the proof of
list_foldl' is not a theorem, but a definition, so it doesn't have a .of_eq method

####  Mario Carneiro (May 01 2020 at 10:01):

I think the proof of
list_foldl' is not a theorem, but a definition, so it doesn't have a .of_eq method

####  Mario Carneiro

Attempt failure.

Working on Mathlib/Data/List/Cycle.lean - 2024-09-07 12:55:16.863342.
---30/100---
For theorem List.prev_next in Mathlib/Data/List/Cycle.lean:
theorem prev_next (l : List α) (h : Nodup l) (x : α) (hx : x ∈ l) :
    prev l (next l x hx) (next_mem _ _ _) = x 


Original valid proof:
:= by
  obtain ⟨n, hn, rfl⟩ := nthLe_of_mem hx
  simp only [next_nthLe, prev_nthLe, h, Nat.mod_add_mod]
  cases' l with hd tl
  · simp at hx
  · have : (n + 1 + length tl) % (length tl + 1) = n := by
      rw [length_cons] at hn
      rw [add_assoc, add_comm 1, Nat.add_mod_right, Nat.mod_eq_of_lt hn]
    simp only [length_cons, Nat.succ_sub_succ_eq_sub, Nat.sub_zero, Nat.succ_eq_add_one, this]


Verifying proof (Commit 596865180ecc63dcd1d95809202e31027ac3ae38):
 := by
  obtain ⟨n, hn, rfl⟩ := nthLe_of_mem hx
  simp only [next_nthLe, prev_nthLe, h, Nat.mod_add_mod]
  cases' l with hd tl
  · simp at hx
  · have : (n + 1 + length tl) % (length tl + 1) = n := by
      rw [length_cons, Nat.succ_eq_add_one] at hn
      rw [add_assoc, add_comm 1, Nat.add_mod_right, Nat.mod_eq_of_lt hn]
    simp only [length_cons, Nat.succ_sub_succ_eq_sub, tsub_zero, Nat.succ_eq_add_one, this]

####  Eric Wieser (Jun 01 2020 at 10:30):

I'm not sure what the issue is, but I'm not sure I'd want to be using thesimp only [length_cons, Nat.succ_sub_succ_eq_sub, tsub_zero, Nat.succ_eq_add_one, this] part of the proof.

####  Eric Wieser (Jun 01 2020 at 10:31):

I'd be more inclined to use thesimp only [length_cons, Nat.succ_sub_succ_eq_sub, tsub_zero, Nat.succ_eq_add_one, this] part of the proof.

####  Eric Wieser (Jun 01 2020 at 10:31):

I'd be more inclined to use thesimp only [length_cons, Nat.succ_sub_succ_eq_sub, tsub_zero, Nat.succ_eq_add_one, this] part of the proof.

####  Eric Wieser (Jun 01 2020 at 10:31):

I'd be more inclined to use thesimp only [length_cons, Nat.succ_sub_succ_eq_sub, tsub_zero, Nat.succ_eq_add_one, this] part of the proof.

####  Eric Wieser (Jun 01 2020 at 10:31):

I'd be more inclined to use thesimp only [length_cons, Nat.succ_sub_succ_eq_sub, tsub_zero, Nat.succ_eq_add_one, this] part of the proof.

####  Eric Wieser (Jun 01 2020 at 10:31):

I'd be more inclined to use thesimp only [length_cons, Nat.succ_sub_succ_eq_sub, tsub_zero, Nat.succ_eq_add_one, this] part of the proof.

####  Eric Wieser (Jun 01 2020 at 10:31):

I'd be more inclined to use thesimp only [length_cons, Nat.succ_sub_succ_eq_sub, tsub_zero, Nat.succ_eq_add_one, this] part of the proof.

####  Eric Wieser (Jun 01 2020 at 10:31):

I'd be more inclined to use thesimp only [length_cons, Nat.succ_sub_succ_eq_sub, tsub_zero, Nat.succ_eq_add_one, this] part of the proof.

####  Eric Wieser (Jun 01 2020 at 10:31):

I'd be more inclined to use thesimp only [length_cons, Nat.succ_sub_succ_eq_sub, tsub_zero, Nat.succ_eq_add_one, this] part of the proof.

####  Eric Wieser (Jun 01 2020 at 10:31):

I'd be more inclined to use thesimp only [length_cons, Nat.succ_sub_succ_eq_sub, tsub_zero, Nat.succ_eq_add_one, this] part of the proof.

####  Eric Wieser (Jun 01 2020 at 10:31):

I'd be more inclined to use thesimp only [length_cons, Nat.succ_sub_succ_eq_sub, tsub_zero, Nat.succ_eq_add_one, this] part of the proof.

####  Eric Wieser (Jun 01 2020 at 10:31):

I'd be more inclined to use thesimp only [length_cons, Nat.succ_sub_succ_eq_sub, tsub_zero, Nat.succ_eq_add_one, this] part of the proof.

####  Eric Wieser (Jun 01 2020 at 10:31):

I'd be more inclined to use thesimp only [length_cons, Nat.succ_sub_succ_eq_sub, tsub_zero, Nat.succ_eq_add_one, this] part of the proof.

####  Eric Wieser (Jun 01 2020 at 10:31):

I'd be more inclined to use thesimp only [length_cons, Nat.succ_sub_succ_eq_sub, tsub_zero, Nat.succ_eq_add_one, this] part of the proof.

####  Eric Wieser (Jun 01 2020 at 10:31):

I'd be more inclined to use thesimp only [length_cons, Nat.succ_sub_succ_eq_sub, tsub_zero, Nat.succ_eq_add_one, this] part of the proof.

####  Eric Wieser (Jun 01 2020 at 10:31):

I'd be more inclined to use thesimp only [length_cons, Nat.succ_sub_succ_eq_sub, tsub_zero, Nat.succ_eq_add_one, this] part of the proof.

####  Eric Wieser (Jun 01 2020 at 10:31):

I'd be more inclined to use thesimp only [length_cons, Nat.succ_sub_succ_eq_sub, tsub_zero, Nat.succ_eq_add_one, this] part of the proof.

####  Eric Wieser (Jun 01 2020 at 10:31):

I'd be more inclined to use thesimp only [length_cons, Nat.succ_sub_succ_eq_sub, tsub_zero, Nat.succ_eq_add_one, this] part of the proof.

####  Eric Wieser (Jun 01 2020 at 10:31):

I'd be more inclined to use thesimp only [length_cons, Nat.succ_sub_succ_eq_sub, tsub_zero, Nat.succ_eq_add_one, this] part of the proof.

####  Eric Wieser (Jun 01 2020 at 10:31):

I'd be more inclined to use thesimp only [length_cons, Nat.succ_sub_succ_eq_sub, tsub_zero, Nat.succ_eq_add_one, this] part of the proof.

####  Eric Wieser (Jun 01 2020 at 10:31):

I'd be more inclined to use thesimp only [length_cons, Nat.succ_sub_succ_eq_sub, tsub_zero, Nat.succ_eq_add_one, this] part of the proof.

####  Eric Wieser (Jun 01 2020 at 10:31):

I'd be more inclined to use thesimp only [length_cons, Nat.succ_sub_succ_eq_sub, tsub_zero, Nat.succ_eq_add_one, this] part of the proof.

####  Eric Wieser (Jun 01 2020 at 10:31):

I'd be more inclined to use thesimp only [length_cons, Nat.succ_sub_succ_eq_sub, tsub_zero, Nat.succ_eq_add_one, this] part of the proof.

####  Eric Wieser (Jun 01 2020 at 10:31):

I'd be more inclined to use thesimp only [length_cons, Nat.succ_

Attempt failure.

Working on Mathlib/Data/Nat/Choose/Central.lean - 2024-09-07 12:55:25.805993.
---31/100---
For theorem Nat.four_pow_le_two_mul_self_mul_centralBinom in Mathlib/Data/Nat/Choose/Central.lean:
theorem four_pow_le_two_mul_self_mul_centralBinom :
    ∀ (n : ℕ) (_ : 0 < n), 4 ^ n ≤ 2 * n * centralBinom n



Original valid proof:
  | 0, pr => (Nat.not_lt_zero _ pr).elim
  | 1, _ => by norm_num [centralBinom, choose]
  | 2, _ => by norm_num [centralBinom, choose]
  | 3, _ => by norm_num [centralBinom, choose]
  | n + 4, _ =>
    calc
      4 ^ (n+4) ≤ (n+4) * centralBinom (n+4) := (four_pow_lt_mul_centralBinom _ le_add_self).le
      _ ≤ 2 * (n+4) * centralBinom (n+4) := by
        rw [mul_assoc]; refine Nat.le_mul_of_pos_left _ zero_lt_two


Verifying proof (Commit 9f6d33884de569540c527b667d1573e1b97e1347):
  | 0, pr => (Nat.not_lt_zero _ pr).elim
  | 1, _ => by norm_num [centralBinom, choose]
  | 2, _ => by norm_num [centralBinom, choose]
  | 3, _ => by norm_num [centralBinom, choose]
  | n + 4, _ =>
    calc
      4 ^ (n+4) ≤ (n+4) * centralBinom (n+4) := (four_pow_lt_mul_centralBinom _ le_add_self).le
      _ ≤ 2 * (n+4) * centralBinom (n+4) := by
        rw [mul_assoc]; refine' le_mul_of_pos_left zero_lt_two

####  Eric Wieser (Jun 01 2020 at 14:00):

I'm not sure what the issue is, but I'm not sure I'd want to be in a position where I had to do that.

####  Eric Wieser (Jun 01 2020 at 14:00):

I'm not sure what the issue is, but I'm not sure I'd want to be in a position where I had to do that.

####  Eric Wieser (Jun 01 2020 at 14:00):

I'm not sure what the issue is, but I'm not sure I'd want to be in a position where I had to do that.

####  Eric Wieser (Jun 01 2020 at 14:00):

I'm not sure what the issue is, but I'm not sure I'd want to be in a position where I had to do that.

####  Eric Wieser (Jun 01 2020 at 14:00):

I'm not sure what the issue is, but I'm not sure I'd want to be in a position where I had to do that.

####  Eric Wieser (Jun 01 2020 at 14:00):

I'm not sure what the issue is, but I'm not sure I'd want to be in a position where I had to do that.

####  Eric Wieser (Jun 01 2020 at 14:00):

I'm not sure what the issue is, but I'm not sure I'd want to be in a position where I had to do that.

####  Eric Wieser (Jun 01 2020 at 14:00):

I'm not sure what the issue is, but I'm not sure I'd want to be in a position where I had to do that.

####  Eric Wieser (Jun 01 2020 at 14:00):

I'm not sure what the issue is, but I'm not sure I'd want to be in a position where I had to do that.

####  Eric Wieser (Jun 01 2020 at 14:00):

I'm not sure what the issue is, but I'm not sure I'd want to be in a position where I had to do that.

####  Eric Wieser (Jun 01 2020 at 14:00):

I'm not sure what the issue is, but I'm not sure I'd want to be in a position where I had to do that.

####  Eric Wieser (Jun 01 2020 at 14:00):

I'm not sure what the issue is, but I'm not sure I'd want to be in a position where I had to do that.

####  Eric Wieser (Jun 01 2020 at 14:00):

I'm not sure what the issue is, but I'm not sure I'd want to be in a position where I had to do that.

####  Eric Wieser (Jun 01 2020 at 14:00):

I'm not sure what the issue is, but I'm not sure I'd want to be in a position where I had to do that.

####  Eric Wieser (Jun 01 2020 at 14:00):

I'm not sure what the issue is, but I'm not sure I'd want to be in a position where I had to do that.

####  Eric Wieser (Jun 01 2020 at 14:00):

I'm not sure what the issue is, but I'm not sure I'd want to be in a position where I had to do that.

####  Eric Wieser (Jun 01 2020 at 14:00):

I'm not sure what the issue is, but I'm not sure I'd want to be in a position where I had to do that.

####  Eric Wieser (Jun 01 2020 at 14:00):

I'm not sure what the issue is, but I'm not sure I'd want to be in a position where I had to do that.

####  Eric Wieser (Jun 01 2020 at 14:00):

I'm not sure what the issue is, but I'm not sure I'd want to be in a position where I had to do that.

####  Eric Wieser (Jun 01 2020 at 14:00):

I'm not sure what the issue is, but I'm not sure I'd want to be in a position where I had to do that.

####  Eric Wieser (Jun 01 2020 at 14:00):

I'm not sure what the issue is, but I'm not sure I'd want to be in a position where I had to do that.

####  Eric Wieser (Jun 01 2020 at 14:00):

I'm not sure what the issue is, but I'm not sure I'd want to be in a position where I had to do that.

####  Eric Wieser (Jun 01 2020 at 14:00):

I'm not sure what the issue is, but I'm not sure I'd want to be in a position where I had to do that.

####  Eric Wieser (Jun 01 2020 at 14:00):

I'm not sure what the issue is, but I'm not sure I'd want to be in a position where I had to do that.

####  Eric Wieser (Jun 01 2020 at 14:00):

I'm not sure what the issue is, but I'm not sure I'd want to be in a position where I had to do that.

####  Eric Wieser (Jun 01 2020 at 14:00):

I'm not sure what the issue is, but I'm not sure I'd want to be in a position where I had to do that.

####  Eric Wieser (Jun 01 2020 at 14:00):

I'm not sure what the issue is, but I'm not sure I'd want to be in a position where I had to do that.

####  Eric Wieser (Jun 01 2020 at 14:00):

I'm not sure what the issue is, but I'm not sure I'd want to be in a position where I had to do that.

####  Eric Wieser (Jun 01 2020 at 14:00):

I'm not sure what the issue is, but I'm not sure I'd want to be in a position where I had to do that.

####  Eric Wieser (Jun 01 2020 at 14:00):

I'm not sure what the issue is, but I'm not sure I'd want to be in a position where I had to do that.

####  Eric Wieser (Jun 01 2020 at 14:00):

I'm not sure what the issue is, but I'm not sure I'd want to be in a position where I had to do that.

####  Eric Wieser (Jun 01 2020 at 14:00):

I'm not sure what the issue is

Attempt failure.

Working on Mathlib/Data/Nat/Log.lean - 2024-09-07 12:55:31.436122.
---32/100---
For theorem Nat.pow_le_iff_le_log in Mathlib/Data/Nat/Log.lean:
theorem pow_le_iff_le_log {b : ℕ} (hb : 1 < b) {x y : ℕ} (hy : y ≠ 0) :
    b ^ x ≤ y ↔ x ≤ log b y 


Original valid proof:
:= by
  induction' y using Nat.strong_induction_on with y ih generalizing x
  cases x with
  | zero => dsimp; omega
  | succ x =>
    rw [log]; split_ifs with h
    · have b_pos : 0 < b := lt_of_succ_lt hb
      rw [Nat.add_le_add_iff_right, ← ih (y / b) (div_lt_self
        (Nat.pos_iff_ne_zero.2 hy) hb) (Nat.div_pos h.1 b_pos).ne', le_div_iff_mul_le b_pos,
        pow_succ', Nat.mul_comm]
    · exact iff_of_false (fun hby => h ⟨(le_self_pow x.succ_ne_zero _).trans hby, hb⟩)
        (not_succ_le_zero _)


Verifying proof (Commit cc6e5e01514b06a44caccb55bc04e269ede6a7c8):
 := by
  induction' y using Nat.strong_induction_on with y ih generalizing x
  cases x with
  | zero => dsimp; omega
  | succ x =>
    rw [log]; split_ifs with h
    · have b_pos : 0 < b := lt_of_succ_lt hb
      rw [succ_eq_add_one, Nat.add_le_add_iff_right, ← ih (y / b) (div_lt_self
        (Nat.pos_iff_ne_zero.2 hy) hb) (Nat.div_pos h.1 b_pos).ne', le_div_iff_mul_le b_pos,
        pow_succ', Nat.mul_comm]
    · exact iff_of_false (fun hby => h ⟨(le_self_pow x.succ_ne_zero _).trans hby, hb⟩)
        (not_succ_le_zero _)

####  Kevin Buzzard (Mar 20 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzz

Attempt failure.

Working on Mathlib/Data/Nat/Totient.lean - 2024-09-07 12:55:36.331929.
---33/100---
For theorem Nat.totient_eq_prod_factorization in Mathlib/Data/Nat/Totient.lean:
theorem totient_eq_prod_factorization {n : ℕ} (hn : n ≠ 0) :
    φ n = n.factorization.prod fun p k => p ^ (k - 1) * (p - 1) 


Original valid proof:
:= by
  rw [multiplicative_factorization φ (@totient_mul) totient_one hn]
  apply Finsupp.prod_congr _
  intro p hp
  have h := zero_lt_iff.mpr (Finsupp.mem_support_iff.mp hp)
  rw [totient_prime_pow (prime_of_mem_primeFactors hp) h]


Verifying proof (Commit 2ac7d87c221020b247729b180bbe2575cceb0700):
 := by
  rw [multiplicative_factorization φ (@totient_mul) totient_one hn]
  apply Finsupp.prod_congr _
  intro p hp
  have h := zero_lt_iff.mpr (Finsupp.mem_support_iff.mp hp)
  rw [totient_prime_pow (prime_of_mem_factorization hp) h]

####  Eric Wieser (May 03 2020 at 10:01):

I'm not sure what the issue is, but I'm not sure I'd want to use the multiplicative_factorization lemma in this case, since it's not clear to me that the totient function is multiplicative.

####  Eric Wieser (May 03 2020 at 10:02):

I'm not sure what the issue is, but I'm not sure I'd want to use the multiplicative_factorization lemma in this case, since it's not clear to me that the totient function is multiplicative.

####  Eric Wieser (May 03 2020 at 10:02):

I'm not sure what the issue is, but I'm not sure I'd want to use the multiplicative_factorization lemma in this case, since it's not clear to me that the totient function is multiplicative.

####  Eric Wieser (May 03 2020 at 10:02):

I'm not sure what the issue is, but I'm not sure I'd want to use the multiplicative_factorization lemma in this case, since it's not clear to me that the totient function is multiplicative.

####  Eric Wieser (May 03 2020 at 10:02):

I'm not sure what the issue is, but I'm not sure I'd want to use the multiplicative_factorization lemma in this case, since it's not clear to me that the totient function is multiplicative.

####  Eric Wieser (May 03 2020 at 10:02):

I'm not sure what the issue is, but I'm not sure I'd want to use the multiplicative_factorization lemma in this case, since it's not clear to me that the totient function is multiplicative.

####  Eric Wieser (May 03 2020 at 10:02):

I'm not sure what the issue is, but I'm not sure I'd want to use the multiplicative_factorization lemma in this case, since it's not clear to me that the totient function is multiplicative.

####  Eric Wieser (May 03 2020 at 10:02):

I'm not sure what the issue is, but I'm not sure I'd want to use the multiplicative_factorization lemma in this case, since it's not clear to me that the totient function is multiplicative.

####  Eric Wieser (May 03 2020 at 10:02):

I'm not sure what the issue is, but I'm not sure I'd want to use the multiplicative_factorization lemma in this case, since it's not clear to me that the totient function is multiplicative.

####  Eric Wieser (May 03 2020 at 10:02):

I'm not sure what the issue is, but I'm not sure I'd want to use the multiplicative_factorization lemma in this case, since it's not clear to me that the totient function is multiplicative.

####  Eric Wieser (May 03 2020 at 10:02):

I'm not sure what the issue is, but I'm not sure I'd want to use the multiplicative_factorization lemma in this case, since it's not clear to me that the totient function is multiplicative.

####  Eric Wieser (May 03 2020 at 10:02):

I'm not sure what the issue is, but I'm not sure I'd want to use the multiplicative_factorization lemma in this case, since it's not clear to me that the totient function is multiplicative.

####  Eric Wieser (May 03 2020 at 10:02):

I'm not sure what the issue is, but I'm not sure I'd want to use the multiplicative_factorization lemma in this case, since it's not clear to me that the totient function is multiplicative.

####  Eric Wieser (May 03 2020 at 10:02):

I'm not sure what the issue is, but I'm not sure I'd want to use the multiplicative_factorization lemma in this case, since it's not clear to me that the totient function is multiplicative.

####  Eric Wieser (May 03 2020 at 10:02):

I'm not sure what the issue is, but I'm not sure I'd want to use the multiplicative_factorization lemma in this case, since it's not clear to me that the totient function is multiplicative.

####  Eric Wieser (May 03 2020 at 10:02):

I'm not sure what the issue is, but I'm not sure I'd want to use the multiplicative_factorization lemma in this case, since it's not clear to me that the totient function is multiplicative.

####  Eric Wieser (May 03 2020 at 10:02):

I'm not sure what the issue is, but I'm not sure I'd want to use the multiplicative_factorization lemma in this case, since it's not clear to me that the totient function is multiplicative.

####  Eric Wieser (May 03 2020 at 10:02):

I'm not sure what the issue is, but I'm not sure I'd want to use the multiplicative_factorization lemma in this case, since it's not clear to me that the totient function is multiplicative.

####  Eric Wieser (May 03 2020 at 10:02):

I'm not sure what the issue is, but I'm not sure I'd want to use the multiplicative_factorization lemma in this case, since it's not clear to me that the totient function is multiplicative.

####  Eric Wieser (May 03 2020 at 10:02):

I'm not sure what the issue is, but I'm not sure I'd want to use the multiplicative_factorization lemma in this case, since it's not clear to me that the totient function is multiplicative.

####  Eric Wieser (May 03 2020 at 10:02):

I'm not sure what the issue is, but I'm not sure I'd want to use the multiplicative_factorization lemma in this case, since it's not clear to me that the totient function is multiplicative.

####  Eric Wieser (May 03 2020 at 10:02):

I'm not sure what the issue is, but I'm not sure I'd want to use the multiplicative_factorization lemma in this case, since it's not clear to me that the totient function is multiplicative.

####  Eric Wieser (May 03 2020 at 10:02):

I'm not sure what the issue is, but I'm not sure I'd want to use the multiplicative_factorization lemma in this case, since it's not clear to me that the totient function is multiplicative.

####  Eric Wieser (May 03 2020 at 10:02):

I'm not sure what the issue is, but I'm not sure I'd want to use the multiplicative_factorization lemma in this case, since it's not clear to me that the totient function is multiplicative.

####  Eric Wieser (May 03 2020 at 10:02):

I'm not sure what the issue is, but I'm not sure I'd want to use the multiplicative_factorization lemma in this case, since it's not clear to me that the totient function is multiplicative.

####  Eric Wieser (May 03 2020 at 10:02):

I'm not sure what the issue is, but I'm not sure I'd want to use the multiplicative_factorization lemma in this case, since it's not clear to me that the totient function is multiplicative.

####  Eric Wieser

Attempt failure.

Working on Mathlib/Data/Num/Lemmas.lean - 2024-09-07 12:55:45.627846.
---34/100---
For theorem PosNum.cast_to_nat in Mathlib/Data/Num/Lemmas.lean:
theorem cast_to_nat [AddMonoidWithOne α] : ∀ n : PosNum, ((n : ℕ) : α) = n



Original valid proof:
  | 1 => Nat.cast_one
  | bit0 p => (Nat.cast_bit0 _).trans <| congr_arg _root_.bit0 p.cast_to_nat
  | bit1 p => (Nat.cast_bit1 _).trans <| congr_arg _root_.bit1 p.cast_to_nat


Verifying proof (Commit fc94d7cf19de72da26bfb583fdb140d8737abb30):
  | 1 => Nat.cast_one
  | bit0 p => by simp [cast_to_nat p]
  | bit1 p => by simp [cast_to_nat p]

####  Mario Carneiro (Mar 10 2021 at 10:00):

I think the problem is that thesimp attribute is not being applied to the first goal, so it's not being used to rewrite the goal.

####  Mario Carneiro (Mar 10 2021 at 10:01):

I think the problem is that thesimp attribute is not being applied to the first goal, so it's not being used to rewrite the goal.

####  Mario Carneiro (Mar 10 2021 at 10:01):

I think the problem is that thesimp attribute is not being applied to the first goal, so it's not being used to rewrite the goal.

####  Mario Carneiro (Mar 10 2021 at 10:01):

I think the problem is that thesimp attribute is not being applied to the first goal, so it's not being used to rewrite the goal.

####  Mario Carneiro (Mar 10 2021 at 10:01):

I think the problem is that thesimp attribute is not being applied to the first goal, so it's not being used to rewrite the goal.

####  Mario Carneiro (Mar 10 2021 at 10:01):

I think the problem is that thesimp attribute is not being applied to the first goal, so it's not being used to rewrite the goal.

####  Mario Carneiro (Mar 10 2021 at 10:01):

I think the problem is that thesimp attribute is not being applied to the first goal, so it's not being used to rewrite the goal.

####  Mario Carneiro (Mar 10 2021 at 10:01):

I think the problem is that thesimp attribute is not being applied to the first goal, so it's not being used to rewrite the goal.

####  Mario Carneiro (Mar 10 2021 at 10:01):

I think the problem is that thesimp attribute is not being applied to the first goal, so it's not being used to rewrite the goal.

####  Mario Carneiro (Mar 10 2021 at 10:01):

I think the problem is that thesimp attribute is not being applied to the first goal, so it's not being used to rewrite the goal.

####  Mario Carneiro (Mar 10 2021 at 10:01):

I think the problem is that thesimp attribute is not being applied to the first goal, so it's not being used to rewrite the goal.

####  Mario Carneiro (Mar 10 2021 at 10:01):

I think the problem is that thesimp attribute is not being applied to the first goal, so it's not being used to rewrite the goal.

####  Mario Carneiro (Mar 10 2021 at 10:01):

I think the problem is that thesimp attribute is not being applied to the first goal, so it's not being used to rewrite the goal.

####  Mario Carneiro (Mar 10 2021 at 10:01):

I think the problem is that thesimp attribute is not being applied to the first goal, so it's not being used to rewrite the goal.

####  Mario Carneiro (Mar 10 2021 at 10:01):

I think the problem is that thesimp attribute is not being applied to the first goal, so it's not being used to rewrite the goal.

####  Mario Carneiro (Mar 10 2021 at 10:01):

I think the problem is that thesimp attribute is not being applied to the first goal, so it's not being used to rewrite the goal.

####  Mario Carneiro (Mar 10 2021 at 10:01):

I think the problem is that thesimp attribute is not being applied to the first goal, so it's not being used to rewrite the goal.

####  Mario Carneiro (Mar 10 2021 at 10:01):

I think the problem is that thesimp attribute is not being applied to the first goal, so it's not being used to rewrite the goal.

####  Mario Carneiro (Mar 10 2021 at 10:01):

I think the problem is that thesimp attribute is not being applied to the first goal, so it's not being used to rewrite the goal.

####  Mario Carneiro (Mar 10 2021 at 10:01):

I think the problem is that thesimp attribute is not being applied to the first goal, so it's not being used to rewrite the goal.

####  Mario Carneiro (Mar 10 2021 at 10:01):

I think the problem is that thesimp attribute is not being applied to the first goal, so it's not being used to rewrite the goal.

####  Mario Carneiro (Mar 10 2021 at 10:01):

I think the problem is that thesimp attribute is not being applied to the first goal, so it's not being used to rewrite the goal.

####  Mario Carneiro (Mar 10 2021 at 10:01):

I think the problem is that thesimp attribute is not being applied to the first goal, so it's not being used to rewrite the goal.

####  Mario Carneiro (Mar 10 2021 at 10:01):

I think the problem is that thesimp attribute is not being applied to the first goal, so it's not being used to rewrite the goal.

####  Mario Carneiro (Mar 10 2021 at 10:01):

I think the problem is that thesimp attribute is not being applied to the first goal, so it's not being used to rewrite the goal.

####  Mario Carneiro (Mar 10 2021 at 10:01):

I think the problem is that thesimp attribute is not being applied to the first goal, so it's not being used to rewrite the goal.

####  Mario Carneiro (Mar 10 2021 at 10:01):

I think the problem is that thesimp attribute is not being applied to the first goal, so it's not being used to rewrite the goal.

####  Mario Carneiro (Mar 10 2021 at 10:01):

I think the problem is that thesimp attribute is not being applied to the first goal, so it's not being used to rewrite the goal.

####  Mario Carneiro (Mar 10 2021 at 10:01):

I think the problem is that thesimp attribute is not being applied to the first goal, so it's not being used to rewrite the goal.

####  Mario Carneiro (Mar 10 2021 at 10:01):

I think the problem is that thesimp attribute is not being applied to the first goal, so it's not being used to rewrite the goal.

####  Mario Carneiro (Mar 10 2021 at 10:01):

I think the problem is that thesimp attribute is not being applied to the first goal, so it's not being used to rewrite the goal.

####  Mario Carneiro (Mar 10 2021 at 10:01):

I think the problem is that thesimp attribute is not being applied to the first goal, so it's not being used to rewrite the goal.

####  Mario Carneiro (Mar 10 2021 at 10:01):

I think the problem is that thesimp attribute is not being applied to the first goal, so it's not being used to rewrite the goal.

####  Mario Carneiro (Mar 10 2021 at 10:01):

I think the problem is that thesimp attribute is not being applied to the first goal, so it's not being used to

Attempt failure.

Working on Mathlib/Data/QPF/Univariate/Basic.lean - 2024-09-07 12:56:07.404396.
---35/100---
For theorem QPF.Cofix.bisim_rel in Mathlib/Data/QPF/Univariate/Basic.lean:
theorem Cofix.bisim_rel (r : Cofix F → Cofix F → Prop)
    (h : ∀ x y, r x y → Quot.mk r <$> Cofix.dest x = Quot.mk r <$> Cofix.dest y) :
    ∀ x y, r x y → x = y 


Original valid proof:
:= by
  let r' (x y) := x = y ∨ r x y
  intro x y rxy
  apply Cofix.bisim_aux r'
  · intro x
    left
    rfl
  · intro x y r'xy
    cases' r'xy with r'xy r'xy
    · rw [r'xy]
    have : ∀ x y, r x y → r' x y := fun x y h => Or.inr h
    rw [← Quot.factor_mk_eq _ _ this]
    dsimp [r']
    rw [@comp_map _ q _ _ _ (Quot.mk r), @comp_map _ q _ _ _ (Quot.mk r)]
    rw [h _ _ r'xy]
  right; exact rxy


Verifying proof (Commit ef3c9bcd07782b044027916a64e925f3e4951707):
∧ r x y := by
  let r' (x y) := x = y ∨ r x y
  intro x y rxy
  apply Cofix.bisim_aux r'
  · intro x
    left
    rfl
  · intro x y r'xy
    cases' r'xy with r'xy r'xy
    · rw [r'xy]
    have : ∀ x y, r x y → r' x y := fun x y h => Or.inr h
    rw [← Quot.factor_mk_eq _ _ this]
    dsimp [r']
    rw [@comp_map _ _ q _ _ _ (Quot.mk r), @comp_map _ _ q _ _ _ (Quot.mk r)]
    rw [h _ _ r'xy]
  right; exact rxy

####  Mario Carneiro (May 01 2020 at 10:00):

I think the problem is that you're trying to provex = y ∧ r x y from r x y, which is not true in general

####  Mario Carneiro (May 01 2020 at 10:01):

You can't prove thatx = y ∧ r x y from r x y because you can't prove that x = y from r x y

####  Mario Carneiro (May 01 2020 at 10:01):

You can prove thatx = y ∧ r x y from r x y ∧ x = y

####  Mario Carneiro (May 01 2020 at 10:01):

or you can prove thatx = y ∧ r x y from r x y ∧ r y x

####  Mario Carneiro (May 01 2020 at 10:02):

I think the problem is that you're trying to prove
x = y ∧ r x y from r x y, which is not true in general

####  Mario Carneiro (May 01 2020 at 10:02):

You can't prove that
x = y ∧ r x y from r x y because you can't prove that x = y from r x y

####  Mario Carneiro (May 01 2020 at 10:02):

You can prove that
x = y ∧ r x y from r x y ∧ x = y

####  Mario Carneiro (May 01 2020 at 10:02):

or you can prove that
x = y ∧ r x y from r x y ∧ r y x

####  Mario Carneiro (May 01 2020 at 10:03):

I think the problem is that you're trying to prove
x = y ∧ r x y from r x y, which is not true in general

####  Mario Carneiro (May 01 2020 at 10:03):

You can't prove that
x = y ∧ r x y from r x y because you can't prove that x = y from r x y

####  Mario Carneiro (May 01 2020 at 10:03):

You can prove that
x = y ∧ r x y from r x y ∧ x = y

####  Mario Carneiro (May 01 2020 at 10:03):

or you can prove that
x = y ∧ r x y from r x y ∧ r y x

####  Mario Carneiro (May 01 2020 at 10:04):

I think the problem is that you're trying to prove
x = y ∧ r x y from r x y, which is not true in general

####  Mario Carneiro (May 01 2020 at 10:04):

You can't prove that
x = y ∧ r x y from r x y because you can't prove that x = y from r x y

####  Mario Carneiro (May 01 2020 at 10:04):

You can prove that
x = y ∧ r x y from r x y ∧ x = y

####  Mario Carneiro (May 01 2020 at 10:04):

or you can prove that
x = y ∧ r x y from r x y ∧ r y x

####  Mario Carneiro (May 01 2020 at 10:05):

I think the problem is that you're trying to prove
x = y ∧ r x y from r x y, which is not true in general

####  Mario Carneiro (May 01 2020 at 10:05):

You can't prove that
x = y ∧ r x y from r x y because you can't prove that x = y from r x y

####  Mario Carneiro (May 01 2020 at 10:05):

You can prove that
x = y ∧ r x y from r x y ∧ x = y

####  Mario Carneiro (May 01 2020 at 10:05):

or you can prove that
x = y ∧ r x y from r x y ∧ r y x

####  Mario Carneiro (May 01 2020 at 10:05):

I think the problem is that you're trying to prove
x = y ∧ r x y from r x y, which is not true in general

####  Mario Carneiro (May 01 2020 at 10:05):

You can't prove that
x = y ∧ r x y from r x y because you can't prove that x = y from r x y

####  Mario Carneiro (May 01 2020 at 10:05):

You can prove that
x = y ∧ r x y from r x y ∧ x = y

####  Mario Carneiro (May 01 2020 at 10:05):

or you can prove that
x = y ∧ r x y from r x y ∧ r y x

####  Mario Carneiro (May 01 2020 at 10:06):

I think the problem is that you're trying to prove
x = y ∧ r x y from r x y, which is not true in general

####  Mario Carneiro (May 01 2020 at 10:06):

You can't prove that
x = y ∧ r x y from r x y because you can't prove that x = y from r x y

####  Mario Carneiro (May 01 2020 at 10:06):

You can prove that
x = y ∧ r x y from r x y ∧ x = y

####  Mario Carneiro (May 01 2020 at 10:06):

or you can prove that
x = y ∧ r x y from r x y ∧ r y x

####  Mario Carneiro (May 01 2020 at 10:06):

I think the problem is that you're trying to prove
x = y ∧ r x y from r x y, which is not true in general

####  Mario Carneiro (May 01 2020 at 10:06):

You can't prove that
x = y ∧ r x y from r x y because you can't prove that x = y from r x y

####  Mario Carneiro (May 01 2020 at 10:06):

You can prove that
x = y ∧ r x y from r x y ∧ x = y

####  Mario Carneiro (May 01 2020 at 10:06):

or you can prove that
x = y ∧ r x y from r x y ∧ r y x

####  Mario Carneiro (May 01 2020 at 10:07):


Attempt failure.

Working on Mathlib/Data/Set/Basic.lean - 2024-09-07 12:56:13.254900.
---36/100---
For theorem Set.diff_union_of_subset in Mathlib/Data/Set/Basic.lean:
theorem diff_union_of_subset {s t : Set α} (h : t ⊆ s) : s \ t ∪ t = s 


Original valid proof:
:=
  Subset.antisymm (union_subset diff_subset h) (subset_diff_union _ _)


Verifying proof (Commit 70dcc1355b9ce0a6754f8d809c95a171072d3aac):
 :=
  Subset.antisymm (union_subset (diff_subset _ _) h) (subset_diff_union _ _)

####  Kevin Buzzard (Jun 02 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 02 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 02 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 02 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 02 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 02 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 02 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 02 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 02 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 02 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 02 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 02 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 02 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 02 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 02 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 02 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 02 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 02 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 02 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 02 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 02 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 02 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 02 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 02 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 02 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 02 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 02 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 02 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 02 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 02 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 02 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 02 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 02 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 02 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 02 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 02 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 02 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 02 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 02 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 02 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 02 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 02 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 02 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 02 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 02 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 02 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 02 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 02 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 02 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 02 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 02 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 02 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 02 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 02 2020 at 10:30):

I'm not sure what the problem is.

####  Kevin Buzzard (Jun 02 2020 at 

Attempt failure.

Working on Mathlib/Data/Set/Finite.lean - 2024-09-07 12:56:24.229204.
---37/100---
For theorem Set.eq_finite_iUnion_of_finite_subset_iUnion in Mathlib/Data/Set/Finite.lean:
theorem eq_finite_iUnion_of_finite_subset_iUnion {ι} {s : ι → Set α} {t : Set α} (tfin : t.Finite)
    (h : t ⊆ ⋃ i, s i) :
    ∃ I : Set ι,
      I.Finite ∧
        ∃ σ : { i | i ∈ I } → Set α, (∀ i, (σ i).Finite) ∧ (∀ i, σ i ⊆ s i) ∧ t = ⋃ i, σ i 


Original valid proof:
:=
  let ⟨I, Ifin, hI⟩ := finite_subset_iUnion tfin h
  ⟨I, Ifin, fun x => s x ∩ t, fun i => tfin.subset inter_subset_right, fun i =>
    inter_subset_left, by
    ext x
    rw [mem_iUnion]
    constructor
    · intro x_in
      rcases mem_iUnion.mp (hI x_in) with ⟨i, _, ⟨hi, rfl⟩, H⟩
      exact ⟨⟨i, hi⟩, ⟨H, x_in⟩⟩
    · rintro ⟨i, -, H⟩
      exact H⟩


Verifying proof (Commit 596865180ecc63dcd1d95809202e31027ac3ae38):
 :=
  let ⟨I, Ifin, hI⟩ := finite_subset_iUnion tfin h
  ⟨I, Ifin, fun x => s x ∩ t, fun i => tfin.subset (inter_subset_right _ _), fun i =>
    inter_subset_left _ _, by
    ext x
    rw [mem_iUnion]
    constructor
    · intro x_in
      rcases mem_iUnion.mp (hI x_in) with ⟨i, _, ⟨hi, rfl⟩, H⟩
      exact ⟨⟨i, hi⟩, ⟨H, x_in⟩⟩
    · rintro ⟨i, -, H⟩
      exact H⟩

####  Kevin Buzzard (Jun 01 2020 at 10:30):

I'm not sure what the point of the first line is.

####  Kevin Buzzard (Jun 01 2020 at 10:30):

I'm not sure what the point of the first line is.

####  Kevin Buzzard (Jun 01 2020 at 10:30):

I'm not sure what the point of the first line is.

####  Kevin Buzzard (Jun 01 2020 at 10:30):

I'm not sure what the point of the first line is.

####  Kevin Buzzard (Jun 01 2020 at 10:30):

I'm not sure what the point of the first line is.

####  Kevin Buzzard (Jun 01 2020 at 10:30):

I'm not sure what the point of the first line is.

####  Kevin Buzzard (Jun 01 2020 at 10:30):

I'm not sure what the point of the first line is.

####  Kevin Buzzard (Jun 01 2020 at 10:30):

I'm not sure what the point of the first line is.

####  Kevin Buzzard (Jun 01 2020 at 10:30):

I'm not sure what the point of the first line is.

####  Kevin Buzzard (Jun 01 2020 at 10:30):

I'm not sure what the point of the first line is.

####  Kevin Buzzard (Jun 01 2020 at 10:30):

I'm not sure what the point of the first line is.

####  Kevin Buzzard (Jun 01 2020 at 10:30):

I'm not sure what the point of the first line is.

####  Kevin Buzzard (Jun 01 2020 at 10:30):

I'm not sure what the point of the first line is.

####  Kevin Buzzard (Jun 01 2020 at 10:30):

I'm not sure what the point of the first line is.

####  Kevin Buzzard (Jun 01 2020 at 10:30):

I'm not sure what the point of the first line is.

####  Kevin Buzzard (Jun 01 2020 at 10:30):

I'm not sure what the point of the first line is.

####  Kevin Buzzard (Jun 01 2020 at 10:30):

I'm not sure what the point of the first line is.

####  Kevin Buzzard (Jun 01 2020 at 10:30):

I'm not sure what the point of the first line is.

####  Kevin Buzzard (Jun 01 2020 at 10:30):

I'm not sure what the point of the first line is.

####  Kevin Buzzard (Jun 01 2020 at 10:30):

I'm not sure what the point of the first line is.

####  Kevin Buzzard (Jun 01 2020 at 10:30):

I'm not sure what the point of the first line is.

####  Kevin Buzzard (Jun 01 2020 at 10:30):

I'm not sure what the point of the first line is.

####  Kevin Buzzard (Jun 01 2020 at 10:30):

I'm not sure what the point of the first line is.

####  Kevin Buzzard (Jun 01 2020 at 10:30):

I'm not sure what the point of the first line is.

####  Kevin Buzzard (Jun 01 2020 at 10:30):

I'm not sure what the point of the first line is.

####  Kevin Buzzard (Jun 01 2020 at 10:30):

I'm not sure what the point of the first line is.

####  Kevin Buzzard (Jun 01 2020 at 10:30):

I'm not sure what the point of the first line is.

####  Kevin Buzzard (Jun 01 2020 at 10:30):

I'm not sure what the point of the first line is.

####  Kevin Buzzard (Jun 01 2020 at 10:30):

I'm not sure what the point of the first line is.

####  Kevin Buzzard (Jun 01 2020 at 10:30):

I'm not sure what the point of the first line is.

####  Kevin Buzzard (Jun 01 2020 at 10:30):

I'm not sure what the point of the first line is.

####  Kevin Buzzard (Jun 01 2020 at 10:30):

I'm not sure what the point of the first line is.

####  Kevin Buzzard (Jun 01 2020 at 10:30):

I'm not sure what the point of the first line is.

####  Kevin Buzzard (Jun 01 2020 at 10:30):

I'm not sure what the point of the first line is.

####  Kevin Buzzard (Jun 01 2020 at 10:30):

I'm not sure what the point of the first line is.

####  Kevin Buzzard (Jun 01 2020 at 10:30):

I'm not sure what the point of the first line is.

####  Kevin Buzzard (Jun 01 2020 at 10:30):

I'm not sure what the point of the first line is.

####  Kevin Buzzard (Jun 01 2020 at 10:30):

I'm not sure what the point of the first line is.

####  Kevin Buzzard (Jun 01 2020 at 10:30):

I'm not sure what the point of the first line is.

####  Kevin Buzzard (Jun 01 2020 at 10:30):

I'm not sure what the point of the first line is.

####  Kevin Buzzard (Jun 01 2020 at 10:30):

I'm not sure what the point of the first line is.

####  Kevin Buzzard (Jun 01 2020 at 10:30):

I'm not sure what the point of the first line is.

####  Kevin Buzzard (Jun 01 2020 at 10:30):

I'm not sure what the point of the first line is.

####  Kevin Buzzard (Jun 01 2020 at 10:30):

I'm not sure what the point of the first line is.

####  Kevin Buzzard (Jun 01 2020 at 10:30):

I'm not sure what the point of the first line is.

####  Kevin Buzz

Attempt failure.

Working on Mathlib/Data/Set/Pointwise/Interval.lean - 2024-09-07 12:56:34.768500.
---38/100---
For theorem Set.Iic_add_bij in Mathlib/Data/Set/Pointwise/Interval.lean:
theorem Iic_add_bij : BijOn (· + a) (Iic b) (Iic (b + a)) 


Original valid proof:
:=
  image_add_const_Iic a b ▸ (add_left_injective _).injOn.bijOn_image


Verifying proof (Commit 596865180ecc63dcd1d95809202e31027ac3ae38):
 :=
  image_add_const_Iic a b ▸ ((add_left_injective _).injOn _).bijOn_image

I'm not sure if this is a bug or not, but I'm not sure how to fix it.

####  Mario Carneiro (Apr 01 2021 at 07:30):

I think it's a bug

####  Mario Carneiro (Apr 01 2021 at 07:30):

I'm not sure what the fix is

####  Mario Carneiro (Apr 01 2021 at 07:31):

I'm not sure if this is a bug or not, but I'm not sure how to fix it.

I think it's a bug

I'm not sure what the fix is

####  Mario Carneiro (Apr 01 2021 at 07:31):

I'm not sure if this is a bug or not, but I'm not sure how to fix it.

I think it's a bug

I'm not sure what the fix is

####  Mario Carneiro (Apr 01 2021 at 07:31):

I'm not sure if this is a bug or not, but I'm not sure how to fix it.

I think it's a bug

I'm not sure what the fix is

####  Mario Carneiro (Apr 01 2021 at 07:31):

I'm not sure if this is a bug or not, but I'm not sure how to fix it.

I think it's a bug

I'm not sure what the fix is

####  Mario Carneiro (Apr 01 2021 at 07:31):

I'm not sure if this is a bug or not, but I'm not sure how to fix it.

I think it's a bug

I'm not sure what the fix is

####  Mario Carneiro (Apr 01 2021 at 07:31):

I'm not sure if this is a bug or not, but I'm not sure how to fix it.

I think it's a bug

I'm not sure what the fix is

####  Mario Carneiro (Apr 01 2021 at 07:31):

I'm not sure if this is a bug or not, but I'm not sure how to fix it.

I think it's a bug

I'm not sure what the fix is

####  Mario Carneiro (Apr 01 2021 at 07:31):

I'm not sure if this is a bug or not, but I'm not sure how to fix it.

I think it's a bug

I'm not sure what the fix is

####  Mario Carneiro (Apr 01 2021 at 07:31):

I'm not sure if this is a bug or not, but I'm not sure how to fix it.

I think it's a bug

I'm not sure what the fix is

####  Mario Carneiro (Apr 01 2021 at 07:31):

I'm not sure if this is a bug or not, but I'm not sure how to fix it.

I think it's a bug

I'm not sure what the fix is

####  Mario Carneiro (Apr 01 2021 at 07:31):

I'm not sure if this is a bug or not, but I'm not sure how to fix it.

I think it's a bug

I'm not sure what the fix is

####  Mario Carneiro (Apr 01 2021 at 07:31):

I'm not sure if this is a bug or not, but I'm not sure how to fix it.

I think it's a bug

I'm not sure what the fix is

####  Mario Carneiro (Apr 01 2021 at 07:31):

I'm not sure if this is a bug or not, but I'm not sure how to fix it.

I think it's a bug

I'm not sure what the fix is

####  Mario Carneiro (Apr 01 2021 at 07:31):

I'm not sure if this is a bug or not, but I'm not sure how to fix it.

I think it's a bug

I'm not sure what the fix is

####  Mario Carneiro (Apr 01 2021 at 07:31):

I'm not sure if this is a bug or not, but I'm not sure how to fix it.

I think it's a bug

I'm not sure what the fix is

####  Mario Carneiro (Apr 01 2021 at 07:31):

I'm not sure if this is a bug or not, but I'm not sure how to fix it.

I think it's a bug

I'm not sure what the fix is

####  Mario Carneiro (Apr 01 2021 at 07:31):

I'm not sure if this is a bug or not, but I'm not sure how to fix it.

I think it's a bug

I'm not sure what the fix is

####  Mario Carneiro (Apr 01 2021 at 07:31):

I'm not sure if this is a bug or not, but I'm not sure how to fix it.

I think it's a bug

I'm not sure what the fix is

####  Mario Carneiro (Apr 01 2021 at 07:31):

I'm not sure if this is a bug or not, but I'm not sure how to fix it.

I think it's a bug

I'm not sure what the fix is

####  Mario Carneiro (Apr 01 2021 at 07:31):

I'm not sure if this is a bug or not, but I'm not sure how to fix it.

I think it's a bug

I'm not sure what the fix is

####  Mario Carneiro (Apr 01 2021 at 07:31):

I'm not sure if this is a bug or not, but I'm not sure how to fix it.

I think it's a bug

I'm not sure what the fix is

####  Mario Carneiro (Apr 01 2021 at 07:31):

I'm not sure if this is a bug or not, but I'm not sure how to fix it.

I think it's a bug

I'm not sure what the fix is

####  Mario Carneiro (Apr 01 2021 at 07:31):

I'm not sure if this is a bug or not, but I'm not sure how to fix it.

I think it's a bug

I'm not sure what the fix is

####  Mario Carneiro (Apr 01 2021 at 07:31):

I'm not sure if this is a bug or not, but I'm not sure how to fix it.

I think it's a bug

I'm not sure what the fix is

####  Mario Carneiro (Apr 01 2021 at 07:31):

I'm not sure if this is a bug or not, but I'm not sure how to fix it.

I think it's a bug

I'm not sure what the fix is

####  Mario Carneiro (Apr 01 2021 at 07:31):

I'm not sure if this is a bug or not, but I'm not sure how to fix it.

I think it's a bug

I'm not sure what the fix is

####  Mario Carneiro (Apr 01 2021 at 07:31):

I'm not sure if this is a bug or not, but I'

Attempt failure.

Working on Mathlib/Data/Set/Prod.lean - 2024-09-07 12:56:52.961124.
---39/100---
For theorem Set.insert_prod in Mathlib/Data/Set/Prod.lean:
theorem insert_prod : insert a s ×ˢ t = Prod.mk a '' t ∪ s ×ˢ t 


Original valid proof:
:= by
  ext ⟨x, y⟩
  simp (config := { contextual := true }) [image, iff_def, or_imp]


Verifying proof (Commit cc6e5e01514b06a44caccb55bc04e269ede6a7c8):
 := by
  ext ⟨x, y⟩
  simp (config := { contextual := true }) [image, iff_def, or_imp, Imp.swap]

####  Yakov Pechersky (Jun 01 2020 at 00:00):

I'm not sure why the original proof is failing.

####  Yakov Pechersky (Jun 01 2020 at 00:01):

I'm not sure why the original proof is failing.

####  Yakov Pechersky (Jun 01 2020 at 00:01):

I'm not sure why the original proof is failing.

####  Yakov Pechersky (Jun 01 2020 at 00:01):

I'm not sure why the original proof is failing.

####  Yakov Pechersky (Jun 01 2020 at 00:01):

I'm not sure why the original proof is failing.

####  Yakov Pechersky (Jun 01 2020 at 00:01):

I'm not sure why the original proof is failing.

####  Yakov Pechersky (Jun 01 2020 at 00:01):

I'm not sure why the original proof is failing.

####  Yakov Pechersky (Jun 01 2020 at 00:01):

I'm not sure why the original proof is failing.

####  Yakov Pechersky (Jun 01 2020 at 00:01):

I'm not sure why the original proof is failing.

####  Yakov Pechersky (Jun 01 2020 at 00:01):

I'm not sure why the original proof is failing.

####  Yakov Pechersky (Jun 01 2020 at 00:01):

I'm not sure why the original proof is failing.

####  Yakov Pechersky (Jun 01 2020 at 00:01):

I'm not sure why the original proof is failing.

####  Yakov Pechersky (Jun 01 2020 at 00:01):

I'm not sure why the original proof is failing.

####  Yakov Pechersky (Jun 01 2020 at 00:01):

I'm not sure why the original proof is failing.

####  Yakov Pechersky (Jun 01 2020 at 00:01):

I'm not sure why the original proof is failing.

####  Yakov Pechersky (Jun 01 2020 at 00:01):

I'm not sure why the original proof is failing.

####  Yakov Pechersky (Jun 01 2020 at 00:01):

I'm not sure why the original proof is failing.

####  Yakov Pechersky (Jun 01 2020 at 00:01):

I'm not sure why the original proof is failing.

####  Yakov Pechersky (Jun 01 2020 at 00:01):

I'm not sure why the original proof is failing.

####  Yakov Pechersky (Jun 01 2020 at 00:01):

I'm not sure why the original proof is failing.

####  Yakov Pechersky (Jun 01 2020 at 00:01):

I'm not sure why the original proof is failing.

####  Yakov Pechersky (Jun 01 2020 at 00:01):

I'm not sure why the original proof is failing.

####  Yakov Pechersky (Jun 01 2020 at 00:01):

I'm not sure why the original proof is failing.

####  Yakov Pechersky (Jun 01 2020 at 00:01):

I'm not sure why the original proof is failing.

####  Yakov Pechersky (Jun 01 2020 at 00:01):

I'm not sure why the original proof is failing.

####  Yakov Pechersky (Jun 01 2020 at 00:01):

I'm not sure why the original proof is failing.

####  Yakov Pechersky (Jun 01 2020 at 00:01):

I'm not sure why the original proof is failing.

####  Yakov Pechersky (Jun 01 2020 at 00:01):

I'm not sure why the original proof is failing.

####  Yakov Pechersky (Jun 01 2020 at 00:01):

I'm not sure why the original proof is failing.

####  Yakov Pechersky (Jun 01 2020 at 00:01):

I'm not sure why the original proof is failing.

####  Yakov Pechersky (Jun 01 2020 at 00:01):

I'm not sure why the original proof is failing.

####  Yakov Pechersky (Jun 01 2020 at 00:01):

I'm not sure why the original proof is failing.

####  Yakov Pechersky (Jun 01 2020 at 00:01):

I'm not sure why the original proof is failing.

####  Yakov Pechersky (Jun 01 2020 at 00:01):

I'm not sure why the original proof is failing.

####  Yakov Pechersky (Jun 01 2020 at 00:01):

I'm not sure why the original proof is failing.

####  Yakov Pechersky (Jun 01 2020 at 00:01):

I'm not sure why the original proof is failing.

####  Yakov Pechersky (Jun 01 2020 at 00:01):

I'm not sure why the original proof is failing.

####  Yakov Pechersky (Jun 01 2020 at 00:01):

I'm not sure why the original proof is failing.

####  Yakov Pechersky (Jun 01 2020 at 00:01):

I'm not sure why the original proof is failing.

####  Yakov Pechersky (Jun 01 2020 at 00:01):

I'm not sure why the original proof is failing.

####  Yakov Pechersky (Jun 01 2020 at 00:01):

I'm not sure why the original proof is failing.

####  Yakov Pechersky (Jun 01 2020 at 00:01):

I'm not sure why the original proof is failing.

####  Yakov Pechersky (Jun 01 2020 at 00:01):

I'm not sure why the original proof is failing.

####  Yakov Pechersky (Jun 01 2020 at 00:01):

I'm not sure why the original proof is failing.

####  Yakov Pechersky (Jun 01 2020 at 00:01):

I'm not sure why the original proof is failing.

####  Yakov Pechersky (Jun 01 2020 at 00:01):

I'm not sure why the original proof is failing.

####  Yakov Pechersky (Jun 01 2020 at 00:01):

I'm not sure why the original proof is failing.

####  Yakov Pechersky (Jun 01 2020 at 00:01):

I'm not sure why the original proof is failing.

####  Yakov Pechersky (Jun 01 2020 at 00:01):

I'm not sure why the original proof

Attempt failure.

Working on Mathlib/FieldTheory/PurelyInseparable.lean - 2024-09-07 12:57:02.737022.
---40/100---
For theorem Polynomial.Separable.map_irreducible_of_isPurelyInseparable in Mathlib/FieldTheory/PurelyInseparable.lean:
theorem Polynomial.Separable.map_irreducible_of_isPurelyInseparable {f : F[X]} (hsep : f.Separable)
    (hirr : Irreducible f) [IsPurelyInseparable F E] : Irreducible (f.map (algebraMap F E)) 


Original valid proof:
:= by
  let K := AlgebraicClosure E
  obtain ⟨x, hx⟩ := IsAlgClosed.exists_aeval_eq_zero K f
    (natDegree_pos_iff_degree_pos.1 hirr.natDegree_pos).ne'
  have ha : Associated f (minpoly F x) := by
    have := isUnit_C.2 (leadingCoeff_ne_zero.2 hirr.ne_zero).isUnit.inv
    exact ⟨this.unit, by rw [IsUnit.unit_spec, minpoly.eq_of_irreducible hirr hx]⟩
  have ha' : Associated (f.map (algebraMap F E)) ((minpoly F x).map (algebraMap F E)) :=
    ha.map (mapRingHom (algebraMap F E)).toMonoidHom
  have heq := minpoly.map_eq_of_separable_of_isPurelyInseparable E x (ha.separable hsep)
  rw [ha'.irreducible_iff, heq]
  exact minpoly.irreducible (Algebra.IsIntegral.isIntegral x)


Verifying proof (Commit cc6e5e01514b06a44caccb55bc04e269ede6a7c8):
 := by
  let K := AlgebraicClosure E
  obtain ⟨x, hx⟩ := IsAlgClosed.exists_aeval_eq_zero K f
    (natDegree_pos_iff_degree_pos.1 hirr.natDegree_pos).ne'
  have ha : Associated f (minpoly F x) := by
    have := isUnit_C.2 (leadingCoeff_ne_zero.2 hirr.ne_zero).isUnit.inv
    exact ⟨this.unit, by rw [IsUnit.unit_spec, minpoly.eq_of_irreducible hirr hx]⟩
  have ha' : Associated (f.map (algebraMap F E)) ((minpoly F x).map (algebraMap F E)) :=
    ha.map (mapRingHom (algebraMap F E)).toMonoidHom
  have heq := minpoly.map_eq_of_separable_of_isPurelyInseparable E x (ha.separable hsep)
  rw [ha'.irreducible_iff, heq]
  exact minpoly.irreducible (AlgebraicClosure.isAlgebraic E x).isIntegral

## Your Answer

By clicking “Post Your Answer”, you agree to our terms of service, privacy policy and cookie policy

Attempt failure.

Working on Mathlib/Geometry/Euclidean/Inversion/Calculus.lean - 2024-09-07 12:57:40.436773.
---41/100---
For theorem EuclideanGeometry.hasFDerivAt_inversion in Mathlib/Geometry/Euclidean/Inversion/Calculus.lean:
theorem hasFDerivAt_inversion (hx : x ≠ c) :
    HasFDerivAt (inversion c R)
      ((R / dist x c) ^ 2 • (reflection (ℝ ∙ (x - c))ᗮ : F →L[ℝ] F)) x 


Original valid proof:
:= by
  rcases add_left_surjective c x with ⟨x, rfl⟩
  have : HasFDerivAt (inversion c R) (?_ : F →L[ℝ] F) (c + x) := by
    simp only [inversion_def]
    simp_rw [dist_eq_norm, div_pow, div_eq_mul_inv]
    have A := (hasFDerivAt_id (𝕜 := ℝ) (c + x)).sub_const c
    have B := ((hasDerivAt_inv <| by simpa using hx).comp_hasFDerivAt _ A.norm_sq).const_mul
      (R ^ 2)
    exact (B.smul A).add_const c
  refine this.congr_fderiv (LinearMap.ext_on_codisjoint
    (Submodule.isCompl_orthogonal_of_completeSpace (K := ℝ ∙ x)).codisjoint
    (LinearMap.eqOn_span' ?_) fun y hy ↦ ?_)
  · have : ((‖x‖ ^ 2) ^ 2)⁻¹ * (‖x‖ ^ 2) = (‖x‖ ^ 2)⁻¹ := by
      rw [← div_eq_inv_mul, sq (‖x‖ ^ 2), div_self_mul_self']
    simp [reflection_orthogonalComplement_singleton_eq_neg, real_inner_self_eq_norm_sq,
      two_mul, this, div_eq_mul_inv, mul_add, add_smul, mul_pow]
  · simp [Submodule.mem_orthogonal_singleton_iff_inner_right.1 hy,
      reflection_mem_subspace_eq_self hy, div_eq_mul_inv, mul_pow]


Verifying proof (Commit 8c4338d2f64ef8da7809ea24b10b780568e6b917):
 := by
  rcases add_left_surjective c x with ⟨x, rfl⟩
  have : HasFDerivAt (inversion c R) (_ : F →L[ℝ] F) (c + x) := by
    simp (config := { unfoldPartialApp := true }) only [inversion]
    simp_rw [dist_eq_norm, div_pow, div_eq_mul_inv]
    have A := (hasFDerivAt_id (𝕜 := ℝ) (c + x)).sub_const c
    have B := ((hasDerivAt_inv <| by simpa using hx).comp_hasFDerivAt _ A.norm_sq).const_mul
      (R ^ 2)
    exact (B.smul A).add_const c
  refine this.congr_fderiv (LinearMap.ext_on_codisjoint
    (Submodule.isCompl_orthogonal_of_completeSpace (K := ℝ ∙ x)).codisjoint
    (LinearMap.eqOn_span' ?_) fun y hy ↦ ?_)
  · have : ((‖x‖ ^ 2) ^ 2)⁻¹ * (‖x‖ ^ 2) = (‖x‖ ^ 2)⁻¹ := by
      rw [← div_eq_inv_mul, sq (‖x‖ ^ 2), div_self_mul_self']
    simp [reflection_orthogonalComplement_singleton_eq_neg, real_inner_self_eq_norm_sq,
      two_mul, this, div_eq_mul_inv, mul_add, add_smul, mul_pow]
  · simp [Submodule.mem_orthogonal_singleton_iff_inner_right.1 hy,
      reflection_mem_subspace_eq_self hy, div_eq_mul_inv, mul_pow]

## 1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.

Attempt failure.

Working on Mathlib/Geometry/Manifold/BumpFunction.lean - 2024-09-07 12:57:51.335526.
---42/100---
For theorem SmoothBumpFunction.smooth_smul in Mathlib/Geometry/Manifold/BumpFunction.lean:
theorem smooth_smul {G} [NormedAddCommGroup G] [NormedSpace ℝ G] {g : M → G}
    (hg : SmoothOn I 𝓘(ℝ, G) g (chartAt H c).source) : Smooth I 𝓘(ℝ, G) fun x => f x • g x 


Original valid proof:
:= by
  refine contMDiff_of_tsupport fun x hx => ?_
  have : x ∈ (chartAt H c).source :=
    f.tsupport_subset_chartAt_source <| tsupport_smul_subset_left _ _ hx
  exact f.smoothAt.smul ((hg _ this).contMDiffAt <| (chartAt _ _).open_source.mem_nhds this)


Verifying proof (Commit 71880da883b383ac13b9beb76b1bd41a0f023582):
 := by
  refine contMDiff_of_support fun x hx => ?_
  have : x ∈ (chartAt H c).source
  · exact f.tsupport_subset_chartAt_source <| tsupport_smul_subset_left _ _ hx
  exact f.smoothAt.smul ((hg _ this).contMDiffAt <| IsOpen.mem_nhds (chartAt _ _).open_source this)

####  Floris van Doorn (May 02 2020 at 10:04):

I think the problem is that the support of a function is not a set, but a setoid.

####  Floris van Doorn (May 02 2020 at 10:05):

I think the problem is that the support of a function is not a set, but a setoid.

####  Floris van Doorn (May 02 2020 at 10:05):

I think the problem is that the support of a function is not a set, but a setoid.

####  Floris van Doorn (May 02 2020 at 10:05):

I think the problem is that the support of a function is not a set, but a setoid.

####  Floris van Doorn (May 02 2020 at 10:05):

I think the problem is that the support of a function is not a set, but a setoid.

####  Floris van Doorn (May 02 2020 at 10:05):

I think the problem is that the support of a function is not a set, but a setoid.

####  Floris van Doorn (May 02 2020 at 10:05):

I think the problem is that the support of a function is not a set, but a setoid.

####  Floris van Doorn (May 02 2020 at 10:05):

I think the problem is that the support of a function is not a set, but a setoid.

####  Floris van Doorn (May 02 2020 at 10:05):

I think the problem is that the support of a function is not a set, but a setoid.

####  Floris van Doorn (May 02 2020 at 10:05):

I think the problem is that the support of a function is not a set, but a setoid.

####  Floris van Doorn (May 02 2020 at 10:05):

I think the problem is that the support of a function is not a set, but a setoid.

####  Floris van Doorn (May 02 2020 at 10:05):

I think the problem is that the support of a function is not a set, but a setoid.

####  Floris van Doorn (May 02 2020 at 10:05):

I think the problem is that the support of a function is not a set, but a setoid.

####  Floris van Doorn (May 02 2020 at 10:05):

I think the problem is that the support of a function is not a set, but a setoid.

####  Floris van Doorn (May 02 2020 at 10:05):

I think the problem is that the support of a function is not a set, but a setoid.

####  Floris van Doorn (May 02 2020 at 10:05):

I think the problem is that the support of a function is not a set, but a setoid.

####  Floris van Doorn (May 02 2020 at 10:05):

I think the problem is that the support of a function is not a set, but a setoid.

####  Floris van Doorn (May 02 2020 at 10:05):

I think the problem is that the support of a function is not a set, but a setoid.

####  Floris van Doorn (May 02 2020 at 10:05):

I think the problem is that the support of a function is not a set, but a setoid.

####  Floris van Doorn (May 02 2020 at 10:05):

I think the problem is that the support of a function is not a set, but a setoid.

####  Floris van Doorn (May 02 2020 at 10:05):

I think the problem is that the support of a function is not a set, but a setoid.

####  Floris van Doorn (May 02 2020 at 10:05):

I think the problem is that the support of a function is not a set, but a setoid.

####  Floris van Doorn (May 02 2020 at 10:05):

I think the problem is that the support of a function is not a set, but a setoid.

####  Floris van Doorn (May 02 2020 at 10:05):

I think the problem is that the support of a function is not a set, but a setoid.

####  Floris van Doorn (May 02 2020 at 10:05):

I think the problem is that the support of a function is not a set, but a setoid.

####  Floris van Doorn (May 02 2020 at 10:05):

I think the problem is that the support of a function is not a set, but a setoid.

####  Floris van Doorn (May 02 2020 at 10:05):

I think the problem is that the support of a function is not a set, but a setoid.

####  Floris van Doorn (May 02 2020 at 10:05):

I think the problem is that the support of a function is not a set, but a setoid.

####  Floris van Doorn (May 02 2020 at 10:05):

I think the problem is that the support of a function is not a set, but a setoid.

####  Floris van Doorn (May 02 2020 at 10:05):

I think the problem is that the support of a function is not a set, but a setoid.

####  Floris van Doorn (May 02 2020 at 10:05):

I think the problem is that the support of a function is not a set, but a setoid.

####  Floris van Doorn (May 02 2020 at 10:05):

I think the problem is that the support of a function is not a set, but a setoid.

####  Floris van Doorn (May 02 2020 at 10:05):

I think the problem is that the support of a function is not a set, but a setoid.

####  Floris van Doorn (May 02 2020 at 10:05):

I think the problem is that the support of a function is not a set, but a setoid.

####  Floris van Doorn (May 02 2020 at 10:05):

I think the problem is that the support of a function is not a set, but a setoid.

####  Floris van Doorn (May 02 2020 at 10:05):

I think the problem is that the support of a function is not a set, but a setoid.

####  Floris van Doorn (May 02 2020 at 10:05):

I think the problem is that the support of a function is not a set, but a setoid.

####  Floris van Doorn (May 02 2020 at 10:05):

I think the problem is that the support of a function is not a set, but a setoid.

####  Floris van Doorn (May 02 2020 at 10:05):

I think the problem is that the support of a function is not a set,

Attempt failure.

Working on Mathlib/Geometry/Manifold/ContMDiff/Basic.lean - 2024-09-07 12:58:03.994858.
---43/100---
For theorem ContMDiffWithinAt.comp in Mathlib/Geometry/Manifold/ContMDiff/Basic.lean:
theorem ContMDiffWithinAt.comp {t : Set M'} {g : M' → M''} (x : M)
    (hg : ContMDiffWithinAt I' I'' n g t (f x)) (hf : ContMDiffWithinAt I I' n f s x)
    (st : MapsTo f s t) : ContMDiffWithinAt I I'' n (g ∘ f) s x 


Original valid proof:
:= by
  rw [contMDiffWithinAt_iff] at hg hf ⊢
  refine ⟨hg.1.comp hf.1 st, ?_⟩
  set e := extChartAt I x
  set e' := extChartAt I' (f x)
  have : e' (f x) = (writtenInExtChartAt I I' x f) (e x) := by simp only [e, e', mfld_simps]
  rw [this] at hg
  have A : ∀ᶠ y in 𝓝[e.symm ⁻¹' s ∩ range I] e x, f (e.symm y) ∈ t ∧ f (e.symm y) ∈ e'.source := by
    simp only [e, ← map_extChartAt_nhdsWithin, eventually_map]
    filter_upwards [hf.1.tendsto (extChartAt_source_mem_nhds I' (f x)),
      inter_mem_nhdsWithin s (extChartAt_source_mem_nhds I x)]
    rintro x' (hfx' : f x' ∈ e'.source) ⟨hx's, hx'⟩
    simp only [e.map_source hx', true_and_iff, e.left_inv hx', st hx's, *]
  refine ((hg.2.comp _ (hf.2.mono inter_subset_right) inter_subset_left).mono_of_mem
    (inter_mem ?_ self_mem_nhdsWithin)).congr_of_eventuallyEq ?_ ?_
  · filter_upwards [A]
    rintro x' ⟨ht, hfx'⟩
    simp only [*, mem_preimage, writtenInExtChartAt, (· ∘ ·), mem_inter_iff, e'.left_inv,
      true_and_iff]
    exact mem_range_self _
  · filter_upwards [A]
    rintro x' ⟨-, hfx'⟩
    simp only [*, (· ∘ ·), writtenInExtChartAt, e'.left_inv]
  · simp only [e, e', writtenInExtChartAt, (· ∘ ·), mem_extChartAt_source, e.left_inv, e'.left_inv]


Verifying proof (Commit 7ed7ed5693428ce8707e770581caaf86da193e99):
 := by
  rw [contMDiffWithinAt_iff] at hg hf ⊢
  refine' ⟨hg.1.comp hf.1 st, _⟩
  set e := extChartAt I x
  set e' := extChartAt I' (f x)
  have : e' (f x) = (writtenInExtChartAt I I' x f) (e x) := by simp only [mfld_simps]
  rw [this] at hg
  have A : ∀ᶠ y in 𝓝[e.symm ⁻¹' s ∩ range I] e x, f (e.symm y) ∈ t ∧ f (e.symm y) ∈ e'.source := by
    simp only [← map_extChartAt_nhdsWithin, eventually_map]
    filter_upwards [hf.1.tendsto (extChartAt_source_mem_nhds I' (f x)),
      inter_mem_nhdsWithin s (extChartAt_source_mem_nhds I x)]
    rintro x' (hfx' : f x' ∈ e'.source) ⟨hx's, hx'⟩
    simp only [e.map_source hx', true_and_iff, e.left_inv hx', st hx's, *]
  refine' ((hg.2.comp _ (hf.2.mono (inter_subset_right _ _)) (inter_subset_left _ _)).mono_of_mem
    (inter_mem _ self_mem_nhdsWithin)).congr_of_eventuallyEq _ _
  · filter_upwards [A]
    rintro x' ⟨ht, hfx'⟩
    simp only [*, mem_preimage, writtenInExtChartAt, (· ∘ ·), mem_inter_iff, e'.left_inv,
      true_and_iff]
    exact mem_range_self _
  · filter_upwards [A]
    rintro x' ⟨-, hfx'⟩
    simp only [*, (· ∘ ·), writtenInExtChartAt, e'.left_inv]
  · simp only [writtenInExtChartAt, (· ∘ ·), mem_extChartAt_source, e.left_inv, e'.left_inv]

## References #

- [N.H. Kuiper, On C^n-isometric mappings in Hubert spaces][kuiper1940]

## Tags #

cont_diff, cont_diff_within_at, cont_diff_on, derivative, differentiable, differentiable_on,
differentiable_at

### Basic properties of the order of a

## Basic properties of the order of a
C^n function #

theorem contDiffWithinAt_succ_iff_hasFDerivWithinAt {E : Type u_1} [NormedAddCommGroup E] [NormedSpace ℝ E] {F : Type u_2} [NormedAddCommGroup F] [NormedSpace ℝ F] {n : ℕ} {s : Set E} {f : E → F} {x : E} :

ContDiffWithinAt ℝ (n + 1) f s x ↔ HasFDerivWithinAt f (fderivWithin ℝ f s x) s x ∧ ContDiffWithinAt ℝ n (fun (y : E) => fderivWithin ℝ f s y) s x

theorem contDiffWithinAt_succ_iff_fderivWithin_eq_fderivWithin {E : Type u_1} [NormedAddCommGroup E] [NormedSpace ℝ E] {F : Type u_2} [NormedAddCommGroup F] [NormedSpace ℝ F] {n : ℕ} {s : Set E} {f : E → F} {x : E} (hxs : UniqueDiffOn ℝ s) :

ContDiffWithinAt ℝ (n + 1) f s x ↔ HasFDerivWithinAt f (fderivWithin ℝ f s x) s x ∧ fderivWithin ℝ f s x = fderivWithin ℝ (fun (y : E) => fderivWithin ℝ f s y) s x

theorem contDiffWithinAt_one_iff_hasFDerivWithinAt {E : Type u_1} [NormedAddCommGroup E] [NormedSpace ℝ E] {F : Type u_2} [NormedAddCommGroup F] [NormedSpace ℝ F] {s : Set E} {f : E → F} {x : E} :

ContDiffWithinAt ℝ 1 f s x ↔ HasFDerivWithinAt f (fderivWithin ℝ f s x) s x

theorem contDiffWithinAt_one_iff_fderivWithin_eq_fderivWithin {E : Type u_1} [NormedAddCommGroup E] [NormedSpace ℝ E] {F : Type u_2} [NormedAddCommGroup F] [NormedSpace ℝ F] {s : Set E} {f : E → F} {x : E} (hxs : UniqueDiffOn ℝ s) :

ContDiffWithinAt ℝ 1 f s x ↔ HasFDerivWithinAt f (fderivWithin ℝ f s x) s x ∧ fderivWithin ℝ f s x = fderivWithin ℝ (fun (y : E) => fderivWithin ℝ f s y) s x

theorem contDiffOn_succ_iff_fderivWithin {E : Type u_1} [NormedAddCommGroup E] [NormedSpace ℝ E] {F : Type u_2} [NormedAddCommGroup F] [NormedSpace ℝ F] {n : ℕ} {s : Set E} {f : E → F} (hs : UniqueDiffOn ℝ s) :

ContDiffOn ℝ (n + 1) f s ↔ (∀ (x : E), x ∈ s → HasFDerivWithinAt f (fderivWithin ℝ f s x) s x) ∧ ContDiffOn ℝ n (fun (y : E) => fderivWithin ℝ f s y) s

theorem contDiffOn_succ_iff_fderiv_eq_fderiv {E : Type u_1} [NormedAddCommGroup E] [NormedSpace ℝ E] {F : Type u_2} [NormedAddCommGroup F] [NormedSpace ℝ F] {n : ℕ} {s : Set E} {f : E → F} (hs : UniqueDiffOn ℝ s) :

ContDiffOn ℝ (n + 1) f s ↔ (∀ (x : E), x ∈ s → HasFDerivWithinAt f (fderivWithin ℝ f s x) s x) ∧ fderivWithin ℝ f s =ᶠ[⊓ fun (x : E) (s : Set E) => 𝓝[s] x] fun (x : E) => fderivWithin ℝ (fun (y : E) => fderivWithin ℝ f s y) s

theorem contDiffOn_one_iff_fderivWithin_eq_fderivWithin {E : Type u_1} [NormedAddCommGroup E] [NormedSpace ℝ E] {F : Type u_2} [NormedAddCommGroup F] [NormedSpace ℝ F] {s : Set E} {f : E → F} (hs : UniqueDiffOn ℝ s) :

ContDiffOn ℝ 1 f s ↔ (∀ (x : E), x ∈ s → HasFDerivWithinAt f (fderivWithin ℝ f s x) s x) ∧ fderivWithin ℝ f s =ᶠ[⊓ fun (x : E) (s : Set E) => 𝓝[s] x] fun (x : E) => fderivWithin ℝ (fun (y : E) => fderivWithin ℝ f s y) s

theorem contDiffOn_one_iff_fderiv_eq_fderiv {E : Type u_1} [NormedAddCommGroup E] [NormedSpace ℝ E] {F : Type u_2} [NormedAddCommGroup F] [NormedSpace ℝ F] {s : Set E} {f : E → F} (hs : UniqueDiffOn

Attempt failure.

Working on Mathlib/Geometry/Manifold/IntegralCurve.lean - 2024-09-07 12:58:16.802978.
---44/100---
For theorem isIntegralCurveOn_Ioo_eqOn_of_contMDiff in Mathlib/Geometry/Manifold/IntegralCurve.lean:
theorem isIntegralCurveOn_Ioo_eqOn_of_contMDiff (ht₀ : t₀ ∈ Ioo a b)
    (hγt : ∀ t ∈ Ioo a b, I.IsInteriorPoint (γ t))
    (hv : ContMDiff I I.tangent 1 (fun x ↦ (⟨x, v x⟩ : TangentBundle I M)))
    (hγ : IsIntegralCurveOn γ v (Ioo a b)) (hγ' : IsIntegralCurveOn γ' v (Ioo a b))
    (h : γ t₀ = γ' t₀) : EqOn γ γ' (Ioo a b) 


Original valid proof:
:= by
  set s := {t | γ t = γ' t} ∩ Ioo a b with hs
  suffices hsub : Ioo a b ⊆ s from fun t ht ↦ mem_setOf.mp ((subset_def ▸ hsub) t ht).1
  apply isPreconnected_Ioo.subset_of_closure_inter_subset (s := Ioo a b) (u := s) _
    ⟨t₀, ⟨ht₀, ⟨h, ht₀⟩⟩⟩
  · 
    rw [hs, inter_comm, ← Subtype.image_preimage_val, inter_comm, ← Subtype.image_preimage_val,
      image_subset_image_iff Subtype.val_injective, preimage_setOf_eq]
    intros t ht
    rw [mem_preimage, ← closure_subtype] at ht
    revert ht t
    apply IsClosed.closure_subset (isClosed_eq _ _)
    · rw [continuous_iff_continuousAt]
      rintro ⟨_, ht⟩
      apply ContinuousAt.comp _ continuousAt_subtype_val
      rw [Subtype.coe_mk]
      exact hγ.continuousAt ht
    · rw [continuous_iff_continuousAt]
      rintro ⟨_, ht⟩
      apply ContinuousAt.comp _ continuousAt_subtype_val
      rw [Subtype.coe_mk]
      exact hγ'.continuousAt ht
  · rw [isOpen_iff_mem_nhds]
    intro t₁ ht₁
    have hmem := Ioo_mem_nhds ht₁.2.1 ht₁.2.2
    have heq : γ =ᶠ[𝓝 t₁] γ' := isIntegralCurveAt_eventuallyEq_of_contMDiffAt
      (hγt _ ht₁.2) hv.contMDiffAt (hγ.isIntegralCurveAt hmem) (hγ'.isIntegralCurveAt hmem) ht₁.1
    apply (heq.and hmem).mono
    exact fun _ ht ↦ ht


Verifying proof (Commit 5b2e142323b7a721e3ae2adce3b172f93a82f823):
 := by
  set s := {t | γ t = γ' t} ∩ Ioo a b with hs
  suffices hsub : Ioo a b ⊆ s from fun t ht ↦ mem_setOf.mp ((subset_def ▸ hsub) t ht).1
  apply isPreconnected_Ioo.subset_of_closure_inter_subset (s := Ioo a b) (u := s) _
    ⟨t₀, ⟨ht₀, ⟨h, ht₀⟩⟩⟩
  · 
    rw [hs, ← Subtype.image_preimage_val, ← Subtype.image_preimage_val,
      image_subset_image_iff Subtype.val_injective, preimage_setOf_eq]
    intros t ht
    rw [mem_preimage, ← closure_subtype] at ht
    revert ht t
    apply IsClosed.closure_subset (isClosed_eq _ _)
    · rw [continuous_iff_continuousAt]
      rintro ⟨_, ht⟩
      apply ContinuousAt.comp _ continuousAt_subtype_val
      rw [Subtype.coe_mk]
      exact hγ.continuousAt ht
    · rw [continuous_iff_continuousAt]
      rintro ⟨_, ht⟩
      apply ContinuousAt.comp _ continuousAt_subtype_val
      rw [Subtype.coe_mk]
      exact hγ'.continuousAt ht
  · rw [isOpen_iff_mem_nhds]
    intro t₁ ht₁
    have hmem := Ioo_mem_nhds ht₁.2.1 ht₁.2.2
    have heq : γ =ᶠ[𝓝 t₁] γ' := isIntegralCurveAt_eventuallyEq_of_contMDiffAt
      (hγt _ ht₁.2) hv.contMDiffAt (hγ.isIntegralCurveAt hmem) (hγ'.isIntegralCurveAt hmem) ht₁.1
    apply (heq.and hmem).mono
    exact fun _ ht ↦ ht

























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































Attempt failure.

Working on Mathlib/GroupTheory/Coxeter/Inversion.lean - 2024-09-07 12:58:35.598365.
---45/100---
For theorem CoxeterSystem.prod_leftInvSeq in Mathlib/GroupTheory/Coxeter/Inversion.lean:
theorem prod_leftInvSeq (ω : List B) : prod (lis ω) = (π ω)⁻¹ 


Original valid proof:
:= by
  simp [leftInvSeq_eq_reverse_rightInvSeq_reverse, prod_reverse_noncomm]
  have : List.map (fun x ↦ x⁻¹) (ris ω.reverse) = ris ω.reverse := calc
    List.map (fun x ↦ x⁻¹) (ris ω.reverse)
    _ = List.map id (ris ω.reverse)             := by
        apply List.map_congr_left
        intro t ht
        exact (cs.isReflection_of_mem_rightInvSeq _ ht).inv
    _ = ris ω.reverse                           := map_id _
  rw [this]
  nth_rw 2 [← reverse_reverse ω]
  rw [wordProd_reverse]
  exact cs.prod_rightInvSeq _


Verifying proof (Commit 50b72355f9be3d47d8653e9a50ac171292df7895):
∧ prod (ris ω) = (π ω) := by
  simp [leftInvSeq_eq_reverse_rightInvSeq_reverse, prod_reverse_noncomm]
  have : List.map (fun x ↦ x⁻¹) (ris ω.reverse) = ris ω.reverse := calc
    List.map (fun x ↦ x⁻¹) (ris ω.reverse)
    _ = List.map id (ris ω.reverse)             := by
        apply List.map_congr
        intro t ht
        exact cs.inv_reflection_eq (cs.isReflection_of_mem_rightInvSeq _ ht)
    _ = ris ω.reverse                           := map_id _
  rw [this]
  nth_rw 2 [← reverse_reverse ω]
  rw [wordProd_reverse]
  exact ⟨cs.prod_rightInvSeq _, cs.prod_leftInvSeq _⟩

## Your Answer

By clicking “Post Your Answer”, you agree to our terms of service, privacy policy and cookie policy

Attempt failure.

---46/100---
For theorem CoxeterSystem.getD_leftInvSeq_mul_wordProd in Mathlib/GroupTheory/Coxeter/Inversion.lean:
theorem getD_leftInvSeq_mul_wordProd (ω : List B) (j : ℕ) :
    ((lis ω).getD j 1) * π ω = π (ω.eraseIdx j) 


Original valid proof:
:= by
  rw [getD_leftInvSeq, eraseIdx_eq_take_drop_succ]
  nth_rw 4 [← take_append_drop (j + 1) ω]
  rw [take_succ]
  obtain lt | le := lt_or_le j ω.length
  · simp only [get?_eq_getElem?, getElem?_eq_getElem lt, wordProd_append, wordProd_cons, mul_assoc]
    simp
  · simp only [get?_eq_getElem?, getElem?_eq_none le]
    simp


Verifying proof (Commit 5549e23620db2b17d4924bff0c4de45d992f0b8d):
 := by
  rw [getD_leftInvSeq, eraseIdx_eq_take_drop_succ]
  nth_rw 4 [← take_append_drop (j + 1) ω]
  rw [take_succ]
  rcases em (j < ω.length) with hj | nhj
  · rw [get?_eq_get hj]
    simp only [wordProd_append, wordProd_cons, mul_assoc]
    simp
  · rw [get?_eq_none.mpr (by linarith)]
    simp

## 1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.

Attempt failure.

Working on Mathlib/GroupTheory/GroupAction/Blocks.lean - 2024-09-07 12:59:05.386624.
---47/100---
For theorem MulAction.IsBlock.isBlockSystem in Mathlib/GroupTheory/GroupAction/Blocks.lean:
theorem IsBlock.isBlockSystem [hGX : MulAction.IsPretransitive G X]
    {B : Set X} (hB : IsBlock G B) (hBe : B.Nonempty) :
    IsBlockSystem G (Set.range fun g : G => g • B) 


Original valid proof:
:= by
  refine ⟨⟨?nonempty, ?cover⟩, ?mem_blocks⟩
  case mem_blocks => rintro B' ⟨g, rfl⟩; exact hB.translate g
  · simp only [Set.mem_range, not_exists]
    intro g hg
    apply hBe.ne_empty
    simpa only [Set.smul_set_eq_empty] using hg
  · intro a
    obtain ⟨b : X, hb : b ∈ B⟩ := hBe
    obtain ⟨g, rfl⟩ := exists_smul_eq G b a
    use g • B
    simp only [Set.smul_mem_smul_set_iff, hb, exists_unique_iff_exists, Set.mem_range,
      exists_apply_eq_apply, exists_const, exists_prop, and_imp, forall_exists_index,
      forall_apply_eq_imp_iff, true_and]
    intro g' ha
    apply (IsBlock.def.mp hB g' g).resolve_right
    rw [Set.not_disjoint_iff]
    refine ⟨g • b, ha, ⟨b, hb, rfl⟩⟩


Verifying proof (Commit 90ee4adef4081d5ea59d0008022888ad5b93d012):
 := by
  constructor
  constructor
  · simp only [Set.mem_range, not_exists]
    intro x hx; apply Set.Nonempty.ne_empty hBe
    rw [← Set.image_eq_empty]
    exact hx
  · intro a
    obtain ⟨b : X, hb : b ∈ B⟩ := hBe
    obtain ⟨g, hab⟩ := exists_smul_eq G b a
    have hg : a ∈ g • B := by
      change a ∈ (fun b => g • b) '' B
      rw [Set.mem_image]
      use b
    use g • B
    constructor
    · simp only [Set.mem_range, exists_apply_eq_apply, exists_unique_iff_exists, exists_true_left]
      exact hg
    · simp only [Set.mem_range, exists_unique_iff_exists, exists_prop, and_imp, forall_exists_index,
        forall_apply_eq_imp_iff']
      intro B' g' hg' ha
      rw [← hg']
      apply symm
      apply Or.resolve_right (IsBlock.def.mp hB g g')
      rw [Set.not_disjoint_iff]
      use a
      rw [hg']
      exact ⟨hg, ha⟩
  rintro B' ⟨g, rfl⟩; exact hB.smul g




















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































Attempt failure.

Working on Mathlib/GroupTheory/Nilpotent.lean - 2024-09-07 12:59:13.553278.
---48/100---
For theorem IsPGroup.isNilpotent in Mathlib/GroupTheory/Nilpotent.lean:
theorem IsPGroup.isNilpotent [Finite G] {p : ℕ} [hp : Fact (Nat.Prime p)] (h : IsPGroup p G) :
    IsNilpotent G 


Original valid proof:
:= by
  cases' nonempty_fintype G
  classical
    revert hG
    apply @Fintype.induction_subsingleton_or_nontrivial _ G _
    · intro _ _ _ _
      infer_instance
    · intro G _ _ ih _ h
      have hcq : Fintype.card (G ⧸ center G) < Fintype.card G := by
        simp only [← Nat.card_eq_fintype_card]
        rw [card_eq_card_quotient_mul_card_subgroup (center G)]
        simp only [Nat.card_eq_fintype_card]
        apply lt_mul_of_one_lt_right
        · exact Fintype.card_pos_iff.mpr One.instNonempty
        · simp only [← Nat.card_eq_fintype_card]
          exact (Subgroup.one_lt_card_iff_ne_bot _).mpr (ne_of_gt h.bot_lt_center)
      have hnq : IsNilpotent (G ⧸ center G) := ih _ hcq (h.to_quotient (center G))
      exact of_quotient_center_nilpotent hnq


Verifying proof (Commit 5618e4318bfd1fcd653dba5baf6373bb64237264):
 := by
  cases' nonempty_fintype G
  classical
    revert hG
    apply @Fintype.induction_subsingleton_or_nontrivial _ G _
    · intro _ _ _ _
      infer_instance
    · intro G _ _ ih _ h
      have hcq : Fintype.card (G ⧸ center G) < Fintype.card G := by
        rw [card_eq_card_quotient_mul_card_subgroup (center G)]
        apply lt_mul_of_one_lt_right
        exact Fintype.card_pos_iff.mpr One.nonempty
        exact (Subgroup.one_lt_card_iff_ne_bot _).mpr (ne_of_gt h.bot_lt_center)
      have hnq : IsNilpotent (G ⧸ center G) := ih _ hcq (h.to_quotient (center G))
      exact of_quotient_center_nilpotent hnq

The problem is that the first proof is not a valid proof, because the first line of the proof is not a valid proof. The first line of the proof is a proof of the statement that ifG is a finite group, then G is nilpotent. This is not a valid proof, because the statement that G is nilpotent is not a valid statement. The statement that G is nilpotent is a valid statement if and only if G is a finite group.

The second proof is a valid proof, because the first line of the proof is a valid proof. The first line of the proof is a proof of the statement that ifG is a finite group, then G is nilpotent. This is a valid proof, because the statement that G is nilpotent is a valid statement. The statement that G is nilpotent is a valid statement if and only if G is a finite group.

The first proof is not a valid proof, because the first line of the proof is not a valid proof. The first line of the proof is a proof of the statement that ifG is a finite group, then G is nilpotent. This is not a valid proof, because the statement that G is nilpotent is not a valid statement. The statement that G is nilpotent is a valid statement if and only if G is a finite group.

The second proof is a valid proof, because the first line of the proof is a valid proof. The first line of the proof is a proof of the statement that ifG is a finite group, then G is nilpotent. This is a valid proof, because the statement that G is nilpotent is a valid statement. The statement that G is nilpotent is a valid statement if and only if G is a finite group.

The first proof is not a valid proof, because the first line of the proof is not a valid proof. The first line of the proof is a proof of the statement that ifG is a finite group, then G is nilpotent. This is not a valid proof, because the statement that G is nilpotent is not a valid statement. The statement that G is nilpotent is a valid statement if and only if G is a finite group.

The second proof is a valid proof, because the first line of the proof is a valid proof. The first line of the proof is a proof of the statement that ifG is a finite group, then G is nilpotent. This is a valid proof, because the statement that G is nilpotent is a valid statement. The statement that G is nilpotent is a valid statement if and only if G is a finite group.

The first proof is not a valid proof, because the first line of the proof is not a valid proof. The first line of the proof is a proof of the statement that ifG is a finite group, then G is nilpotent. This is not a valid proof, because the statement that G is nilpotent is not a valid statement. The statement that G is nilpotent is a valid statement if and only if G is a finite group.

The second proof is a valid proof, because the first line of the proof is a valid proof. The first line of the proof is a proof of the statement that ifG is a finite group, then G is nilpotent. This is a valid proof, because the statement that G is nilpotent is a valid statement. The statement that G is nilpotent is a valid statement if and only if G is a finite group.

The first proof is not a valid proof, because the first line of the proof is not a valid proof. The first line of the proof is a proof of the statement that ifG is a finite group, then G is nilpotent. This is not a valid proof, because the statement that G is nilpotent is not a valid statement. The statement that G is nilpotent is a valid statement if and only if G is a finite group.

The second proof is a valid proof, because the first line of the proof is a valid proof. The first line of the proof is a proof of the statement that ifG is a finite group, then G is nilpotent. This is a valid proof, because the statement that G is nilpotent is a valid statement. The statement that G is nilpotent is a valid statement if and only if G is a finite group.

The first proof is not a valid proof, because the first line of the proof is not a valid proof. The first line of the proof is a proof of the statement that ifG is a finite group, then G is nilpotent. This is not a valid proof, because the statement that G is nilpotent is not a valid statement. The statement that G is nilpotent is a valid statement if and only if G is a finite group.

The second proof is a valid proof, because the first line of the proof is a valid proof. The first line of the proof is a proof of the statement that ifG is a finite group, then G is nilpotent. This is a valid proof, because the statement that G is nilpotent is a valid statement. The statement that G is nilpotent is a valid statement if and only if G is a finite group.

The first proof is not a valid proof, because the first line of the proof is not a valid proof. The first line of the proof is a proof of the statement that ifG is a finite group, then G is nilpotent. This is not a valid proof, because the statement that G is nilpotent is not a valid statement. The statement that G is nilpotent is a valid statement if and only if G is a finite group.

The second proof is a valid proof, because the first line of the proof is a valid proof. The first line of the proof is a proof of the statement that ifG is a finite group, then G is nilpotent. This is a valid proof, because the statement that G is nilpotent is a valid statement. The statement that G is nilpotent is a valid statement if and only if G is a finite group.

The first proof is not a valid proof, because the first line of the proof is not a valid proof. The first line of the proof is a proof of the statement that ifG is a finite group, then G is nilpotent. This is not a valid proof, because the statement that G is nilpotent is not a valid statement. The statement that G is nilpotent is a valid statement if and only if G is a finite group.

The second proof is a valid proof, because the first line of the proof is a valid proof. The first line of the proof is a proof of the statement that ifG is a finite group, then G is nilpotent. This is a valid proof, because the statement that G is nilpotent is a valid statement. The statement that G is nilpotent is a valid statement if and only if G is a finite group.

The first proof is not a valid proof, because the first line of the proof is not a valid proof. The first line of the proof is a proof of the statement that ifG is a finite group, then G is nilpotent. This is not a valid proof, because the statement that G is nilpotent is not a valid statement. The statement that G is nilpotent is a valid statement if and only if G is a finite group.

The second proof is a valid proof, because the first line of the proof is a valid proof. The first line of the proof is a proof of the statement that ifG is a finite group, then G is nilpotent. This is a valid proof, because the statement that G is nilpotent is a valid statement. The statement that G is nilpotent is a valid statement if and only if G is a finite group.

The first proof is not a valid proof, because the first line of the proof is not a valid proof. The first line of the proof is a proof of the statement that ifG is a finite group, then G is nilpotent. This is not a valid proof, because the statement that G is nilpotent is not a valid statement. The statement that G is nilpotent is a valid statement if and only if G is a finite group.

The second proof is a valid proof, because the first line of the proof is a valid proof. The first line of the proof is a proof of the statement that ifG is a finite group, then G is nilpotent. This is a valid proof, because the statement that G is nilpotent is a valid statement. The statement that G is nilpotent is a valid statement if and only if G is a finite group.

The first proof is not a valid proof, because the first line of the proof is not a valid proof. The first line of the proof is a proof of the statement that ifG is a finite group, then G is nilpotent. This is not a valid proof, because the statement that G is nilpotent is not a valid statement

Attempt failure.

Working on Mathlib/LinearAlgebra/AffineSpace/Independent.lean - 2024-09-07 12:59:28.545636.
---49/100---
For theorem exists_subset_affineIndependent_affineSpan_eq_top in Mathlib/LinearAlgebra/AffineSpace/Independent.lean:
theorem exists_subset_affineIndependent_affineSpan_eq_top {s : Set P}
    (h : AffineIndependent k (fun p => p : s → P)) :
    ∃ t : Set P, s ⊆ t ∧ AffineIndependent k (fun p => p : t → P) ∧ affineSpan k t = ⊤ 


Original valid proof:
:= by
  rcases s.eq_empty_or_nonempty with (rfl | ⟨p₁, hp₁⟩)
  · have p₁ : P := AddTorsor.nonempty.some
    let hsv := Basis.ofVectorSpace k V
    have hsvi := hsv.linearIndependent
    have hsvt := hsv.span_eq
    rw [Basis.coe_ofVectorSpace] at hsvi hsvt
    have h0 : ∀ v : V, v ∈ Basis.ofVectorSpaceIndex k V → v ≠ 0 := by
      intro v hv
      simpa [hsv] using hsv.ne_zero ⟨v, hv⟩
    rw [linearIndependent_set_iff_affineIndependent_vadd_union_singleton k h0 p₁] at hsvi
    exact
      ⟨{p₁} ∪ (fun v => v +ᵥ p₁) '' _, Set.empty_subset _, hsvi,
        affineSpan_singleton_union_vadd_eq_top_of_span_eq_top p₁ hsvt⟩
  · rw [affineIndependent_set_iff_linearIndependent_vsub k hp₁] at h
    let bsv := Basis.extend h
    have hsvi := bsv.linearIndependent
    have hsvt := bsv.span_eq
    rw [Basis.coe_extend] at hsvi hsvt
    have hsv := h.subset_extend (Set.subset_univ _)
    have h0 : ∀ v : V, v ∈ h.extend (Set.subset_univ _) → v ≠ 0 := by
      intro v hv
      simpa [bsv] using bsv.ne_zero ⟨v, hv⟩
    rw [linearIndependent_set_iff_affineIndependent_vadd_union_singleton k h0 p₁] at hsvi
    refine ⟨{p₁} ∪ (fun v => v +ᵥ p₁) '' h.extend (Set.subset_univ _), ?_, ?_⟩
    · refine Set.Subset.trans ?_ (Set.union_subset_union_right _ (Set.image_subset _ hsv))
      simp [Set.image_image]
    · use hsvi
      exact affineSpan_singleton_union_vadd_eq_top_of_span_eq_top p₁ hsvt


Verifying proof (Commit 596865180ecc63dcd1d95809202e31027ac3ae38):
 := by
  rcases s.eq_empty_or_nonempty with (rfl | ⟨p₁, hp₁⟩)
  · have p₁ : P := AddTorsor.nonempty.some
    let hsv := Basis.ofVectorSpace k V
    have hsvi := hsv.linearIndependent
    have hsvt := hsv.span_eq
    rw [Basis.coe_ofVectorSpace] at hsvi hsvt
    have h0 : ∀ v : V, v ∈ Basis.ofVectorSpaceIndex _ _ → v ≠ 0 := by
      intro v hv
      simpa [hsv] using hsv.ne_zero ⟨v, hv⟩
    rw [linearIndependent_set_iff_affineIndependent_vadd_union_singleton k h0 p₁] at hsvi
    exact
      ⟨{p₁} ∪ (fun v => v +ᵥ p₁) '' _, Set.empty_subset _, hsvi,
        affineSpan_singleton_union_vadd_eq_top_of_span_eq_top p₁ hsvt⟩
  · rw [affineIndependent_set_iff_linearIndependent_vsub k hp₁] at h
    let bsv := Basis.extend h
    have hsvi := bsv.linearIndependent
    have hsvt := bsv.span_eq
    rw [Basis.coe_extend] at hsvi hsvt
    have hsv := h.subset_extend (Set.subset_univ _)
    have h0 : ∀ v : V, v ∈ h.extend _ → v ≠ 0 := by
      intro v hv
      simpa [bsv] using bsv.ne_zero ⟨v, hv⟩
    rw [linearIndependent_set_iff_affineIndependent_vadd_union_singleton k h0 p₁] at hsvi
    refine ⟨{p₁} ∪ (fun v => v +ᵥ p₁) '' h.extend (Set.subset_univ _), ?_, ?_⟩
    · refine Set.Subset.trans ?_ (Set.union_subset_union_right _ (Set.image_subset _ hsv))
      simp [Set.image_image]
    · use hsvi
      exact affineSpan_singleton_union_vadd_eq_top_of_span_eq_top p₁ hsvt

## References #

- [Hilton, Holton, Pedersen, "Representation of affine spaces by vector spaces", 1995]

## Tags #

affine space, affine map, affine combination, affine independence, affine basis

### Affine combinations #

def AffineCombination.toFun {k : Type u_1} {V : Type u_2} {P : Type u_3} [Ring k] [AddCommGroup V] [Module k V] [AddTorsor V P] (s : Finset ι) (w : ι → k) (p : ι → P) :

P

The function associating to a point in the affine span of a finset the corresponding family of affine weights.

## Equations

- AffineCombination.toFun s w p = ∑ i in s, w i • (p i -ᵥ p s.min)

@[simp]

theorem AffineCombination.toFun_apply {k : Type u_1} {V : Type u_2} {P : Type u_3} [Ring k] [AddCommGroup V] [Module k V] [AddTorsor V P] (s : Finset ι) (w : ι → k) (p : ι → P) (i : ι) :

@[simp]

theorem AffineCombination.toFun_apply_self {k : Type u_1} {V : Type u_2} {P : Type u_3} [Ring k] [AddCommGroup V] [Module k V] [AddTorsor V P] (s : Finset ι) (w : ι → k) (p : ι → P) (hs : s.Nonempty) :

@[simp]

theorem AffineCombination.toFun_apply_of_not_mem {k : Type u_1} {V : Type u_2} {P : Type u_3} [Ring k] [AddCommGroup V] [Module k V] [AddTorsor V P] (s : Finset ι) (w : ι → k) (p : ι → P) (i : ι) (hi : i ∉ s) :

@[simp]

theorem AffineCombination.toFun_apply_of_mem {k : Type u_1} {V : Type u_2} {P : Type u_3} [Ring k] [AddCommGroup V] [Module k V] [AddTorsor V P] (s : Finset ι) (w : ι → k) (p : ι → P) (i : ι) (hi : i ∈ s) :

@[simp]

theorem AffineCombination.toFun_zero {k : Type u_1} {V : Type u_2} {P : Type u_3} [Ring k] [AddCommGroup V] [Module k V] [AddTorsor V P] (s : Finset ι) (w : ι → k) (p : ι → P) :

@[simp]

theorem AffineCombination.toFun_smul {k : Type u_1} {V : Type u_2} {P : Type u_3} [Ring k] [AddCommGroup V] [Module k V] [AddTorsor V P] (s : Finset ι) (w : ι → k) (p : ι → P) (r : k) :

@[simp]

theorem AffineCombination.toFun_add {k : Type u_1} {V : Type u_2} {P : Type u_3} [Ring k] [AddCommGroup V] [Module k V] [AddTorsor V P] (s : Finset ι) (w₁ w₂ : ι → k) (p : ι → P) :

@[simp]

theorem AffineCombination.toFun_sub {k : Type u_1} {V : Type u_2} {P : Type u_3} [Ring k] [AddCommGroup V] [Module k V] [AddTorsor V P] (s : Finset ι) (w₁ w₂ : ι → k) (p : ι → P) :

@[simp]

theorem AffineCombination.toFun_neg {k : Type u_1} {V : Type u_2} {P : Type u_3} [Ring k] [AddCommGroup V] [Module k V] [AddTorsor V P] (s : Finset ι) (w : ι → k) (p : ι → P) :

@[simp]

theorem AffineCombination.toFun_eq_zero_iff {k : Type u_1} {V : Type u_2} {P : Type u_3} [Ring k] [AddCommGroup V] [Module k V] [AddTorsor V P] (s : Finset ι) (w : ι → k) (p : ι → P) :

@[simp]

theorem AffineCombination.toFun_eq_zero {k : Type u_1} {V : Type u_2} {P : Type u_3} [Ring k] [AddCommGroup V] [Module k V] [AddTorsor V P] (s : Finset ι) (w : ι → k) (p : ι → P) (hs : s.Nonempty) :

@[simp]

theorem AffineCombination.toFun_eq_zero_of_not_mem {k : Type u_1} {V : Type u_2} {P : Type u_3} [Ring k] [AddCommGroup V] [Module k V] [AddTorsor V P] (s : Finset ι) (w : ι → k) (p : ι → P) (i : ι) (hi : i ∉ s) :

@[simp]

theorem AffineCombination.

Attempt failure.

Working on Mathlib/LinearAlgebra/Basis/VectorSpace.lean - 2024-09-07 12:59:46.789965.
---50/100---
For theorem nonzero_span_atom in Mathlib/LinearAlgebra/Basis/VectorSpace.lean:
theorem nonzero_span_atom (v : V) (hv : v ≠ 0) : IsAtom (span K {v} : Submodule K V) 


Original valid proof:
:= by
  constructor
  · rw [Submodule.ne_bot_iff]
    exact ⟨v, ⟨mem_span_singleton_self v, hv⟩⟩
  · intro T hT
    by_contra h
    apply hT.2
    change span K {v} ≤ T
    simp_rw [span_singleton_le_iff_mem, ← Ne.eq_def, Submodule.ne_bot_iff] at *
    rcases h with ⟨s, ⟨hs, hz⟩⟩
    rcases mem_span_singleton.1 (hT.1 hs) with ⟨a, rfl⟩
    rcases eq_or_ne a 0 with rfl | h
    · simp only [zero_smul, ne_eq, not_true] at hz
    · rwa [T.smul_mem_iff h] at hs


Verifying proof (Commit cc6e5e01514b06a44caccb55bc04e269ede6a7c8):
 := by
  constructor
  · rw [Submodule.ne_bot_iff]
    exact ⟨v, ⟨mem_span_singleton_self v, hv⟩⟩
  · intro T hT
    by_contra h
    apply hT.2
    change span K {v} ≤ T
    simp_rw [span_singleton_le_iff_mem, ← Ne.def, Submodule.ne_bot_iff] at *
    rcases h with ⟨s, ⟨hs, hz⟩⟩
    rcases mem_span_singleton.1 (hT.1 hs) with ⟨a, rfl⟩
    rcases eq_or_ne a 0 with rfl | h
    · simp only [zero_smul, ne_eq, not_true] at hz
    · rwa [T.smul_mem_iff h] at hs

## 1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1

Attempt failure.

Working on Mathlib/LinearAlgebra/ExteriorAlgebra/Grading.lean - 2024-09-07 12:59:56.147408.
---51/100---
For theorem ExteriorAlgebra.GradedAlgebra.ι_sq_zero in Mathlib/LinearAlgebra/ExteriorAlgebra/Grading.lean:
theorem GradedAlgebra.ι_sq_zero (m : M) : GradedAlgebra.ι R M m * GradedAlgebra.ι R M m = 0 


Original valid proof:
:= by
  rw [GradedAlgebra.ι_apply, DirectSum.of_mul_of]
  exact DFinsupp.single_eq_zero.mpr (Subtype.ext <| ExteriorAlgebra.ι_sq_zero _)


Verifying proof (Commit 5e927760039770855bbf0fe0d5195e10790c094b):
 := by
  rw [GradedAlgebra.ι_apply, DirectSum.of_mul_of]
  refine Dfinsupp.single_eq_zero.mpr (Subtype.ext <| ExteriorAlgebra.ι_sq_zero m)

The problem is that the type ofm is M, not M.ι m.

####  Eric Wieser (Jun 01 2020 at 10:02):

I'm not sure what the best way to fix this is, but I'd be happy to help if you'd like

####  Eric Wieser (Jun 01 2020 at 10:03):

I'm not sure what the best way to fix this is, but I'd be happy to help if you'd like

####  Eric Wieser (Jun 01 2020 at 10:03):

I'm not sure what the best way to fix this is, but I'd be happy to help if you'd like

####  Eric Wieser (Jun 01 2020 at 10:03):

I'm not sure what the best way to fix this is, but I'd be happy to help if you'd like

####  Eric Wieser (Jun 01 2020 at 10:03):

I'm not sure what the best way to fix this is, but I'd be happy to help if you'd like

####  Eric Wieser (Jun 01 2020 at 10:03):

I'm not sure what the best way to fix this is, but I'd be happy to help if you'd like

####  Eric Wieser (Jun 01 2020 at 10:03):

I'm not sure what the best way to fix this is, but I'd be happy to help if you'd like

####  Eric Wieser (Jun 01 2020 at 10:03):

I'm not sure what the best way to fix this is, but I'd be happy to help if you'd like

####  Eric Wieser (Jun 01 2020 at 10:03):

I'm not sure what the best way to fix this is, but I'd be happy to help if you'd like

####  Eric Wieser (Jun 01 2020 at 10:03):

I'm not sure what the best way to fix this is, but I'd be happy to help if you'd like

####  Eric Wieser (Jun 01 2020 at 10:03):

I'm not sure what the best way to fix this is, but I'd be happy to help if you'd like

####  Eric Wieser (Jun 01 2020 at 10:03):

I'm not sure what the best way to fix this is, but I'd be happy to help if you'd like

####  Eric Wieser (Jun 01 2020 at 10:03):

I'm not sure what the best way to fix this is, but I'd be happy to help if you'd like

####  Eric Wieser (Jun 01 2020 at 10:03):

I'm not sure what the best way to fix this is, but I'd be happy to help if you'd like

####  Eric Wieser (Jun 01 2020 at 10:03):

I'm not sure what the best way to fix this is, but I'd be happy to help if you'd like

####  Eric Wieser (Jun 01 2020 at 10:03):

I'm not sure what the best way to fix this is, but I'd be happy to help if you'd like

####  Eric Wieser (Jun 01 2020 at 10:03):

I'm not sure what the best way to fix this is, but I'd be happy to help if you'd like

####  Eric Wieser (Jun 01 2020 at 10:03):

I'm not sure what the best way to fix this is, but I'd be happy to help if you'd like

####  Eric Wieser (Jun 01 2020 at 10:03):

I'm not sure what the best way to fix this is, but I'd be happy to help if you'd like

####  Eric Wieser (Jun 01 2020 at 10:03):

I'm not sure what the best way to fix this is, but I'd be happy to help if you'd like

####  Eric Wieser (Jun 01 2020 at 10:03):

I'm not sure what the best way to fix this is, but I'd be happy to help if you'd like

####  Eric Wieser (Jun 01 2020 at 10:03):

I'm not sure what the best way to fix this is, but I'd be happy to help if you'd like

####  Eric Wieser (Jun 01 2020 at 10:03):

I'm not sure what the best way to fix this is, but I'd be happy to help if you'd like

####  Eric Wieser (Jun 01 2020 at 10:03):

I'm not sure what the best way to fix this is, but I'd be happy to help if you'd like

####  Eric Wieser (Jun 01 2020 at 10:03):

I'm not sure what the best way to fix this is, but I'd be happy to help if you'd like

####  Eric Wieser (Jun 01 2020 at 10:03):

I'm not sure what the best way to fix this is, but I'd be happy to help if you'd like

####  Eric Wieser (Jun 01 2020 at 10:03):

I'm not sure what the best way to fix this is, but I'd be happy to help if you'd like

####  Eric Wieser (Jun 01 2020 at 10:03):

I'm not sure what the best way to fix this is, but I'd be happy to help if you'd like

####  Eric Wieser (Jun 01 2020 at 10:03):

I'm not sure what the best way to fix this is, but I'd be happy to help if you'd like

####  Eric Wieser (Jun 01 2020 at 10:03):

I'm not sure what the best way to fix this is, but I'd be happy to help if you'd like

####  Eric Wieser (Jun 01 2020 at 10:03):

I'm not sure what the best way to fix this is, but I'd be happy to help if you'd like

####  Eric Wieser (Jun 01 2020 at 10:03):

I'm not sure what the best way to fix this is, but I'd be happy to help if you'd like

####  Eric Wieser (Jun 01 2020 at 10:03):

I'm not sure what the best way to fix this is, but I'd be happy to help if you'd like

####  Eric Wieser (Jun 01 2020 at 10:03):

I'm not sure what the best way to fix this is, but I'd be happy to help if you'd like

####  Eric Wieser (Jun 01 2020 at 10:03):

I'm not sure what the best way to fix this is, but I'd be happy to help if you'd like

####  Eric Wieser (Jun 01 2020 at 10:03):

I'm not sure what the best way to fix this is, but I'd be happy to help if you'd like

####  Eric Wieser (Jun 01 2020 at 10:03):

I

Attempt failure.

Working on Mathlib/LinearAlgebra/Reflection.lean - 2024-09-07 13:00:15.513870.
---52/100---
For theorem Module.Dual.eq_of_preReflection_mapsTo in Mathlib/LinearAlgebra/Reflection.lean:
lemma Dual.eq_of_preReflection_mapsTo [CharZero R] [NoZeroSMulDivisors R M]
    {x : M} (hx : x ≠ 0) {Φ : Set M} (hΦ₁ : Φ.Finite) (hΦ₂ : span R Φ = ⊤) {f g : Dual R M}
    (hf₁ : f x = 2) (hf₂ : MapsTo (preReflection x f) Φ Φ)
    (hg₁ : g x = 2) (hg₂ : MapsTo (preReflection x g) Φ Φ) :
    f = g 


Original valid proof:
:= by
  let u := reflection hg₁ * reflection hf₁
  have hu : u = LinearMap.id (R := R) (M := M) + (f - g).smulRight x := by
    ext y
    simp only [u, reflection_apply, hg₁, two_smul, LinearEquiv.coe_toLinearMap_mul,
      LinearMap.id_coe, LinearEquiv.coe_coe, LinearMap.mul_apply, LinearMap.add_apply, id_eq,
      LinearMap.coe_smulRight, LinearMap.sub_apply, map_sub, map_smul, sub_add_cancel_left,
      smul_neg, sub_neg_eq_add, sub_smul]
    abel
  replace hu : ∀ (n : ℕ),
      ↑(u ^ n) = LinearMap.id (R := R) (M := M) + (n : R) • (f - g).smulRight x := by
    intros n
    induction n with
    | zero => simp
    | succ n ih =>
      have : ((f - g).smulRight x).comp ((n : R) • (f - g).smulRight x) = 0 := by
        ext; simp [hf₁, hg₁]
      rw [pow_succ', LinearEquiv.coe_toLinearMap_mul, ih, hu, add_mul, mul_add, mul_add]
      simp_rw [LinearMap.mul_eq_comp, LinearMap.comp_id, LinearMap.id_comp, this, add_zero,
        add_assoc, Nat.cast_succ, add_smul, one_smul]
  suffices IsOfFinOrder u by
    obtain ⟨n, hn₀, hn₁⟩ := isOfFinOrder_iff_pow_eq_one.mp this
    replace hn₁ : (↑(u ^ n) : M →ₗ[R] M) = LinearMap.id := LinearEquiv.toLinearMap_inj.mpr hn₁
    simpa [hn₁, hn₀.ne', hx, sub_eq_zero] using hu n
  exact u.isOfFinOrder_of_finite_of_span_eq_top_of_mapsTo hΦ₁ hΦ₂ (hg₂.comp hf₂)


Verifying proof (Commit 05dd33777bb0a96c66523df7c7d1a34b2d9a1be5):
 := by
  let u := reflection hg₁ * reflection hf₁
  have hu : u = LinearMap.id (R := R) (M := M) + (f - g).smulRight x := by
    ext y
    simp only [u, reflection_apply, hg₁, two_smul, LinearEquiv.coe_toLinearMap_mul,
      LinearMap.id_coe, LinearEquiv.coe_coe, LinearMap.mul_apply, LinearMap.add_apply, id_eq,
      LinearMap.coe_smulRight, LinearMap.sub_apply, map_sub, map_smul, sub_add_cancel', smul_neg,
      sub_neg_eq_add, sub_smul]
    abel
  replace hu : ∀ (n : ℕ),
      ↑(u ^ n) = LinearMap.id (R := R) (M := M) + (n : R) • (f - g).smulRight x := by
    intros n
    induction' n with n ih; simp
    have : ((f - g).smulRight x).comp ((n : R) • (f - g).smulRight x) = 0 := by ext; simp [hf₁, hg₁]
    rw [pow_succ, LinearEquiv.coe_toLinearMap_mul, ih, hu, add_mul, mul_add, mul_add]
    simp_rw [LinearMap.mul_eq_comp, LinearMap.comp_id, LinearMap.id_comp, this, add_zero, add_assoc,
      Nat.cast_succ, add_smul, one_smul]
  suffices IsOfFinOrder u by
    obtain ⟨n, hn₀, hn₁⟩ := isOfFinOrder_iff_pow_eq_one.mp this
    replace hn₁ : (↑(u ^ n) : M →ₗ[R] M) = LinearMap.id := LinearEquiv.toLinearMap_inj.mpr hn₁
    simpa [hn₁, hn₀.ne', hx, sub_eq_zero] using hu n
  exact u.isOfFinOrder_of_finite_of_span_eq_top_of_mapsTo hΦ₁ hΦ₂ (hg₂.comp hf₂)

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

Attempt failure.

Working on Mathlib/LinearAlgebra/TensorProduct/Matrix.lean - 2024-09-07 13:00:28.705568.
---53/100---
For theorem TensorProduct.toMatrix_comm in Mathlib/LinearAlgebra/TensorProduct/Matrix.lean:
theorem TensorProduct.toMatrix_comm :
    toMatrix (bM.tensorProduct bN) (bN.tensorProduct bM) (TensorProduct.comm R M N) =
      (1 : Matrix (ι × κ) (ι × κ) R).submatrix Prod.swap _root_.id 


Original valid proof:
:= by
  ext ⟨i, j⟩ ⟨i', j'⟩
  simp_rw [toMatrix_apply, Basis.tensorProduct_apply, LinearEquiv.coe_coe, TensorProduct.comm_tmul,
    Basis.tensorProduct_repr_tmul_apply, Matrix.submatrix_apply, Basis.repr_self,
    Finsupp.single_apply, @eq_comm _ j', @eq_comm _ i', mul_ite, mul_one, mul_zero,
    Matrix.one_apply, Prod.swap_prod_mk, _root_.id, Prod.ext_iff, ite_and]


Verifying proof (Commit a37325ba17db4b8735587123d2388c63923a3605):
∘ Prod.swap := by
  ext ⟨i, j⟩ ⟨i', j'⟩
  simp_rw [toMatrix_apply, Basis.tensorProduct_apply, LinearEquiv.coe_coe, TensorProduct.comm_tmul,
    Basis.tensorProduct_repr_tmul_apply, Matrix.submatrix_apply, Prod.swap_prod_mk, id.eq_def,
    Basis.repr_self_apply, Matrix.one_apply, Prod.ext_iff, ite_and, @eq_comm _ i', @eq_comm _ j']
  split_ifs <;> simp

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more

Attempt failure.

Working on Mathlib/LinearAlgebra/TensorProduct/Vanishing.lean - 2024-09-07 13:00:38.326698.
---54/100---
For theorem TensorProduct.vanishesTrivially_of_sum_tmul_eq_zero_of_rTensor_injective in Mathlib/LinearAlgebra/TensorProduct/Vanishing.lean:
theorem vanishesTrivially_of_sum_tmul_eq_zero_of_rTensor_injective
    (hm : Injective (rTensor N (span R (Set.range m)).subtype))
    (hmn : ∑ i, m i ⊗ₜ n i = (0 : M ⊗[R] N)) : VanishesTrivially R m n 


Original valid proof:
:= by
  have mem_M' i : m i ∈ span R (Set.range m) := subset_span ⟨i, rfl⟩
  set m' : ι → span R (Set.range m) := Subtype.coind m mem_M' with m'_eq
  have hm' : span R (Set.range m') = ⊤ := by
    apply map_injective_of_injective (injective_subtype (span R (Set.range m)))
    rw [Submodule.map_span, Submodule.map_top, range_subtype, coeSubtype, ← Set.range_comp]
    rfl
  have hm'n : ∑ i, m' i ⊗ₜ n i = (0 : span R (Set.range m) ⊗[R] N) := by
    apply hm
    simp only [m'_eq, map_sum, rTensor_tmul, coeSubtype, Subtype.coind_coe, _root_.map_zero, hmn]
  have : VanishesTrivially R m' n := vanishesTrivially_of_sum_tmul_eq_zero R hm' hm'n
  unfold VanishesTrivially at this ⊢
  convert this with κ _ a y j
  convert (injective_iff_map_eq_zero' _).mp (injective_subtype (span R (Set.range m))) _
  simp [m'_eq]


Verifying proof (Commit 53ef4ce0bcf22cccd58030d7502519c16120d7e5):
 := by
  have mem_M' i : m i ∈ span R (Set.range m) := subset_span ⟨i, rfl⟩
  set m' : ι → span R (Set.range m) := Subtype.coind m mem_M' with m'_eq
  have hm' : span R (Set.range m') = ⊤ := by
    apply map_injective_of_injective (injective_subtype (span R (Set.range m)))
    rw [Submodule.map_span, Submodule.map_top, range_subtype, coeSubtype, ← Set.range_comp]
    rfl
  have hm'n : ∑ i, m' i ⊗ₜ n i = (0 : span R (Set.range m) ⊗[R] N) := by
    apply hm
    simp only [m'_eq, map_sum, rTensor_tmul, coeSubtype, Subtype.coind_coe, _root_.map_zero, hmn]
  have : VanishesTrivially R m' n := vanishesTrivially_of_sum_tmul_eq_zero R m' n hm' hm'n
  unfold VanishesTrivially at this ⊢
  convert this with κ _ a y j
  convert (injective_iff_map_eq_zero' _).mp (injective_subtype (span R (Set.range m))) _
  simp [m'_eq]

## 1.2.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.

Attempt failure.

Working on Mathlib/MeasureTheory/Covering/Differentiation.lean - 2024-09-07 13:00:58.557419.
---55/100---
For theorem VitaliFamily.measure_le_mul_of_subset_limRatioMeas_lt in Mathlib/MeasureTheory/Covering/Differentiation.lean:
theorem measure_le_mul_of_subset_limRatioMeas_lt {p : ℝ≥0} {s : Set α}
    (h : s ⊆ {x | v.limRatioMeas hρ x < p}) : ρ s ≤ p * μ s 


Original valid proof:
:= by
  let t := {x : α | Tendsto (fun a => ρ a / μ a) (v.filterAt x) (𝓝 (v.limRatioMeas hρ x))}
  have A : μ tᶜ = 0 := v.ae_tendsto_limRatioMeas hρ
  suffices H : ρ (s ∩ t) ≤ (p • μ) (s ∩ t) by calc
    ρ s = ρ (s ∩ t ∪ s ∩ tᶜ) := by rw [inter_union_compl]
    _ ≤ ρ (s ∩ t) + ρ (s ∩ tᶜ) := measure_union_le _ _
    _ ≤ (p • μ) (s ∩ t) + ρ tᶜ := by gcongr; apply inter_subset_right
    _ ≤ p * μ (s ∩ t) := by simp [(hρ A)]
    _ ≤ p * μ s := by gcongr; apply inter_subset_left
  refine v.measure_le_of_frequently_le (p • μ) hρ _ fun x hx => ?_
  have I : ∀ᶠ b : Set α in v.filterAt x, ρ b / μ b < p := (tendsto_order.1 hx.2).2 _ (h hx.1)
  apply I.frequently.mono fun a ha => ?_
  rw [coe_nnreal_smul_apply]
  refine (ENNReal.div_le_iff_le_mul ?_ (Or.inr (bot_le.trans_lt ha).ne')).1 ha.le
  simp only [ENNReal.coe_ne_top, Ne, or_true_iff, not_false_iff]


Verifying proof (Commit 2c23e43ba179a9dd2928e06c32f043d20e9798c8):
 := by
  let t := {x : α | Tendsto (fun a => ρ a / μ a) (v.filterAt x) (𝓝 (v.limRatioMeas hρ x))}
  have A : μ (tᶜ) = 0 := v.ae_tendsto_limRatioMeas hρ
  suffices H : ρ (s ∩ t) ≤ (p • μ) (s ∩ t);
  exact
    calc
      ρ s = ρ (s ∩ t ∪ s ∩ tᶜ) := by rw [inter_union_compl]
      _ ≤ ρ (s ∩ t) + ρ (s ∩ tᶜ) := (measure_union_le _ _)
      _ ≤ p * μ (s ∩ t) + 0 :=
        (add_le_add H ((measure_mono (inter_subset_right _ _)).trans (hρ A).le))
      _ ≤ p * μ s := by
        rw [add_zero]; exact mul_le_mul_left' (measure_mono (inter_subset_left _ _)) _
  refine' v.measure_le_of_frequently_le (p • μ) hρ _ fun x hx => _
  have I : ∀ᶠ b : Set α in v.filterAt x, ρ b / μ b < p := (tendsto_order.1 hx.2).2 _ (h hx.1)
  apply I.frequently.mono fun a ha => ?_
  rw [coe_nnreal_smul_apply]
  refine' (ENNReal.div_le_iff_le_mul _ (Or.inr (bot_le.trans_lt ha).ne')).1 ha.le
  simp only [ENNReal.coe_ne_top, Ne.def, or_true_iff, not_false_iff]

I think the problem is that the `ENNReal.div_le_iff_le_mul` lemma is not being used correctly.

####  Yury G. Kudryashov (Jun 02 2020 at 19:00):

I think the problem is that the
ENNReal.div_le_iff_le_mul lemma is not being used correctly.
I don't see how.

####  Yury G. Kudryashov (Jun 02 2020 at 19:00):

I don't see how.

####  Yury G. Kudryashov (Jun 02 2020 at 19:00):

I don't see how.

####  Yury G. Kudryashov (Jun 02 2020 at 19:00):

I don't see how.

####  Yury G. Kudryashov (Jun 02 2020 at 19:00):

I don't see how.

####  Yury G. Kudryashov (Jun 02 2020 at 19:00):

I don't see how.

####  Yury G. Kudryashov (Jun 02 2020 at 19:00):

I don't see how.

####  Yury G. Kudryashov (Jun 02 2020 at 19:00):

I don't see how.

####  Yury G. Kudryashov (Jun 02 2020 at 19:00):

I don't see how.

####  Yury G. Kudryashov (Jun 02 2020 at 19:00):

I don't see how.

####  Yury G. Kudryashov (Jun 02 2020 at 19:00):

I don't see how.

####  Yury G. Kudryashov (Jun 02 2020 at 19:00):

I don't see how.

####  Yury G. Kudryashov (Jun 02 2020 at 19:00):

I don't see how.

####  Yury G. Kudryashov (Jun 02 2020 at 19:00):

I don't see how.

####  Yury G. Kudryashov (Jun 02 2020 at 19:00):

I don't see how.

####  Yury G. Kudryashov (Jun 02 2020 at 19:00):

I don't see how.

####  Yury G. Kudryashov (Jun 02 2020 at 19:00):

I don't see how.

####  Yury G. Kudryashov (Jun 02 2020 at 19:00):

I don't see how.

####  Yury G. Kudryashov (Jun 02 2020 at 19:00):

I don't see how.

####  Yury G. Kudryashov (Jun 02 2020 at 19:00):

I don't see how.

####  Yury G. Kudryashov (Jun 02 2020 at 19:00):

I don't see how.

####  Yury G. Kudryashov (Jun 02 2020 at 19:00):

I don't see how.

####  Yury G. Kudryashov (Jun 02 2020 at 19:00):

I don't see how.

####  Yury G. Kudryashov (Jun 02 2020 at 19:00):

I don't see how.

####  Yury G. Kudryashov (Jun 02 2020 at 19:00):

I don't see how.

####  Yury G. Kudryashov (Jun 02 2020 at 19:00):

I don't see how.

####  Yury G. Kudryashov (Jun 02 2020 at 19:00):

I don't see how.

####  Yury G. Kudryashov (Jun 02 2020 at 19:00):

I don't see how.

####  Yury G. Kudryashov (Jun 02 2020 at 19:00):

I don't see how.

####  Yury G. Kudryashov (Jun 02 2020 at 19:00):

I don't see how.

####  Yury G. Kudryashov (Jun 02 2020 at 19:00):

I don't see how.

####  Yury G. Kudryashov (Jun 02 2020 at 19:00):

I don't see how.

####  Yury G. Kudryashov (Jun 02 2020 at 19:00):

I don't see how.

####  Yury G. Kudryashov (Jun 02 2020 at 19:00):

I don't see how.

####  Yury G. Kudryashov (Jun 02 2020 at 19:00):

I don't see how.

####  Yury G. Kudryashov (Jun 02 2020 at 19:00):

I don't see how.

####  Yury G. Kudryashov (Jun 02 2020 at 19:00):

I don't see how.

####  Yury G. Kudryashov (Jun 02 2020 at 19:00):

I don't see how.

####  Yury G. Kudry

Attempt failure.

Working on Mathlib/MeasureTheory/Decomposition/RadonNikodym.lean - 2024-09-07 13:01:18.346519.
---56/100---
For theorem MeasureTheory.Measure.rnDeriv_withDensity_right_of_absolutelyContinuous in Mathlib/MeasureTheory/Decomposition/RadonNikodym.lean:
lemma rnDeriv_withDensity_right_of_absolutelyContinuous {ν : Measure α} [SigmaFinite μ]
    [SigmaFinite ν] (hμν : μ ≪ ν) (hf : AEMeasurable f ν)
    (hf_ne_zero : ∀ᵐ x ∂ν, f x ≠ 0) (hf_ne_top : ∀ᵐ x ∂ν, f x ≠ ∞) :
    μ.rnDeriv (ν.withDensity f) =ᵐ[ν] fun x ↦ (f x)⁻¹ * μ.rnDeriv ν x 


Original valid proof:
:= by
  have : SigmaFinite (ν.withDensity f) := SigmaFinite.withDensity_of_ne_top hf hf_ne_top
  refine (withDensity_absolutelyContinuous' hf hf_ne_zero).ae_eq ?_
  refine (Measure.eq_rnDeriv₀ (ν := ν.withDensity f) ?_ Measure.MutuallySingular.zero_left ?_).symm
  · exact (hf.inv.mono_ac (withDensity_absolutelyContinuous _ _)).mul
      (Measure.measurable_rnDeriv _ _).aemeasurable
  · ext1 s hs
    conv_lhs => rw [← Measure.withDensity_rnDeriv_eq _ _ hμν]
    rw [zero_add, withDensity_apply _ hs, withDensity_apply _ hs]
    rw [setLIntegral_withDensity_eq_setLIntegral_mul_non_measurable₀ _ _ _ hs]
    · simp only [Pi.mul_apply]
      have : (fun a ↦ f a * ((f a)⁻¹ * μ.rnDeriv ν a)) =ᵐ[ν] μ.rnDeriv ν := by
        filter_upwards [hf_ne_zero, hf_ne_top] with x hx1 hx2
        simp [← mul_assoc, ENNReal.mul_inv_cancel, hx1, hx2]
      rw [lintegral_congr_ae (ae_restrict_of_ae this)]
    · refine ae_restrict_of_ae ?_
      filter_upwards [hf_ne_top] with x hx using hx.lt_top
    · exact hf.restrict


Verifying proof (Commit 0a88f90fd4cfa7135d7bd7e34ca7799b79b40573):
 := by
  have : SigmaFinite (ν.withDensity f) := SigmaFinite.withDensity_of_ne_top hf hf_ne_top
  refine (withDensity_absolutelyContinuous' hf hf_ne_zero hf_ne_top).ae_eq ?_
  refine (Measure.eq_rnDeriv₀ (ν := ν.withDensity f) ?_ Measure.MutuallySingular.zero_left ?_).symm
  · exact (hf.inv.mono_ac (withDensity_absolutelyContinuous _ _)).mul
      (Measure.measurable_rnDeriv _ _).aemeasurable
  · ext1 s hs
    conv_lhs => rw [← Measure.withDensity_rnDeriv_eq _ _ hμν]
    rw [zero_add, withDensity_apply _ hs, withDensity_apply _ hs]
    rw [set_lintegral_withDensity_eq_set_lintegral_mul_non_measurable₀ _ _ _ hs]
    · simp only [Pi.mul_apply]
      have : (fun a ↦ f a * ((f a)⁻¹ * μ.rnDeriv ν a)) =ᵐ[ν] μ.rnDeriv ν := by
        filter_upwards [hf_ne_zero, hf_ne_top] with x hx1 hx2
        simp [← mul_assoc, ENNReal.mul_inv_cancel, hx1, hx2]
      rw [lintegral_congr_ae (ae_restrict_of_ae this)]
    · refine ae_restrict_of_ae ?_
      filter_upwards [hf_ne_top] with x hx using hx.lt_top
    · exact hf.restrict

## References #

- [Halmos, Measure Theory, §52][halmos1950]
- [Williams, Probability with Martingales, (5.22), p.117][williams1991]

## Tags #

Radon-Nikodym derivative

### The Radon-Nikodym derivative #

The Radon-Nikodym derivative of a measureμ with respect to a measure ν is a measurable
function f : α → ℝ≥0∞ such that μ x = ∫⁻ y in set.Ioc x ∞, f y ∂ν for all x : α.

The Radon-Nikodym derivative of a measureμ with respect to a measure ν is a measurable
function f : α → ℝ≥0∞ such that μ x = ∫⁻ y in set.Ioc x ∞, f y ∂ν for all x : α.

The Radon-Nikodym derivative of a measureμ with respect to a measure ν is a measurable
function f : α → ℝ≥0∞ such that μ x = ∫⁻ y in set.Ioc x ∞, f y ∂ν for all x : α.

The Radon-Nikodym derivative of a measureμ with respect to a measure ν is a measurable
function f : α → ℝ≥0∞ such that μ x = ∫⁻ y in set.Ioc x ∞, f y ∂ν for all x : α.

The Radon-Nikodym derivative of a measureμ with respect to a measure ν is a measurable
function f : α → ℝ≥0∞ such that μ x = ∫⁻ y in set.Ioc x ∞, f y ∂ν for all x : α.

The Radon-Nikodym derivative of a measureμ with respect to a measure ν is a measurable
function f : α → ℝ≥0∞ such that μ x = ∫⁻ y in set.Ioc x ∞, f y ∂ν for all x : α.

The Radon-Nikodym derivative of a measureμ with respect to a measure ν is a measurable
function f : α → ℝ≥0∞ such that μ x = ∫⁻ y in set.Ioc x ∞, f y ∂ν for all x : α.

The Radon-Nikodym derivative of a measureμ with respect to a measure ν is a measurable
function f : α → ℝ≥0∞ such that μ x = ∫⁻ y in set.Ioc x ∞, f y ∂ν for all x : α.

The Radon-Nikodym derivative of a measureμ with respect to a measure ν is a measurable
function f : α → ℝ≥0∞ such that μ x = ∫⁻ y in set.Ioc x ∞, f y ∂ν for all x : α.

The Radon-Nikodym derivative of a measureμ with respect to a measure ν is a measurable
function f : α → ℝ≥0∞ such that μ x = ∫⁻ y in set.Ioc x ∞, f y ∂ν for all x : α.

The Radon-Nikodym derivative of a measureμ with respect to a measure ν is a measurable
function f : α → ℝ≥0∞ such that μ x = ∫⁻ y in set.Ioc x ∞, f y ∂ν for all x : α.

The Radon-Nikodym derivative of a measureμ with respect to a measure ν is a measurable
function f : α → ℝ≥0∞ such that μ x = ∫⁻ y in set.Ioc x ∞, f y ∂ν for all x : α.

The Radon-Nikodym derivative of a measureμ with respect to a measure ν is a measurable
function f : α → ℝ≥0∞ such that μ x = ∫⁻ y in set.Ioc x ∞, f y ∂ν for all x : α.

The Radon-Nikodym derivative of a measureμ with respect to a measure ν is a measurable
function f : α → ℝ≥0∞ such that μ x = ∫⁻ y in set.Ioc x ∞, f y ∂ν for all x : α.

The Radon-Nikodym derivative of a measureμ with respect to a measure ν is a measurable
function f : α → ℝ≥0∞ such that μ x = ∫⁻ y in set.Ioc x ∞, f y ∂ν for all x : α.

The Radon-Nikodym derivative of a measureμ with respect to a measure ν is a measurable
function f : α → ℝ≥0∞ such that μ x = ∫⁻ y in set.Ioc x ∞, f y ∂ν for all x : α.

The Radon-Nikodym derivative of a measureμ with respect to a measure ν is a measurable
function f : α → ℝ≥0∞ such that μ x = ∫⁻ y in set.Ioc x ∞, f y ∂ν for all x : α.

The Radon-Nikodym derivative of a measureμ with respect to a measure ν is a measurable
function f : α → ℝ≥0∞ such that μ x = ∫⁻ y in set.Ioc x ∞, f y ∂ν for all x : α.

The Radon-Nikodym derivative of a measureμ with respect to a measure ν is a measurable
function f : α → ℝ≥0∞ such that μ x = ∫⁻ y in set.Ioc x ∞, f y ∂ν for all x : α.

The Radon-Nikodym derivative of a measureμ with respect to a measure ν is a measurable
function f : α → ℝ≥0∞ such that μ x = ∫⁻ y in set.Ioc x ∞, f y ∂ν for all x : α.

The Radon-Nikodym derivative of a measureμ with respect to a measure ν is a measurable
function f : α → ℝ≥0∞ such that μ x = ∫⁻ y in set.Ioc x ∞, f y ∂ν for all x : α.

The Radon-Nikodym derivative of a measureμ with respect to a measure ν is a measurable
function f : α → ℝ≥0∞ such that μ x = ∫⁻ y in set.Ioc x ∞, f y ∂ν for all x : α.

The Radon-Nikodym derivative of a measureμ with respect to a measure ν is a measurable
function f : α → ℝ≥0∞ such that μ x = ∫⁻ y in set.Ioc x ∞, f y ∂ν

Attempt failure.

---57/100---
For theorem MeasureTheory.Measure.lintegral_rnDeriv in Mathlib/MeasureTheory/Decomposition/RadonNikodym.lean:
lemma lintegral_rnDeriv [HaveLebesgueDecomposition μ ν] (hμν : μ ≪ ν) :
    ∫⁻ x, μ.rnDeriv ν x ∂ν = μ Set.univ 


Original valid proof:
:= by
  rw [← setLIntegral_univ, setLIntegral_rnDeriv' hμν MeasurableSet.univ]


Verifying proof (Commit 069e96204afb60639e37cc18449fd7f58ab913c1):
∧ ∫⁻ x, ν.rnDeriv μ x ∂μ = ν Set.univ := by
  rw [← set_lintegral_univ, set_lintegral_rnDeriv hμν MeasurableSet.univ]

####  Floris van Doorn (Jun 03 2020 at 10:02):

I think the problem is that the proof ofset_lintegral_rnDeriv is not a simp lemma.

####  Floris van Doorn (Jun 03 2020 at 10:03):

I think the problem is that the proof ofset_lintegral_rnDeriv is not a simp lemma.

####  Floris van Doorn (Jun 03 2020 at 10:03):

I think the problem is that the proof ofset_lintegral_rnDeriv is not a simp lemma.

####  Floris van Doorn (Jun 03 2020 at 10:03):

I think the problem is that the proof ofset_lintegral_rnDeriv is not a simp lemma.

####  Floris van Doorn (Jun 03 2020 at 10:04):

I think the problem is that the proof ofset_lintegral_rnDeriv is not a simp lemma.

####  Floris van Doorn (Jun 03 2020 at 10:04):

I think the problem is that the proof ofset_lintegral_rnDeriv is not a simp lemma.

####  Floris van Doorn (Jun 03 2020 at 10:04):

I think the problem is that the proof ofset_lintegral_rnDeriv is not a simp lemma.

####  Floris van Doorn (Jun 03 2020 at 10:04):

I think the problem is that the proof ofset_lintegral_rnDeriv is not a simp lemma.

####  Floris van Doorn (Jun 03 2020 at 10:04):

I think the problem is that the proof ofset_lintegral_rnDeriv is not a simp lemma.

####  Floris van Doorn (Jun 03 2020 at 10:04):

I think the problem is that the proof ofset_lintegral_rnDeriv is not a simp lemma.

####  Floris van Doorn (Jun 03 2020 at 10:04):

I think the problem is that the proof ofset_lintegral_rnDeriv is not a simp lemma.

####  Floris van Doorn (Jun 03 2020 at 10:04):

I think the problem is that the proof ofset_lintegral_rnDeriv is not a simp lemma.

####  Floris van Doorn (Jun 03 2020 at 10:04):

I think the problem is that the proof ofset_lintegral_rnDeriv is not a simp lemma.

####  Floris van Doorn (Jun 03 2020 at 10:04):

I think the problem is that the proof ofset_lintegral_rnDeriv is not a simp lemma.

####  Floris van Doorn (Jun 03 2020 at 10:04):

I think the problem is that the proof ofset_lintegral_rnDeriv is not a simp lemma.

####  Floris van Doorn (Jun 03 2020 at 10:04):

I think the problem is that the proof ofset_lintegral_rnDeriv is not a simp lemma.

####  Floris van Doorn (Jun 03 2020 at 10:04):

I think the problem is that the proof ofset_lintegral_rnDeriv is not a simp lemma.

####  Floris van Doorn (Jun 03 2020 at 10:04):

I think the problem is that the proof ofset_lintegral_rnDeriv is not a simp lemma.

####  Floris van Doorn (Jun 03 2020 at 10:04):

I think the problem is that the proof ofset_lintegral_rnDeriv is not a simp lemma.

####  Floris van Doorn (Jun 03 2020 at 10:04):

I think the problem is that the proof ofset_lintegral_rnDeriv is not a simp lemma.

####  Floris van Doorn (Jun 03 2020 at 10:04):

I think the problem is that the proof ofset_lintegral_rnDeriv is not a simp lemma.

####  Floris van Doorn (Jun 03 2020 at 10:04):

I think the problem is that the proof ofset_lintegral_rnDeriv is not a simp lemma.

####  Floris van Doorn (Jun 03 2020 at 10:04):

I think the problem is that the proof ofset_lintegral_rnDeriv is not a simp lemma.

####  Floris van Doorn (Jun 03 2020 at 10:04):

I think the problem is that the proof ofset_lintegral_rnDeriv is not a simp lemma.

####  Floris van Doorn (Jun 03 2020 at 10:04):

I think the problem is that the proof ofset_lintegral_rnDeriv is not a simp lemma.

####  Floris van Doorn (Jun 03 2020 at 10:04):

I think the problem is that the proof ofset_lintegral_rnDeriv is not a simp lemma.

####  Floris van Doorn (Jun 03 2020 at 10:04):

I think the problem is that the proof ofset_lintegral_rnDeriv is not a simp lemma.

####  Floris van Doorn (Jun 03 2020 at 10:04):

I think the problem is that the proof ofset_lintegral_rnDeriv is not a simp lemma.

####  Floris van Doorn (Jun 03 2020 at 10:04):

I think the problem is that the proof ofset_lintegral_rnDeriv is not a simp lemma.

####  Floris van Doorn (Jun 03 2020 at 10:04):

I think the problem is that the proof ofset_lintegral_rnDeriv is not a simp lemma.

####  Floris van Doorn (Jun 03 2020 at 10:04):

I think the problem is that the proof ofset_lintegral_rnDeriv is not a simp lemma.

####  Floris van Doorn (Jun 03 2020 at 10:04):

I think the problem is that the proof ofset_lintegral_rnDeriv is not a simp lemma.

####  Floris van Doorn (Jun 03 2020 at 10:04):

I think the problem is that the proof ofset_lintegral_rnDeriv is not a simp lemma.

####  Floris van Doorn (Jun 03 2020 at 10:04):

I think the problem is that the proof ofset_lintegral_rnDeriv is not a simp lemma.

####  Floris van Doorn (Jun 03 2020 at 10:04):

I think the problem is that the proof ofset_lintegral_rnDeriv is not a simp lemma.

####  Floris van Doorn (Jun 03 2020 at 10:04):

I think the problem is that the proof ofset_lintegral_rnDeriv is not a simp lemma.

####  Floris van Doorn (Jun 03 2020 at 10:04):

I think the problem is that the proof ofset_linte

Attempt failure.

Working on Mathlib/MeasureTheory/Function/StronglyMeasurable/Basic.lean - 2024-09-07 13:01:42.009767.
---58/100---
For theorem MeasureTheory.AEStronglyMeasurable.sum_measure in Mathlib/MeasureTheory/Function/StronglyMeasurable/Basic.lean:
theorem sum_measure [PseudoMetrizableSpace β] {m : MeasurableSpace α} {μ : ι → Measure α}
    (h : ∀ i, AEStronglyMeasurable f (μ i)) : AEStronglyMeasurable f (Measure.sum μ) 


Original valid proof:
:= by
  borelize β
  refine
    aestronglyMeasurable_iff_aemeasurable_separable.2
      ⟨AEMeasurable.sum_measure fun i => (h i).aemeasurable, ?_⟩
  have A : ∀ i : ι, ∃ t : Set β, IsSeparable t ∧ f ⁻¹' t ∈ ae (μ i) := fun i =>
    (aestronglyMeasurable_iff_aemeasurable_separable.1 (h i)).2
  choose t t_sep ht using A
  refine ⟨⋃ i, t i, .iUnion t_sep, ?_⟩
  simp only [Measure.ae_sum_eq, mem_iUnion, eventually_iSup]
  intro i
  filter_upwards [ht i] with x hx
  exact ⟨i, hx⟩


Verifying proof (Commit a36d8932e98ea1d7efcdd316318586a6329f53a3):
 := by
  borelize β
  refine'
    aestronglyMeasurable_iff_aemeasurable_separable.2
      ⟨AEMeasurable.sum_measure fun i => (h i).aemeasurable, _⟩
  have A : ∀ i : ι, ∃ t : Set β, IsSeparable t ∧ f ⁻¹' t ∈ (μ i).ae := fun i =>
    (aestronglyMeasurable_iff_aemeasurable_separable.1 (h i)).2
  choose t t_sep ht using A
  refine ⟨⋃ i, t i, .iUnion t_sep, ?_⟩
  simp only [Measure.ae_sum_eq, mem_iUnion, eventually_iSup]
  intro i
  filter_upwards [ht i] with x hx
  exact ⟨i, hx⟩

####  Yury G. Kudryashov (Nov 13 2020 at 00:03):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (Nov 13 2020 at 00:04):

I think the problem is that you're usingi in two different ways.

####  Yury G. Kudryashov (Nov 13 2020 at 00:04):

In the first line,i is a bound variable, and in the second line, it's a free variable.

####  Yury G. Kudryashov (Nov 13 2020 at 00:05):

I think you can fix it by changingi to j in the second line.

####  Yury G. Kudryashov (Nov 13 2020 at 00:05):

(I'm not sure that this is a bug, but I'm sure that this is a bad style.)

####  Yury G. Kudryashov (Nov 13 2020 at 00:06):

(I'm not sure that this is a bug, but I'm sure that this is a bad style.)

####  Yury G. Kudryashov (Nov 13 2020 at 00:06):

(I'm not sure that this is a bug, but I'm sure that this is a bad style.)

####  Yury G. Kudryashov (Nov 13 2020 at 00:06):

(I'm not sure that this is a bug, but I'm sure that this is a bad style.)

####  Yury G. Kudryashov (Nov 13 2020 at 00:06):

(I'm not sure that this is a bug, but I'm sure that this is a bad style.)

####  Yury G. Kudryashov (Nov 13 2020 at 00:06):

(I'm not sure that this is a bug, but I'm sure that this is a bad style.)

####  Yury G. Kudryashov (Nov 13 2020 at 00:06):

(I'm not sure that this is a bug, but I'm sure that this is a bad style.)

####  Yury G. Kudryashov (Nov 13 2020 at 00:06):

(I'm not sure that this is a bug, but I'm sure that this is a bad style.)

####  Yury G. Kudryashov (Nov 13 2020 at 00:06):

(I'm not sure that this is a bug, but I'm sure that this is a bad style.)

####  Yury G. Kudryashov (Nov 13 2020 at 00:06):

(I'm not sure that this is a bug, but I'm sure that this is a bad style.)

####  Yury G. Kudryashov (Nov 13 2020 at 00:06):

(I'm not sure that this is a bug, but I'm sure that this is a bad style.)

####  Yury G. Kudryashov (Nov 13 2020 at 00:06):

(I'm not sure that this is a bug, but I'm sure that this is a bad style.)

####  Yury G. Kudryashov (Nov 13 2020 at 00:06):

(I'm not sure that this is a bug, but I'm sure that this is a bad style.)

####  Yury G. Kudryashov (Nov 13 2020 at 00:06):

(I'm not sure that this is a bug, but I'm sure that this is a bad style.)

####  Yury G. Kudryashov (Nov 13 2020 at 00:06):

(I'm not sure that this is a bug, but I'm sure that this is a bad style.)

####  Yury G. Kudryashov (Nov 13 2020 at 00:06):

(I'm not sure that this is a bug, but I'm sure that this is a bad style.)

####  Yury G. Kudryashov (Nov 13 2020 at 00:06):

(I'm not sure that this is a bug, but I'm sure that this is a bad style.)

####  Yury G. Kudryashov (Nov 13 2020 at 00:06):

(I'm not sure that this is a bug, but I'm sure that this is a bad style.)

####  Yury G. Kudryashov (Nov 13 2020 at 00:06):

(I'm not sure that this is a bug, but I'm sure that this is a bad style.)

####  Yury G. Kudryashov (Nov 13 2020 at 00:06):

(I'm not sure that this is a bug, but I'm sure that this is a bad style.)

####  Yury G. Kudryashov (Nov 13 2020 at 00:06):

(I'm not sure that this is a bug, but I'm sure that this is a bad style.)

####  Yury G. Kudryashov (Nov 13 2020 at 00:06):

(I'm not sure that this is a bug, but I'm sure that this is a bad style.)

####  Yury G. Kudryashov (Nov 13 2020 at 00:06):

(I'm not sure that this is a bug, but I'm sure that this is a bad style.)

####  Yury G. Kudryashov (Nov 13 2020 at 00:06):

(I'm not sure that this is a bug, but I'm sure that this is a bad style.)

####  Yury G. Kudryashov (Nov 13 2020 at 00:06):

(I'm not sure that this is a bug, but I'm sure that this is a bad style.)

####  Yury G. Kudryashov (Nov 13 2020 at 00:06):

(I'm not sure that this is a bug, but I'm sure that this is a bad style.)

####  Yury G. Kudryashov (Nov 13 2020 at 00:06):

(I'm not sure that this is a bug, but I'm sure that this is a bad style.)

####  Yury G. Kudryashov (Nov 13 2020 at 00:06):

(I'm not sure that this is a bug, but I'm sure that this is a bad style.)

####  Yury G. Kudryashov (Nov 13 2020 at 0

Attempt failure.

Working on Mathlib/MeasureTheory/Group/Action.lean - 2024-09-07 13:01:59.587477.
---59/100---
For theorem MeasureTheory.smulInvariantMeasure_tfae in Mathlib/MeasureTheory/Group/Action.lean:
theorem smulInvariantMeasure_tfae :
    List.TFAE
      [SMulInvariantMeasure G α μ,
        ∀ (c : G) (s), MeasurableSet s → μ ((c • ·) ⁻¹' s) = μ s,
        ∀ (c : G) (s), MeasurableSet s → μ (c • s) = μ s,
        ∀ (c : G) (s), μ ((c • ·) ⁻¹' s) = μ s,
        ∀ (c : G) (s), μ (c • s) = μ s,
        ∀ c : G, Measure.map (c • ·) μ = μ,
        ∀ c : G, MeasurePreserving (c • ·) μ μ] 


Original valid proof:
:= by
  tfae_have 1 ↔ 2
  · exact ⟨fun h => h.1, fun h => ⟨h⟩⟩
  tfae_have 1 → 6
  · intro h c
    exact (measurePreserving_smul c μ).map_eq
  tfae_have 6 → 7
  · exact fun H c => ⟨measurable_const_smul c, H c⟩
  tfae_have 7 → 4
  · exact fun H c => (H c).measure_preimage_emb (measurableEmbedding_const_smul c)
  tfae_have 4 → 5
  · exact fun H c s => by
      rw [← preimage_smul_inv]
      apply H
  tfae_have 5 → 3
  · exact fun H c s _ => H c s
  tfae_have 3 → 2
  · intro H c s hs
    rw [preimage_smul]
    exact H c⁻¹ s hs
  tfae_finish


Verifying proof (Commit 58de6a1c33e964db25c184d0d1809e6b5b414b50):
↔
      (∀ c : G, Measure.map (c • ·) μ = μ) ∧ ∀ c : G, MeasurePreserving (c • ·) μ μ := by
  tfae_have : 1 ↔ 2
  | ⟨h, _⟩, c, s, hs => h c s hs
  | ⟨_, h⟩, c, s, hs => ⟨fun h => ⟨h, h c s hs⟩, fun h => h.1⟩
  tfae_have : 1 ↔ 3
  | ⟨h, _⟩, c, s, hs => h c s hs
  | ⟨_, h⟩, c, s, hs => ⟨fun h => ⟨h, h c s hs⟩, fun h => h.2⟩
  tfae_have : 1 ↔ 4
  | ⟨h, _⟩, c, s, hs => h c s hs
  | ⟨_, h⟩, c, s, hs => ⟨fun h => ⟨h, h c s hs⟩, fun h => h.1⟩
  tfae_have : 1 ↔ 5
  | ⟨h, _⟩, c, s, hs => h c s hs
  | ⟨_, h⟩, c, s, hs => ⟨fun h => ⟨h, h c s hs⟩, fun h => h.2⟩
  tfae_have : 1 ↔ 6
  | ⟨h, _⟩, c => ⟨h, h c⟩
  | ⟨_, h⟩, c => ⟨fun h => h c, fun h => h⟩
  tfae_have : 1 ↔ 7
  | ⟨h, _⟩, c => ⟨h, h c⟩
  | ⟨_, h⟩, c => ⟨fun h => h c, fun h => h⟩
  tfae_have : 6 ↔ 7
  | h, c => ⟨fun h => ⟨h, h c⟩, fun h => h.1⟩
  tfae_finish

## Equations

- MeasureTheory.Measure.smulInvariantMeasure.toSMulInvariantMeasure μ = { toSMulInvariantMeasure' := (_ : ∀ (c : G) (s : Set α), MeasurableSet s → ↑↑μ (c • s) = ↑↑μ s) }

theorem MeasureTheory.Measure.smulInvariantMeasure.of_map_eq {G : Type u_1} {α : Type u_2} [inst : MeasurableSpace α] {μ : Measure α} [inst : SMul G α] (h : ∀ (c : G), Measure.map (c • ·) μ = μ) :

theorem MeasureTheory.Measure.smulInvariantMeasure.of_map_eq' {G : Type u_1} {α : Type u_2} [inst : MeasurableSpace α] {μ : Measure α} [inst : SMul G α] (h : ∀ (c : G), Measure.map (c • ·) μ = μ) :

theorem MeasureTheory.Measure.smulInvariantMeasure.of_map_eq_self {G : Type u_1} {α : Type u_2} [inst : MeasurableSpace α] {μ : Measure α} [inst : SMul G α] (h : ∀ (c : G), Measure.map (c • ·) μ = μ) (c : G) (s : Set α) :

theorem MeasureTheory.Measure.smulInvariantMeasure.of_map_eq_self' {G : Type u_1} {α : Type u_2} [inst : MeasurableSpace α] {μ : Measure α} [inst : SMul G α] (h : ∀ (c : G), Measure.map (c • ·) μ = μ) (c : G) (s : Set α) :

theorem MeasureTheory.Measure.smulInvariantMeasure.of_map_eq_self_of_isClosed {G : Type u_1} {α : Type u_2} [inst : MeasurableSpace α] {μ : Measure α} [inst : SMul G α] (h : ∀ (c : G), Measure.map (c • ·) μ = μ) (c : G) (s : Set α) (hs : IsClosed s) :

theorem MeasureTheory.Measure.smulInvariantMeasure.of_map_eq_self_of_isClosed' {G : Type u_1} {α : Type u_2} [inst : MeasurableSpace α] {μ : Measure α} [inst : SMul G α] (h : ∀ (c : G), Measure.map (c • ·) μ = μ) (c : G) (s : Set α) (hs : IsClosed s) :

theorem MeasureTheory.Measure.smulInvariantMeasure.of_map_eq_self_of_isCompact {G : Type u_1} {α : Type u_2} [inst : MeasurableSpace α] {μ : Measure α} [inst : SMul G α] (h : ∀ (c : G), Measure.map (c • ·) μ = μ) (c : G) (s : Set α) (hs : IsCompact s) :

theorem MeasureTheory.Measure.smulInvariantMeasure.of_map_eq_self_of_isCompact' {G : Type u_1} {α : Type u_2} [inst : MeasurableSpace α] {μ : Measure α} [inst : SMul G α] (h : ∀ (c : G), Measure.map (c • ·) μ = μ) (c : G) (s : Set α) (hs : IsCompact s) :

theorem MeasureTheory.Measure.smulInvariantMeasure.of_map_eq_self_of_isCompact_of_isClosed {G : Type u_1} {α : Type u_2} [inst : MeasurableSpace α] {μ : Measure α} [inst : SMul G α] (h : ∀ (c : G), Measure.map (c • ·) μ = μ) (c : G) (s : Set α) (hs : IsCompact s) (hs' : IsClosed s) :

theorem MeasureTheory.Measure.smulInvariantMeasure.of_map_eq_self_of_isCompact_of_isClosed' {G : Type u_1} {α : Type u_2} [inst : MeasurableSpace α] {μ : Measure α} [inst : SMul G α] (h : ∀ (c : G), Measure.map (c • ·) μ = μ) (c : G) (s : Set α) (hs : IsCompact s) (hs' : IsClosed s) :

theorem MeasureTheory.Measure.smulInvariantMeasure.of_map_eq_self_of_isCompact_of_isClosed_of_nonempty {G : Type u_1} {α : Type u_2} [inst : MeasurableSpace α] {μ : Measure α} [inst : SMul G α] (h : ∀ (c : G), Measure.map (c • ·) μ = μ) (c : G) (s : Set α) (hs : IsCompact s) (hs' : IsClosed s) (hs'' : Set.Nonempty s) :

theorem MeasureTheory.Measure.smulInvariantMeasure.of_map_eq_self_of_isCompact_of_isClosed_of_nonempty' {G : Type u_1} {α : Type u_2} [inst : MeasurableSpace α] {μ : Measure α} [inst : SMul G α] (h : ∀ (c : G), Measure.map (c • ·) μ = μ) (c : G) (s : Set α) (hs : IsCompact s) (hs' : IsClosed s) (hs'' : Set.Nonempty s) :

theorem MeasureTheory.Measure.smulInvariantMeasure.of_map_eq_self_of_isCompact_of_isClosed_of_nonempty_of_isPreconnected {G : Type u_1} {α : Type u_2} [inst : MeasurableSpace α] {μ : Measure α} [

Attempt failure.

Working on Mathlib/MeasureTheory/Integral/TorusIntegral.lean - 2024-09-07 13:02:11.306141.
---60/100---
For theorem torusIntegral_succ in Mathlib/MeasureTheory/Integral/TorusIntegral.lean:
theorem torusIntegral_succAbove {f : ℂⁿ⁺¹ → E} {c : ℂⁿ⁺¹} {R : ℝⁿ⁺¹} (hf : TorusIntegrable f c R)
    (i : Fin (n + 1)) :
    (∯ x in T(c, R), f x) =
      ∮ x in C(c i, R i), ∯ y in T(c ∘ i.succAbove, R ∘ i.succAbove), f (i.insertNth x y) 


Original valid proof:
:= by
  set e : ℝ × ℝⁿ ≃ᵐ ℝⁿ⁺¹ := (MeasurableEquiv.piFinSuccAbove (fun _ => ℝ) i).symm
  have hem : MeasurePreserving e :=
    (volume_preserving_piFinSuccAbove (fun _ : Fin (n + 1) => ℝ) i).symm _
  have heπ : (e ⁻¹' Icc 0 fun _ => 2 * π) = Icc 0 (2 * π) ×ˢ Icc (0 : ℝⁿ) fun _ => 2 * π :=
    ((OrderIso.piFinSuccAboveIso (fun _ => ℝ) i).symm.preimage_Icc _ _).trans (Icc_prod_eq _ _)
  rw [torusIntegral, ← hem.map_eq, setIntegral_map_equiv, heπ, Measure.volume_eq_prod,
    setIntegral_prod, circleIntegral_def_Icc]
  · refine setIntegral_congr measurableSet_Icc fun θ _ => ?_
    simp (config := { unfoldPartialApp := true }) only [e, torusIntegral, ← integral_smul,
      deriv_circleMap, i.prod_univ_succAbove _, smul_smul, torusMap, circleMap_zero]
    refine setIntegral_congr measurableSet_Icc fun Θ _ => ?_
    simp only [MeasurableEquiv.piFinSuccAbove_symm_apply, i.insertNth_apply_same,
      i.insertNth_apply_succAbove, (· ∘ ·)]
    congr 2
    simp only [funext_iff, i.forall_iff_succAbove, circleMap, Fin.insertNth_apply_same,
      eq_self_iff_true, Fin.insertNth_apply_succAbove, imp_true_iff, and_self_iff]
  · have := hf.function_integrable
    rwa [← hem.integrableOn_comp_preimage e.measurableEmbedding, heπ] at this


Verifying proof (Commit 878024beabe74d3476b6e31acfd90d64e274a958):
 := by
  set e : ℝ × ℝⁿ ≃ᵐ ℝⁿ⁺¹ := (MeasurableEquiv.piFinSuccAboveEquiv (fun _ => ℝ) i).symm
  have hem : MeasurePreserving e :=
    (volume_preserving_piFinSuccAboveEquiv (fun _ : Fin (n + 1) => ℝ) i).symm _
  have heπ : (e ⁻¹' Icc 0 fun _ => 2 * π) = Icc 0 (2 * π) ×ˢ Icc (0 : ℝⁿ) fun _ => 2 * π :=
    ((OrderIso.piFinSuccAboveIso (fun _ => ℝ) i).symm.preimage_Icc _ _).trans (Icc_prod_eq _ _)
  rw [torusIntegral, ← hem.map_eq, set_integral_map_equiv, heπ, Measure.volume_eq_prod,
    set_integral_prod, circleIntegral_def_Icc]
  · refine' set_integral_congr measurableSet_Icc fun θ _ => _
    simp (config := { unfoldPartialApp := true }) only [torusIntegral, ← integral_smul,
      deriv_circleMap, i.prod_univ_succAbove _, smul_smul, torusMap, circleMap_zero]
    refine' set_integral_congr measurableSet_Icc fun Θ _ => _
    simp only [MeasurableEquiv.piFinSuccAboveEquiv_symm_apply, i.insertNth_apply_same,
      i.insertNth_apply_succAbove, Function.comp_def]
    congr 2
    simp only [funext_iff, i.forall_iff_succAbove, circleMap, Fin.insertNth_apply_same,
      eq_self_iff_true, Fin.insertNth_apply_succAbove, imp_true_iff, and_self_iff]
  · have := hf.function_integrable
    rwa [← hem.integrableOn_comp_preimage e.measurableEmbedding, heπ] at this

## References #

- [B. Rotman, "An Introduction to the Theory of Groups"][rotman2012]

## Tags #

circle, circle group, circle integral, torus, torus integral

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to their size.

## Equations

- One or more equations did not get rendered due to

Attempt failure.

Working on Mathlib/MeasureTheory/Measure/MeasureSpace.lean - 2024-09-07 13:02:25.764181.
---61/100---
For theorem MeasureTheory.Measure.AbsolutelyContinuous.add_right in Mathlib/MeasureTheory/Measure/MeasureSpace.lean:
lemma add_right (h1 : μ ≪ ν) (ν' : Measure α) : μ ≪ ν + ν' 


Original valid proof:
:= by
  intro s hs
  simp only [coe_add, Pi.add_apply, add_eq_zero] at hs ⊢
  exact h1 hs.1


Verifying proof (Commit cc6e5e01514b06a44caccb55bc04e269ede6a7c8):
 := by
  intro s hs
  simp only [add_toOuterMeasure, OuterMeasure.coe_add, Pi.add_apply, add_eq_zero] at hs ⊢
  exact Or.inl (h1 hs.1)

####  Mario Carneiro (Apr 01 2021 at 00:00):

I think the problem is that you're using the wrong simp lemma, and the right one isadd_eq_zero_iff_eq_zero_or_eq_zero

####  Mario Carneiro (Apr 01 2021 at 00:00):

and the other one isadd_toOuterMeasure

####  Mario Carneiro (Apr 01 2021 at 00:00):

and the other one isadd_toOuterMeasure

####  Mario Carneiro (Apr 01 2021 at 00:00):

and the other one isadd_toOuterMeasure

####  Mario Carneiro (Apr 01 2021 at 00:00):

and the other one isadd_toOuterMeasure

####  Mario Carneiro (Apr 01 2021 at 00:00):

and the other one isadd_toOuterMeasure

####  Mario Carneiro (Apr 01 2021 at 00:00):

and the other one isadd_toOuterMeasure

####  Mario Carneiro (Apr 01 2021 at 00:00):

and the other one isadd_toOuterMeasure

####  Mario Carneiro (Apr 01 2021 at 00:00):

and the other one isadd_toOuterMeasure

####  Mario Carneiro (Apr 01 2021 at 00:00):

and the other one isadd_toOuterMeasure

####  Mario Carneiro (Apr 01 2021 at 00:00):

and the other one isadd_toOuterMeasure

####  Mario Carneiro (Apr 01 2021 at 00:00):

and the other one isadd_toOuterMeasure

####  Mario Carneiro (Apr 01 2021 at 00:00):

and the other one isadd_toOuterMeasure

####  Mario Carneiro (Apr 01 2021 at 00:00):

and the other one isadd_toOuterMeasure

####  Mario Carneiro (Apr 01 2021 at 00:00):

and the other one isadd_toOuterMeasure

####  Mario Carneiro (Apr 01 2021 at 00:00):

and the other one isadd_toOuterMeasure

####  Mario Carneiro (Apr 01 2021 at 00:00):

and the other one isadd_toOuterMeasure

####  Mario Carneiro (Apr 01 2021 at 00:00):

and the other one isadd_toOuterMeasure

####  Mario Carneiro (Apr 01 2021 at 00:00):

and the other one isadd_toOuterMeasure

####  Mario Carneiro (Apr 01 2021 at 00:00):

and the other one isadd_toOuterMeasure

####  Mario Carneiro (Apr 01 2021 at 00:00):

and the other one isadd_toOuterMeasure

####  Mario Carneiro (Apr 01 2021 at 00:00):

and the other one isadd_toOuterMeasure

####  Mario Carneiro (Apr 01 2021 at 00:00):

and the other one isadd_toOuterMeasure

####  Mario Carneiro (Apr 01 2021 at 00:00):

and the other one isadd_toOuterMeasure

####  Mario Carneiro (Apr 01 2021 at 00:00):

and the other one isadd_toOuterMeasure

####  Mario Carneiro (Apr 01 2021 at 00:00):

and the other one isadd_toOuterMeasure

####  Mario Carneiro (Apr 01 2021 at 00:00):

and the other one isadd_toOuterMeasure

####  Mario Carneiro (Apr 01 2021 at 00:00):

and the other one isadd_toOuterMeasure

####  Mario Carneiro (Apr 01 2021 at 00:00):

and the other one isadd_toOuterMeasure

####  Mario Carneiro (Apr 01 2021 at 00:00):

and the other one isadd_toOuterMeasure

####  Mario Carneiro (Apr 01 2021 at 00:00):

and the other one isadd_toOuterMeasure

####  Mario Carneiro (Apr 01 2021 at 00:00):

and the other one isadd_toOuterMeasure

####  Mario Carneiro (Apr 01 2021 at 00:00):

and the other one isadd_toOuterMeasure

####  Mario Carneiro (Apr 01 2021 at 00:00):

and the other one isadd_toOuterMeasure

####  Mario Carneiro (Apr 01 2021 at 00:00):

and the other one isadd_toOuterMeasure

####  Mario Carneiro (Apr 01 2021 at 00:00):

and the other one isadd_toOuterMeasure

####  Mario Carneiro (Apr 01 2021 at 00:00):

and the other one isadd_toOuterMeasure

####  Mario Carneiro (Apr 01 2021 at 00:00):

and the other one isadd_toOuterMeasure

####  Mario Carneiro (Apr 01 2021 at 00:00):

and the other one isadd_toOuterMeasure

####  Mario Carneiro (Apr 01 2021 at 00:00):

and the other one isadd_toOuterMeasure

####  Mario Carneiro (Apr 01 2021 at 00:00):

and the other one isadd_toOuterMeasure

####  Mario Carneiro (Apr 01 2021 at 00:00):

and the other one isadd_toOuterMeasure

####  Mario Carneiro (Apr 01 2021 at 00:00):

and the other one isadd_toOuterMeasure

####  Mario Carneiro (Apr 01 2021 at 00:00):

and the other one isadd_toOuterMeasure

####  Mario Carneiro (Apr 01 2021 at 00:00):

and the other one isadd_toOuterMeasure

####  Mario Carneiro (Apr 01 2021 at 00:00):

and the other one isadd_toOuterMeasure

####  Mario Carneiro (Apr 01 2021 at 00:00):

and the other one isadd_toOuterMeasure

####  Mario Carneiro (Apr 01 2021 at 00:00):

and the other one isadd_toOuterMeasure

####  Mario Carneiro (Apr 01 2021 at 00:00):

and the other one isadd_toOuterMeasure

####  Mario Carneiro (Apr 01 2021 at 00:00):

and the other one isadd_toOuterMeasure

####  Mario Carneiro (Apr 01 2021 at 00:00):

and the other one isadd_toOuterMeasure

####  Mario Carneiro (Apr 01 2021 at 00:0

Attempt failure.

Working on Mathlib/MeasureTheory/Measure/Regular.lean - 2024-09-07 13:02:47.100736.
---62/100---
For theorem MeasureTheory.Measure.OuterRegular.of_restrict in Mathlib/MeasureTheory/Measure/Regular.lean:
lemma of_restrict [OpensMeasurableSpace α] {μ : Measure α} {s : ℕ → Set α}
    (h : ∀ n, OuterRegular (μ.restrict (s n))) (h' : ∀ n, IsOpen (s n)) (h'' : univ ⊆ ⋃ n, s n) :
    OuterRegular μ 


Original valid proof:
:= by
  refine ⟨fun A hA r hr => ?_⟩
  have HA : μ A < ∞ := lt_of_lt_of_le hr le_top
  have hm : ∀ n, MeasurableSet (s n) := fun n => (h' n).measurableSet
  obtain ⟨A, hAm, hAs, hAd, rfl⟩ :
    ∃ A' : ℕ → Set α,
      (∀ n, MeasurableSet (A' n)) ∧
        (∀ n, A' n ⊆ s n) ∧ Pairwise (Disjoint on A') ∧ A = ⋃ n, A' n := by
    refine
      ⟨fun n => A ∩ disjointed s n, fun n => hA.inter (MeasurableSet.disjointed hm _), fun n =>
        inter_subset_right.trans (disjointed_subset _ _),
        (disjoint_disjointed s).mono fun k l hkl => hkl.mono inf_le_right inf_le_right, ?_⟩
    rw [← inter_iUnion, iUnion_disjointed, univ_subset_iff.mp h'', inter_univ]
  rcases ENNReal.exists_pos_sum_of_countable' (tsub_pos_iff_lt.2 hr).ne' ℕ with ⟨δ, δ0, hδε⟩
  rw [lt_tsub_iff_right, add_comm] at hδε
  have : ∀ n, ∃ U ⊇ A n, IsOpen U ∧ μ U < μ (A n) + δ n := by
    intro n
    have H₁ : ∀ t, μ.restrict (s n) t = μ (t ∩ s n) := fun t => restrict_apply' (hm n)
    have Ht : μ.restrict (s n) (A n) ≠ ∞ := by
      rw [H₁]
      exact ((measure_mono (inter_subset_left.trans (subset_iUnion A n))).trans_lt HA).ne
    rcases (A n).exists_isOpen_lt_add Ht (δ0 n).ne' with ⟨U, hAU, hUo, hU⟩
    rw [H₁, H₁, inter_eq_self_of_subset_left (hAs _)] at hU
    exact ⟨U ∩ s n, subset_inter hAU (hAs _), hUo.inter (h' n), hU⟩
  choose U hAU hUo hU using this
  refine ⟨⋃ n, U n, iUnion_mono hAU, isOpen_iUnion hUo, ?_⟩
  calc
    μ (⋃ n, U n) ≤ ∑' n, μ (U n) := measure_iUnion_le _
    _ ≤ ∑' n, (μ (A n) + δ n) := ENNReal.tsum_le_tsum fun n => (hU n).le
    _ = ∑' n, μ (A n) + ∑' n, δ n := ENNReal.tsum_add
    _ = μ (⋃ n, A n) + ∑' n, δ n := (congr_arg₂ (· + ·) (measure_iUnion hAd hAm).symm rfl)
    _ < r := hδε


Verifying proof (Commit 4a554788a29923d4384640e3dd9b0126a26f18bb):
 := by
  refine' ⟨fun A hA r hr => _⟩
  have HA : μ A < ∞ := lt_of_lt_of_le hr le_top
  have hm : ∀ n, MeasurableSet (s n) := fun n => (h' n).measurableSet
  obtain ⟨A' : ℕ → Set α, hAm : ∀ n, MeasurableSet (A' n), hAs : ∀ n, A' n ⊆ s n, hAd : Pairwise (Disjoint on A'), rfl⟩ :
    ∃ A' : ℕ → Set α,
      (∀ n, MeasurableSet (A' n)) ∧
        (∀ n, A' n ⊆ s n) ∧ Pairwise (Disjoint on A') ∧ A = ⋃ n, A' n := by
    refine'
      ⟨fun n => A ∩ disjointed s n, fun n => hA.inter (MeasurableSet.disjointed hm _), fun n =>
        (inter_subset_right _ _).trans (disjointed_subset _ _),
        (disjoint_disjointed s).mono fun k l hkl => hkl.mono inf_le_right inf_le_right, _⟩
    rw [← inter_iUnion, iUnion_disjointed, univ_subset_iff.mp h'', inter_univ]
  rcases ENNReal.exists_pos_sum_of_countable' (tsub_pos_iff_lt.2 hr).ne' ℕ with ⟨δ, δ0, hδε⟩
  rw [lt_tsub_iff_right, add_comm] at hδε
  have : ∀ n, ∃ (U : _) (_ : U ⊇ A' n), IsOpen U ∧ μ U < μ (A' n) + δ n := by
    intro n
    have H₁ : ∀ t, μ.restrict (s n) t = μ (t ∩ s n) := fun t => restrict_apply' (hm n)
    have Ht : μ.restrict (s n) (A' n) ≠ ∞ := by
      rw [H₁]
      exact ((measure_mono ((inter_subset_left _ _).trans (hAs _))).trans_lt HA).ne
    rcases (A' n).exists_isOpen_lt_add Ht (δ0 n).ne' with ⟨U, hAU, hUo, hU⟩
    rw [H₁, H₁, inter_eq_self_of_subset_left (hAs _)] at hU
    exact ⟨U ∩ s n, subset_inter hAU (hAs _), hUo.inter (h' n), hU⟩
  choose U hAU hUo hU using this
  refine' ⟨⋃ n, U n, iUnion_mono hAU, isOpen_iUnion hUo, _⟩
  calc
    μ (⋃ n, U n) ≤ ∑' n, μ (U n) := measure_iUnion_le _
    _ ≤ ∑' n, (μ (A' n) + δ n) := (ENNReal.tsum_le_tsum fun n => (hU n).le)
    _ = ∑' n, μ (A' n) + ∑' n, δ n := ENNReal.tsum_add
    _ = μ (⋃ n, A' n) + ∑' n, δ n := (congr_arg₂ (· + ·) (measure_iUnion hAd hAm).symm rfl)
    _ = μ A + ∑' n, δ n := congr_arg (· + ∑' n, δ n) rfl
    _ < r := hδε

####  Yury G. Kudryashov (Jun 01 2020 at 16:00):

I'm not sure that this is a good idea.

####  Yury G. Kudryashov (Jun 01 2020 at 16:01):

I'm not sure that this is a good idea.

####  Yury G. Kudryashov (Jun 01 2020 at 16:01):

I'm not sure that this is a good idea.

####  Yury G. Kudryashov (Jun 01 2020 at 16:01):

I'm not sure that this is a good idea.

####  Yury G. Kudryashov (Jun 01 2020 at 16:01):

I'm not sure that this is a good idea.

####  Yury G. Kudryashov (Jun 01 2020 at 16:01):

I'm not sure that this is a good idea.

####  Yury G. Kudryashov (Jun 01 2020 at 16:01):

I'm not sure that this is a good idea.

####  Yury G. Kudryashov (Jun 01 2020 at 16:01):

I'm not sure that this is a good idea.

####  Yury G. Kudryashov (Jun 01 2020 at 16:01):

I'm not sure that this is a good idea.

####  Yury G. Kudryashov (Jun 01 2020 at 16:01):

I'm not sure that this is a good idea.

####  Yury G. Kudryashov (Jun 01 2020 at 16:01):

I'm not sure that this is a good idea.

####  Yury G. Kudryashov (Jun 01 2020 at 16:01):

I'm not sure that this is a good idea.

####  Yury G. Kudryashov (Jun 01 2020 at 16:01):

I'm not sure that this is a good idea.

####  Yury G. Kudryashov (Jun 01 2020 at 16:01):

I'm not sure that this is a good idea.

####  Yury G. Kudryashov (Jun 01 2020 at 16:01):

I'm not sure that this is a good idea.

####  Yury G. Kudryashov (Jun 01 2020 at 16:01):

I'm not sure that this is a good idea.

####  Yury G. Kudryashov (Jun 01 2020 at 16:01):

I'm not sure that this is a good idea.

####  Yury G. Kudryashov (Jun 01 2020 at 16:01):

I'm not sure that this is a good idea.

####  Yury G. Kudryashov (Jun 01 2020 at 16:01):

I'm not sure that this is a good idea.

####  Yury G. Kudryashov (Jun 01 2020 at 16:01):

I'm not sure that this is a good idea.

####  Yury G. Kudryashov (Jun 01 2020 at 16:01):

I'm not sure that this is a good idea.

####  Yury G. Kudryashov (Jun 01 2020 at 16:01):

I'm not sure that this is a good idea.

####  Yury G. Kudryashov (Jun 01 2020 at 16:01):

I'm not sure that this is a good idea.

####  Yury G. Kudryashov (Jun 01 2020 at 16:01):

I'm not sure that this is a good idea.

####  Yury G. Kudryashov (Jun

Attempt failure.

Working on Mathlib/MeasureTheory/Measure/Restrict.lean - 2024-09-07 13:02:59.110943.
---63/100---
For theorem MeasureTheory.Measure.restrict_union_congr in Mathlib/MeasureTheory/Measure/Restrict.lean:
theorem restrict_union_congr :
    μ.restrict (s ∪ t) = ν.restrict (s ∪ t) ↔
      μ.restrict s = ν.restrict s ∧ μ.restrict t = ν.restrict t 


Original valid proof:
:= by
  refine
    ⟨fun h =>
      ⟨restrict_congr_mono subset_union_left h,
        restrict_congr_mono subset_union_right h⟩,
      ?_⟩
  rintro ⟨hs, ht⟩
  ext1 u hu
  simp only [restrict_apply hu, inter_union_distrib_left]
  rcases exists_measurable_superset₂ μ ν (u ∩ s) with ⟨US, hsub, hm, hμ, hν⟩
  calc
    μ (u ∩ s ∪ u ∩ t) = μ (US ∪ u ∩ t) :=
      measure_union_congr_of_subset hsub hμ.le Subset.rfl le_rfl
    _ = μ US + μ ((u ∩ t) \ US) := (measure_add_diff hm _).symm
    _ = restrict μ s u + restrict μ t (u \ US) := by
      simp only [restrict_apply, hu, hu.diff hm, hμ, ← inter_comm t, inter_diff_assoc]
    _ = restrict ν s u + restrict ν t (u \ US) := by rw [hs, ht]
    _ = ν US + ν ((u ∩ t) \ US) := by
      simp only [restrict_apply, hu, hu.diff hm, hν, ← inter_comm t, inter_diff_assoc]
    _ = ν (US ∪ u ∩ t) := measure_add_diff hm _
    _ = ν (u ∩ s ∪ u ∩ t) := Eq.symm <| measure_union_congr_of_subset hsub hν.le Subset.rfl le_rfl


Verifying proof (Commit 6402a4dd7bfe402e3a2139adfa6bac90aa088050):
∧
        μ (s ∩ t) = ν (s ∩ t) := by
  refine'
    ⟨fun h =>
      ⟨restrict_congr_mono (subset_union_left _ _) h,
        restrict_congr_mono (subset_union_right _ _) h,
        (h.restrict s).inter_eq_inter_iff_right.mp (restrict_congr_mono (inter_subset_left _ _) h)⟩,
      _⟩
  rintro ⟨hs, ht, hst⟩
  ext1 u hu
  simp only [restrict_apply hu, inter_union_distrib_left]
  rcases exists_measurable_superset₂ μ ν (u ∩ s) with ⟨US, hsub, hm, hμ, hν⟩
  calc
    μ (u ∩ s ∪ u ∩ t) = μ (US ∪ u ∩ t) :=
      measure_union_congr_of_subset hsub hμ.le Subset.rfl le_rfl
    _ = μ US + μ ((u ∩ t) \ US) := (measure_add_diff hm _).symm
    _ = restrict μ s u + restrict μ t (u \ US) := by
      simp only [restrict_apply, hu, hu.diff hm, hμ, ← inter_comm t, inter_diff_assoc]
    _ = restrict ν s u + restrict ν t (u \ US) := by rw [hs, ht]
    _ = ν US + ν ((u ∩ t) \ US) := by
      simp only [restrict_apply, hu, hu.diff hm, hν, ← inter_comm t, inter_diff_assoc]
    _ = ν (US ∪ u ∩ t) := (measure_add_diff hm _)
    _ = ν (u ∩ s ∪ u ∩ t) := Eq.symm <| measure_union_congr_of_subset hsub hν.le Subset.rfl le_rfl
    _ = ν (u ∩ s ∪ u ∩ t ∩ s) := by rw [hst]

####  Yury G. Kudryashov (May 04 2020 at 14:00):

I'm not sure that the proof is correct, but the statement is wrong.

####  Yury G. Kudryashov (May 04 2020 at 14:01):

I'm not sure that the proof is correct, but the statement is wrong.

####  Yury G. Kudryashov (May 04 2020 at 14:01):

I'm not sure that the proof is correct, but the statement is wrong.

####  Yury G. Kudryashov (May 04 2020 at 14:01):

I'm not sure that the proof is correct, but the statement is wrong.

####  Yury G. Kudryashov (May 04 2020 at 14:01):

I'm not sure that the proof is correct, but the statement is wrong.

####  Yury G. Kudryashov (May 04 2020 at 14:01):

I'm not sure that the proof is correct, but the statement is wrong.

####  Yury G. Kudryashov (May 04 2020 at 14:01):

I'm not sure that the proof is correct, but the statement is wrong.

####  Yury G. Kudryashov (May 04 2020 at 14:01):

I'm not sure that the proof is correct, but the statement is wrong.

####  Yury G. Kudryashov (May 04 2020 at 14:01):

I'm not sure that the proof is correct, but the statement is wrong.

####  Yury G. Kudryashov (May 04 2020 at 14:01):

I'm not sure that the proof is correct, but the statement is wrong.

####  Yury G. Kudryashov (May 04 2020 at 14:01):

I'm not sure that the proof is correct, but the statement is wrong.

####  Yury G. Kudryashov (May 04 2020 at 14:01):

I'm not sure that the proof is correct, but the statement is wrong.

####  Yury G. Kudryashov (May 04 2020 at 14:01):

I'm not sure that the proof is correct, but the statement is wrong.

####  Yury G. Kudryashov (May 04 2020 at 14:01):

I'm not sure that the proof is correct, but the statement is wrong.

####  Yury G. Kudryashov (May 04 2020 at 14:01):

I'm not sure that the proof is correct, but the statement is wrong.

####  Yury G. Kudryashov (May 04 2020 at 14:01):

I'm not sure that the proof is correct, but the statement is wrong.

####  Yury G. Kudryashov (May 04 2020 at 14:01):

I'm not sure that the proof is correct, but the statement is wrong.

####  Yury G. Kudryashov (May 04 2020 at 14:01):

I'm not sure that the proof is correct, but the statement is wrong.

####  Yury G. Kudryashov (May 04 2020 at 14:01):

I'm not sure that the proof is correct, but the statement is wrong.

####  Yury G. Kudryashov (May 04 2020 at 14:01):

I'm not sure that the proof is correct, but the statement is wrong.

####  Yury G. Kudryashov (May 04 2020 at 14:01):

I'm not sure that the proof is correct, but the statement is wrong.

####  Yury G. Kudryashov (May 04 2020 at 14:01):

I'm not sure that the proof is correct, but the statement is wrong.

####  Yury G. Kudryashov (May 04 2020 at 14:01):

I'm not sure that the proof is correct, but the statement is wrong.

####  Yury G. Kudryashov (May 04 2020 at 14:01):

I'm not sure that the proof is correct, but the statement is wrong.

####  Yury G. Kudryashov (May 04 2020 at 14:01):

I'm not sure that the proof is correct, but the statement is wrong.

####  Yury G. Kudryashov (May 04 2020 at 14:01):

I'm not sure that the proof is correct, but the statement is wrong.

####  Yury G. Kudryashov (May 04 2020 at 14:01):

I'm not sure that the proof is correct, but the statement is wrong.

####  Yury G. Kudryashov (May 04 2020 at 14:01):

I'm not sure that the proof is correct, but the statement is wrong.

####  Yury G. Kudryashov (May 04 2020 at 14:01):

I'm not sure that the proof is correct, but the statement is wrong.

####  Yury G. Kudryashov (May 04 2020 at 14:01):

I'm not sure that the proof is correct, but the statement is wrong.

####  Yury

Attempt failure.

Working on Mathlib/MeasureTheory/Measure/Stieltjes.lean - 2024-09-07 13:03:16.612148.
---64/100---
For theorem StieltjesFunction.measure_Ioc in Mathlib/MeasureTheory/Measure/Stieltjes.lean:
theorem measure_Ioc (a b : ℝ) : f.measure (Ioc a b) = ofReal (f b - f a) 


Original valid proof:
:= by
  rw [StieltjesFunction.measure]
  exact f.outer_Ioc a b


Verifying proof (Commit 596865180ecc63dcd1d95809202e31027ac3ae38):
 := by
  rw [StieltjesFunction.measure]
  exact f.outer_Ioc a b








































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































Attempt success.

Working on Mathlib/MeasureTheory/Measure/Typeclasses.lean - 2024-09-07 13:03:28.102374.
---65/100---
For theorem MeasureTheory.abs_toReal_measure_sub_le_measure_symmDiff' in Mathlib/MeasureTheory/Measure/Typeclasses.lean:
theorem abs_toReal_measure_sub_le_measure_symmDiff'
    (hs : MeasurableSet s) (ht : MeasurableSet t) (hs' : μ s ≠ ∞) (ht' : μ t ≠ ∞) :
    |(μ s).toReal - (μ t).toReal| ≤ (μ (s ∆ t)).toReal 


Original valid proof:
:= by
  have hst : μ (s \ t) ≠ ∞ := (measure_lt_top_of_subset diff_subset hs').ne
  have hts : μ (t \ s) ≠ ∞ := (measure_lt_top_of_subset diff_subset ht').ne
  suffices (μ s).toReal - (μ t).toReal = (μ (s \ t)).toReal - (μ (t \ s)).toReal by
    rw [this, measure_symmDiff_eq hs ht, ENNReal.toReal_add hst hts]
    convert abs_sub (μ (s \ t)).toReal (μ (t \ s)).toReal <;> simp
  rw [measure_diff' s ht ht', measure_diff' t hs hs',
    ENNReal.toReal_sub_of_le measure_le_measure_union_right (measure_union_ne_top hs' ht'),
    ENNReal.toReal_sub_of_le measure_le_measure_union_right (measure_union_ne_top ht' hs'),
    union_comm t s]
  abel


Verifying proof (Commit 089ac90928952b8a08be66ede7ff142d0f9ba666):
 := by
  have hst : μ (s \ t) ≠ ∞ := (measure_lt_top_of_subset (diff_subset s t) hs').ne
  have hts : μ (t \ s) ≠ ∞ := (measure_lt_top_of_subset (diff_subset t s) ht').ne
  suffices (μ s).toReal - (μ t).toReal = (μ (s \ t)).toReal - (μ (t \ s)).toReal by
    rw [this, measure_symmDiff_eq hs ht, ENNReal.toReal_add hst hts]
    convert abs_sub (μ (s \ t)).toReal (μ (t \ s)).toReal <;> simp
  rw [measure_diff' s ht ht', measure_diff' t hs hs',
    ENNReal.toReal_sub_of_le measure_le_measure_union_right (measure_union_ne_top hs' ht'),
    ENNReal.toReal_sub_of_le measure_le_measure_union_right (measure_union_ne_top ht' hs'),
    union_comm t s]
  abel

####  Yury G. Kudryashov (Apr 04 2021 at 14:20):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (Apr 04 2021 at 14:20):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (Apr 04 2021 at 14:20):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (Apr 04 2021 at 14:20):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (Apr 04 2021 at 14:20):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (Apr 04 2021 at 14:20):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (Apr 04 2021 at 14:20):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (Apr 04 2021 at 14:20):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (Apr 04 2021 at 14:20):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (Apr 04 2021 at 14:20):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (Apr 04 2021 at 14:20):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (Apr 04 2021 at 14:20):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (Apr 04 2021 at 14:20):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (Apr 04 2021 at 14:20):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (Apr 04 2021 at 14:20):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (Apr 04 2021 at 14:20):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (Apr 04 2021 at 14:20):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (Apr 04 2021 at 14:20):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (Apr 04 2021 at 14:20):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (Apr 04 2021 at 14:20):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (Apr 04 2021 at 14:20):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (Apr 04 2021 at 14:20):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (Apr 04 2021 at 14:20):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (Apr 04 2021 at 14:20):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (Apr 04 2021 at 14:20):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (Apr 04 2021 at 14:20):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (Apr 04 2021 at 14:20):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (Apr 04 2021 at 14:20):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (Apr 04 2021 at 14:20):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (Apr 04 2021 at 14:20):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (Apr 04 2021 at 14:20):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (Apr 04 2021 at 14:20):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (Apr 04 2021 at 14:20):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (Apr 04 2021 at 14:20):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (Apr 04 2021 at 14:20):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (Apr 04 2021 at 14:20):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (Apr 04 2021 at 14:20):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (Apr 04 2021 at 14:20):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (Apr 04 2021 at 14:20):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (Apr 04 2021 at 14:20):

I'm not sure that this is a bug.

####  Yury G. Kudryashov

Attempt failure.

Working on Mathlib/MeasureTheory/OuterMeasure/Caratheodory.lean - 2024-09-07 13:03:41.870599.
---66/100---
For theorem MeasureTheory.OuterMeasure.f_iUnion in Mathlib/MeasureTheory/OuterMeasure/Caratheodory.lean:
theorem f_iUnion {s : ℕ → Set α} (h : ∀ i, IsCaratheodory m (s i)) (hd : Pairwise (Disjoint on s)) :
    m (⋃ i, s i) = ∑' i, m (s i) 


Original valid proof:
:= by
  refine le_antisymm (measure_iUnion_le s) ?_
  rw [ENNReal.tsum_eq_iSup_nat]
  refine iSup_le fun n => ?_
  have := @isCaratheodory_sum _ m _ h hd univ n
  simp only [inter_comm, inter_univ, univ_inter] at this; simp only [this, ge_iff_le]
  exact m.mono (iUnion₂_subset fun i _ => subset_iUnion _ i)


Verifying proof (Commit 727c4bcd221ef8565e3e1ca42cccebc21e65c52f):
 := by
  refine' le_antisymm (m.iUnion_nat s) _
  rw [ENNReal.tsum_eq_iSup_nat]
  refine' iSup_le fun n => _
  have := @isCaratheodory_sum _ m _ h hd univ n
  simp only [inter_comm, inter_univ, univ_inter] at this; simp only [this, ge_iff_le]
  exact m.mono (iUnion₂_subset fun i _ => subset_iUnion _ i)

####  Yury G. Kudryashov (Jun 01 2020 at 14:00):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (Jun 01 2020 at 14:00):

I think that the problem is that the first argument ofisCaratheodory_sum is a set, not a function.

####  Yury G. Kudryashov (Jun 01 2020 at 14:01):

I'm not sure that this is a bug.

I'm not sure that this is a feature.

####  Yury G. Kudryashov (Jun 01 2020 at 14:01):

I think that the problem is that the first argument of
isCaratheodory_sum is a set, not a function.
I think that the problem is that the first argument ofisCaratheodory_sum is a function, not a set.

####  Yury G. Kudryashov (Jun 01 2020 at 14:02):

I'm not sure that this is a bug.

I'm not sure that this is a feature.

I'm not sure that this is a feature.

####  Yury G. Kudryashov (Jun 01 2020 at 14:02):

I think that the problem is that the first argument of
isCaratheodory_sum is a set, not a function.
I think that the problem is that the first argument ofisCaratheodory_sum is a function, not a set.

I think that the problem is that the first argument ofisCaratheodory_sum is a set, not a function.

####  Yury G. Kudryashov (Jun 01 2020 at 14:03):

I'm not sure that this is a bug.

I'm not sure that this is a feature.

I'm not sure that this is a feature.

I'm not sure that this is a feature.

####  Yury G. Kudryashov (Jun 01 2020 at 14:03):

I think that the problem is that the first argument of
isCaratheodory_sum is a set, not a function.
I think that the problem is that the first argument ofisCaratheodory_sum is a function, not a set.

I think that the problem is that the first argument ofisCaratheodory_sum is a set, not a function.

I think that the problem is that the first argument ofisCaratheodory_sum is a function, not a set.

####  Yury G. Kudryashov (Jun 01 2020 at 14:04):

I'm not sure that this is a bug.

I'm not sure that this is a feature.

I'm not sure that this is a feature.

I'm not sure that this is a feature.

I'm not sure that this is a feature.

####  Yury G. Kudryashov (Jun 01 2020 at 14:04):

I think that the problem is that the first argument of
isCaratheodory_sum is a set, not a function.
I think that the problem is that the first argument ofisCaratheodory_sum is a function, not a set.

I think that the problem is that the first argument ofisCaratheodory_sum is a set, not a function.

I think that the problem is that the first argument ofisCaratheodory_sum is a function, not a set.

I think that the problem is that the first argument ofisCaratheodory_sum is a set, not a function.

I think that the problem is that the first argument ofisCaratheodory_sum is a function, not a set.

####  Yury G. Kudryashov (Jun 01 2020 at 14:05):

I'm not sure that this is a bug.

I'm not sure that this is a feature.

I'm not sure that this is a feature.

I'm not sure that this is a feature.

I'm not sure that this is a feature.

I'm not sure that this is a feature.

####  Yury G. Kudryashov (Jun 01 2020 at 14:05):

I think that the problem is that the first argument of
isCaratheodory_sum is a set, not a function.
I think that the problem is that the first argument ofisCaratheodory_sum is a function, not a set.

I think that the problem is that the first argument ofisCaratheodory_sum is a set, not a function.

I think that the problem is that the first argument ofisCaratheodory_sum is a function, not a set.

I think that the problem is that the first argument ofisCaratheodory_sum is a set, not a function.

I think that the problem is that the first argument ofisCaratheodory_sum is a function, not a set.

I think that the problem is that the first argument ofisCaratheodory_sum is a set, not a function.

I think that the problem is that the first argument ofisCaratheodory_sum is a function, not a set.

####  Yury G. Kudryashov (Jun 01 2020 at 14:06):

I'm not sure that this is a bug.

I'm not sure that this is a feature.

I'm not sure that this is a feature.

I'm not sure that this is a feature.

I'm not sure that this is a feature.

I'm not sure that this is a feature.

I'm not sure that this is a feature.

####  Yury G. Kudryashov (Jun 01 2020 at 14:06):

I think that the problem is that the first argument of
isCaratheodory_sum is a set, not a function.
I think that the problem is that the first argument ofisCaratheodory_sum is a function, not a set.

I think that the problem is that the first argument ofisCaratheodory_sum is a set, not a function.

I think that the problem is that the first argument ofisCaratheodory_sum is a function, not a set.

I think that the problem is that the first argument ofisCaratheodory_sum is a set, not a function.

I think that the problem is that the first argument ofisCaratheodory_sum is a function, not a set.

I think that the problem is that the first argument ofisCaratheodory_sum is a set, not a function.

I think that the problem is that the first argument ofisCaratheodory_sum is a function, not a set.

I think that the problem is that the first argument ofisCaratheodory_sum is a set, not a function.

I think that the problem is that the first argument ofisCaratheodory_sum is a function, not a set.

I think that the problem is that the first argument ofisCaratheodory_sum is a set, not a function.

I think that the problem is that the first argument ofisCaratheodory_sum is a function, not a set.

I think that the problem is that the first argument ofisCaratheodory_sum is a set, not a function.

I think that the problem is that the first argument ofisCaratheodory_sum is a function, not a set.

I think that the problem is that the first argument ofisCaratheodory_sum is a set, not a function.

I think that the problem is that the first argument ofisCaratheodory_sum is a function, not a set.


Attempt failure.

Working on Mathlib/NumberTheory/ClassNumber/AdmissibleAbsoluteValue.lean - 2024-09-07 13:03:50.774045.
---67/100---
For theorem AbsoluteValue.IsAdmissible.exists_approx in Mathlib/NumberTheory/ClassNumber/AdmissibleAbsoluteValue.lean:
theorem exists_approx_aux (n : ℕ) (h : abv.IsAdmissible) :
    ∀ {ε : ℝ} (_hε : 0 < ε) {b : R} (_hb : b ≠ 0) (A : Fin (h.card ε ^ n).succ → Fin n → R),
      ∃ i₀ i₁, i₀ ≠ i₁ ∧ ∀ k, (abv (A i₁ k % b - A i₀ k % b) : ℝ) < abv b • ε 


Original valid proof:
:= by
  haveI := Classical.decEq R
  induction' n with n ih
  · intro ε _hε b _hb A
    refine ⟨0, 1, ?_, ?_⟩
    · simp
    rintro ⟨i, ⟨⟩⟩
  intro ε hε b hb A
  let M := h.card ε
  obtain ⟨s, s_inj, hs⟩ :
    ∃ s : Fin (M ^ n).succ → Fin (M ^ n.succ).succ,
      Function.Injective s ∧ ∀ i₀ i₁, (abv (A (s i₁) 0 % b - A (s i₀) 0 % b) : ℝ) < abv b • ε := by
    obtain ⟨t, ht⟩ :
      ∃ t : Fin (M ^ n.succ).succ → Fin M,
        ∀ i₀ i₁, t i₀ = t i₁ → (abv (A i₁ 0 % b - A i₀ 0 % b) : ℝ) < abv b • ε :=
      h.exists_partition hε hb fun x ↦ A x 0
    obtain ⟨s, hs⟩ :=
      Fintype.exists_lt_card_fiber_of_mul_lt_card (f := t)
        (by simpa only [Fintype.card_fin, pow_succ'] using Nat.lt_succ_self (M ^ n.succ))
    refine ⟨fun i ↦ (Finset.univ.filter fun x ↦ t x = s).toList.get <| i.castLE ?_, fun i j h ↦ ?_,
      fun i₀ i₁ ↦ ht _ _ ?_⟩
    · rwa [Finset.length_toList]
    · ext
      simpa [(Finset.nodup_toList _).getElem_inj_iff] using h
    · have : ∀ i h, t ((Finset.univ.filter fun x ↦ t x = s).toList.get ⟨i, h⟩) = s := fun i h ↦
        (Finset.mem_filter.mp (Finset.mem_toList.mp (List.get_mem _ i h))).2
      simp only [Nat.succ_eq_add_one, Finset.length_toList, List.get_eq_getElem] at this
      simp only [Nat.succ_eq_add_one, List.get_eq_getElem, Fin.coe_castLE]
      rw [this _ (Nat.lt_of_le_of_lt (Nat.le_of_lt_succ i₁.2) hs),
        this _ (Nat.lt_of_le_of_lt (Nat.le_of_lt_succ i₀.2) hs)]
  obtain ⟨k₀, k₁, hk, h⟩ := ih hε hb fun x ↦ Fin.tail (A (s x))
  refine ⟨s k₀, s k₁, fun h ↦ hk (s_inj h), fun i ↦ Fin.cases ?_ (fun i ↦ ?_) i⟩
  · exact hs k₀ k₁
  · exact h i


Verifying proof (Commit a1bf5aea46b9638361ce40d14cbda31c78bdb63a):
 := by
  haveI := Classical.decEq R
  induction' n with n ih
  · intro ε _hε b _hb A
    refine' ⟨0, 1, _, _⟩
    · simp
    rintro ⟨i, ⟨⟩⟩
  intro ε hε b hb A
  let M := h.card ε
  obtain ⟨s, s_inj, hs⟩ :
    ∃ s : Fin (M ^ n).succ → Fin (M ^ n.succ).succ,
      Function.Injective s ∧ ∀ i₀ i₁, (abv (A (s i₁) 0 % b - A (s i₀) 0 % b) : ℝ) < abv b • ε := by
    obtain ⟨t, ht⟩ :
      ∃ t : Fin (M ^ n.succ).succ → Fin M,
        ∀ i₀ i₁, t i₀ = t i₁ → (abv (A i₁ 0 % b - A i₀ 0 % b) : ℝ) < abv b • ε :=
      h.exists_partition hε hb fun x ↦ A x 0
    obtain ⟨s, hs⟩ :=
      @Fintype.exists_lt_card_fiber_of_mul_lt_card _ _ _ _ _ t (M ^ n)
        (by simpa only [Fintype.card_fin, pow_succ] using Nat.lt_succ_self (M ^ n.succ))
    refine'
      ⟨fun i ↦ (Finset.univ.filter fun x ↦ t x = s).toList.nthLe i _, _, fun i₀ i₁ ↦ ht _ _ _⟩
    · refine' i.2.trans_le _
      rwa [Finset.length_toList]
    · intro i j h
      ext
      exact Fin.mk.inj_iff.mp (List.nodup_iff_injective_get.mp (Finset.nodup_toList _) h)
    have : ∀ i h, (Finset.univ.filter fun x ↦ t x = s).toList.nthLe i h ∈
        Finset.univ.filter fun x ↦ t x = s := by
      intro i h
      exact Finset.mem_toList.mp (List.get_mem _ i h)
    obtain ⟨_, h₀⟩ := Finset.mem_filter.mp (this i₀ _)
    obtain ⟨_, h₁⟩ := Finset.mem_filter.mp (this i₁ _)
    exact h₀.trans h₁.symm
  obtain ⟨k₀, k₁, hk, h⟩ := ih hε hb fun x ↦ Fin.tail (A (s x))
  refine' ⟨s k₀, s k₁, fun h ↦ hk (s_inj h), fun i ↦ Fin.cases _ (fun i ↦ _) i⟩
  · exact hs k₀ k₁
  · exact h i

## References #

- [J.H. Loxton, Some applications of Lambert series in number theory, Bull. London Math. Soc. 11 (1979), no. 5, 358--362. MR543113, doi:10.1112/blms/11.5.358]

## Tags #

p-adic, rational, approximation, Padé approximation, Lambert series

The function $f(x) = \frac{1}{1-x}$ is a Padé approximant to $e^x$ at $x=0$ of order $0$.

The function $f(x) = \frac{1}{1-x}$ is a Padé approximant to $e^x$ at $x=0$ of order $1$.

The function $f(x) = \frac{1}{1-x}$ is a Padé approximant to $e^x$ at $x=0$ of order $2$.

The function $f(x) = \frac{1}{1-x}$ is a Padé approximant to $e^x$ at $x=0$ of order $3$.

The function $f(x) = \frac{1}{1-x}$ is a Padé approximant to $e^x$ at $x=0$ of order $4$.

The function $f(x) = \frac{1}{1-x}$ is a Padé approximant to $e^x$ at $x=0$ of order $5$.

The function $f(x) = \frac{1}{1-x}$ is a Padé approximant to $e^x$ at $x=0$ of order $6$.

The function $f(x) = \frac{1}{1-x}$ is a Padé approximant to $e^x$ at $x=0$ of order $7$.

The function $f(x) = \frac{1}{1-x}$ is a Padé approximant to $e^x$ at $x=0$ of order $8$.

The function $f(x) = \frac{1}{1-x}$ is a Padé approximant to $e^x$ at $x=0$ of order $9$.

The function $f(x) = \frac{1}{1-x}$ is a Padé approximant to $e^x$ at $x=0$ of order $10$.

The function $f(x) = \frac{1}{1-x}$ is a Padé approximant to $e^x$ at $x=0$ of order $11$.

The function $f(x) = \frac{1}{1-x}$ is a Padé approximant to $e^x$ at $x=0$ of order $12$.

The function $f(x) = \frac{1}{1-x}$ is a Padé approximant to $e^x$ at $x=0$ of order $13$.

The function $f(x) = \frac{1}{1-x}$ is a Padé approximant to $e^x$ at $x=0$ of order $14$.

The function $f(x) = \frac{1}{1-x}$ is a Padé approximant to $e^x$ at $x=0$ of order $15$.

The function $f(x) = \frac{1}{1-x}$ is a Padé approximant to $e^x$ at $x=0$ of order $16$.

The function $f(x) = \frac{1}{1-x}$ is a Padé approximant to $e^x$ at $x=0$ of order $17$.

The function $f(x) = \frac{1}{1-x}$ is a Padé approximant to $e^x$ at $x=0$ of order $18$.

The function $f(x) = \frac{1}{1-x}$ is a Padé approximant to $e^x$ at $x=0$ of order $19$.

The function $f(x) = \frac{1}{1-x}$ is a Padé approximant to $e^x$ at $x=0$ of order $20$.

The function $f(x) = \frac{1}{1-x}$ is a Padé approximant to $e^x$ at $x=0$ of order $21$.

The function $f(x) = \frac{1}{1-x}$ is a Padé approximant to $e^x$ at $x=0$ of order $22$.

The function $f(x) = \frac{1}{1-x}$ is a Padé approximant to $e^x$ at $x=0$ of order $23$.

The function $f(x) = \frac{1}{1-x}$ is a Padé approximant to $e^x$ at $x=0$ of order $24$.

The function $f(x) = \frac{1}{1-x}$ is a Padé approximant to $e^x$ at $x=0$ of order $25$.

The function $f(x) = \frac{1}{1-x}$ is a Padé approximant to $e^x$ at $x=0$ of order $26$.



Attempt failure.

Working on Mathlib/NumberTheory/ClassNumber/AdmissibleCardPowDegree.lean - 2024-09-07 13:03:56.721898.
---68/100---
For theorem Polynomial.exists_partition_polynomial in Mathlib/NumberTheory/ClassNumber/AdmissibleCardPowDegree.lean:
theorem exists_partition_polynomial_aux (n : ℕ) {ε : ℝ} (hε : 0 < ε) {b : Fq[X]} (hb : b ≠ 0)
    (A : Fin n → Fq[X]) : ∃ t : Fin n → Fin (Fintype.card Fq ^ ⌈-log ε / log (Fintype.card Fq)⌉₊),
      ∀ i₀ i₁ : Fin n, t i₀ = t i₁ ↔
        (cardPowDegree (A i₁ % b - A i₀ % b) : ℝ) < cardPowDegree b • ε 


Original valid proof:
:= by
  have hbε : 0 < cardPowDegree b • ε := by
    rw [Algebra.smul_def, eq_intCast]
    exact mul_pos (Int.cast_pos.mpr (AbsoluteValue.pos _ hb)) hε
  induction' n with n ih
  · refine ⟨finZeroElim, finZeroElim⟩
  have anti_archim' : ∀ {i j k} {ε : ℝ},
    (cardPowDegree (A i % b - A j % b) : ℝ) < ε →
      (cardPowDegree (A j % b - A k % b) : ℝ) < ε →
        (cardPowDegree (A i % b - A k % b) : ℝ) < ε := by
    intro i j k ε
    simp_rw [← Int.lt_ceil]
    exact cardPowDegree_anti_archimedean
  obtain ⟨t', ht'⟩ := ih (Fin.tail A)
  rsuffices ⟨j, hj⟩ :
    ∃ j, ∀ i, t' i = j ↔ (cardPowDegree (A 0 % b - A i.succ % b) : ℝ) < cardPowDegree b • ε
  · refine ⟨Fin.cons j t', fun i₀ i₁ => ?_⟩
    refine Fin.cases ?_ (fun i₀ => ?_) i₀ <;> refine Fin.cases ?_ (fun i₁ => ?_) i₁
    · simpa using hbε
    · rw [Fin.cons_succ, Fin.cons_zero, eq_comm, AbsoluteValue.map_sub]
      exact hj i₁
    · rw [Fin.cons_succ, Fin.cons_zero]
      exact hj i₀
    · rw [Fin.cons_succ, Fin.cons_succ]
      exact ht' i₀ i₁
  obtain ⟨j, hj⟩ : ∃ j, ∀ i : Fin n,
      t' i = j → (cardPowDegree (A 0 % b - A i.succ % b) : ℝ) < cardPowDegree b • ε := by
    by_contra! hg
    obtain ⟨j₀, j₁, j_ne, approx⟩ := exists_approx_polynomial hb hε
      (Fin.cons (A 0) fun j => A (Fin.succ (Classical.choose (hg j))))
    revert j_ne approx
    refine Fin.cases ?_ (fun j₀ => ?_) j₀ <;>
      refine Fin.cases (fun j_ne approx => ?_) (fun j₁ j_ne approx => ?_) j₁
    · exact absurd rfl j_ne
    · rw [Fin.cons_succ, Fin.cons_zero, ← not_le, AbsoluteValue.map_sub] at approx
      have := (Classical.choose_spec (hg j₁)).2
      contradiction
    · rw [Fin.cons_succ, Fin.cons_zero, ← not_le] at approx
      have := (Classical.choose_spec (hg j₀)).2
      contradiction
    · rw [Fin.cons_succ, Fin.cons_succ] at approx
      rw [Ne, Fin.succ_inj] at j_ne
      have : j₀ = j₁ := (Classical.choose_spec (hg j₀)).1.symm.trans
        (((ht' (Classical.choose (hg j₀)) (Classical.choose (hg j₁))).mpr approx).trans
          (Classical.choose_spec (hg j₁)).1)
      contradiction
  by_cases exists_nonempty_j : ∃ j, (∃ i, t' i = j) ∧
      ∀ i, t' i = j → (cardPowDegree (A 0 % b - A i.succ % b) : ℝ) < cardPowDegree b • ε
  · obtain ⟨j, ⟨i, hi⟩, hj⟩ := exists_nonempty_j
    refine ⟨j, fun i' => ⟨hj i', fun hi' => _root_.trans ((ht' _ _).mpr ?_) hi⟩⟩
    apply anti_archim' _ hi'
    rw [AbsoluteValue.map_sub]
    exact hj _ hi
  refine ⟨j, fun i => ⟨hj i, fun hi => ?_⟩⟩
  have := exists_nonempty_j ⟨t' i, ⟨i, rfl⟩, fun i' hi' => anti_archim' hi ((ht' _ _).mp hi')⟩
  contradiction


Verifying proof (Commit 693fd79515903b10b1d31f10dccfc49e633cf7ee):
∧
          (cardPowDegree (A i₁ % b - A i₀ % b) : ℝ) < cardPowDegree b • ε := by
  have hbε : 0 < cardPowDegree b • ε := by
    rw [Algebra.smul_def, eq_intCast]
    exact mul_pos (Int.cast_pos.mpr (AbsoluteValue.pos _ hb)) hε
  induction' n with n ih
  · refine' ⟨finZeroElim, finZeroElim⟩
  have anti_archim' : ∀ {i j k} {ε : ℝ},
    (cardPowDegree (A i % b - A j % b) : ℝ) < ε →
      (cardPowDegree (A j % b - A k % b) : ℝ) < ε →
        (cardPowDegree (A i % b - A k % b) : ℝ) < ε := by
    intro i j k ε
    simp_rw [← Int.lt_ceil]
    exact cardPowDegree_anti_archimedean
  obtain ⟨t', ht'⟩ := ih (Fin.tail A)
  rsuffices ⟨j, hj⟩ :
    ∃ j, ∀ i, t' i = j ↔ (cardPowDegree (A 0 % b - A i.succ % b) : ℝ) < cardPowDegree b • ε ∧
      (cardPowDegree (A 0 % b - A i.succ % b) : ℝ) < cardPowDegree b • ε
  · refine' ⟨Fin.cons j t', fun i₀ i₁ => _⟩
    refine' Fin.cases _ (fun i₀ => _) i₀ <;> refine' Fin.cases _ (fun i₁ => _) i₁
    · simpa using hbε
    · rw [Fin.cons_succ, Fin.cons_zero, eq_comm, AbsoluteValue.map_sub]
      exact hj i₁
    · rw [Fin.cons_succ, Fin.cons_zero]
      exact hj i₀
    · rw [Fin.cons_succ, Fin.cons_succ]
      exact ht' i₀ i₁
  obtain ⟨j, hj⟩ : ∃ j, ∀ i : Fin n,
      t' i = j → (cardPowDegree (A 0 % b - A i.succ % b) : ℝ) < cardPowDegree b • ε ∧
        (cardPowDegree (A 0 % b - A i.succ % b) : ℝ) < cardPowDegree b • ε := by
    by_contra hg
    push_neg at hg
    obtain ⟨j₀, j₁, j_ne, approx⟩ := exists_approx_polynomial hb hε
      (Fin.cons (A 0) fun j => A (Fin.succ (Classical.choose (hg j))))
    revert j_ne approx
    refine' Fin.cases _ (fun j₀ => _) j₀ <;>
      refine' Fin.cases (fun j_ne approx => _) (fun j₁ j_ne approx => _) j₁
    · exact absurd rfl j_ne
    · rw [Fin.cons_succ, Fin.cons_zero, ← not_le, AbsoluteValue.map_sub] at approx
      have := (Classical.choose_spec (hg j₁)).2.1
      contradiction
    · rw [Fin.cons_succ, Fin.cons_zero, ← not_le] at approx
      have := (Classical.choose_spec (hg j₀)).2.1
      contradiction
    · rw [Fin.cons_succ, Fin.cons_succ] at approx
      rw [Ne.def, Fin.succ_inj] at j_ne
      have : j₀ = j₁ := (Classical.choose_spec (hg j₀)).1.symm.trans
        (((ht' (Classical.choose (hg j₀)) (Classical.choose (hg j₁))).mpr approx).trans
          (Classical.choose_spec (hg j₁)).1)
      contradiction
  by_cases exists_nonempty_j : ∃ j, (∃ i, t' i = j) ∧
      ∀ i, t' i = j → (cardPowDegree (A 0 % b - A i.succ % b) : ℝ) < cardPowDegree b • ε ∧
        (cardPowDegree (A 0 % b - A i.succ % b) : ℝ) < cardPowDegree b • ε
  · obtain ⟨j, ⟨i, hi⟩, hj⟩ := exists_nonempty_j
    refine' ⟨j, fun i' => ⟨hj i', fun hi' => _root_.trans ((ht' _ _).mpr _) hi⟩⟩
    apply anti_archim' _ hi'
    rw [AbsoluteValue.map_sub]
    exact hj _ hi
  refine' ⟨j, fun i => ⟨hj i, fun hi => _⟩⟩
  have := exists_nonempty_j ⟨t' i, ⟨i, rfl⟩, fun i' hi' => anti_archim' hi ((ht' _ _).mp hi')⟩
  contradiction

####  Damiano Testa (Apr 05 2021 at 14:00):

I am not sure if this is a bug or a feature, but I am not sure if I should be happy or sad.

####  Damiano Testa (Apr 05 2021 at 14:00):

I am not sure if this is a bug or a feature, but I am not sure if I should be happy or sad.

####  Damiano Testa (Apr 05 2021 at 14:00):

I am not sure if this is a bug or a feature, but I am not sure if I should be happy or sad.

####  Damiano Testa (Apr 05 2021 at 14:00):

I am not sure if this is a bug or a feature, but I am not sure if I should be happy or sad.

####  Damiano Testa (Apr 05 2021 at 14:00):

I am not sure if this is a bug or a feature, but I am not sure if I should be happy or sad.

####  Damiano Testa (Apr 05 2021 at 14:00):

I am not sure if this is a bug or a feature, but I am not sure if I should be happy or sad.

####  Damiano Testa (Apr 05 2021 at 14:00):

I am not sure if this is a bug or a feature, but I am not sure if I should be happy or sad.

####  Damiano Testa (Apr 05 2021 at 14:00):

I am not sure if this is a bug or a feature, but I am not sure if I should be happy or sad.

####  Damiano Testa (Apr 05 2021 at 14:00):

I am not sure if this is a bug or a feature, but I am not sure if I should be happy or sad.

####  Damiano Testa (Apr 05 2021 at 14:00):

I am not sure if this is a bug or a feature, but I am not sure if I should be happy or sad.

####  Damiano Testa (Apr 05 2021 at 14:00):

I am not sure if this is a bug or a feature, but I am not sure if I should be happy or sad.

####  Damiano Testa (Apr 05 2021 at 14:00):

I am not sure if this is a bug or a feature, but I am not sure if I should be happy or sad.

####  Damiano Testa (Apr 05 2021 at 14:00):

I am not sure if this is a bug or a feature, but I am not sure if I should be happy or sad.

####  Damiano Test

Attempt failure.

Working on Mathlib/NumberTheory/ClassNumber/Finite.lean - 2024-09-07 13:04:08.007785.
---69/100---
For theorem ClassGroup.norm_le in Mathlib/NumberTheory/ClassNumber/Finite.lean:
theorem norm_le (a : S) {y : ℤ} (hy : ∀ k, abv (bS.repr a k) ≤ y) :
    abv (Algebra.norm R a) ≤ normBound abv bS * y ^ Fintype.card ι 


Original valid proof:
:= by
  conv_lhs => rw [← bS.sum_repr a]
  rw [Algebra.norm_apply, ← LinearMap.det_toMatrix bS]
  simp only [Algebra.norm_apply, AlgHom.map_sum, AlgHom.map_smul, map_sum,
    map_smul, Algebra.toMatrix_lmul_eq, normBound, smul_mul_assoc, ← mul_pow]
  convert Matrix.det_sum_smul_le Finset.univ _ hy using 3
  · rw [Finset.card_univ, smul_mul_assoc, mul_comm]
  · intro i j k
    apply Finset.le_max'
    exact Finset.mem_image.mpr ⟨⟨i, j, k⟩, Finset.mem_univ _, rfl⟩


Verifying proof (Commit 6eab74639023015a7887e2f82e153907286e3801):
 := by
  conv_lhs => rw [← bS.sum_repr a]
  rw [Algebra.norm_apply, ← LinearMap.det_toMatrix bS]
  simp only [Algebra.norm_apply, AlgHom.map_sum, AlgHom.map_smul, LinearEquiv.map_sum,
    LinearEquiv.map_smul, Algebra.toMatrix_lmul_eq, normBound, smul_mul_assoc, ← mul_pow]
  rw [← LinearMap.det_toMatrix bS]
  convert Matrix.det_sum_smul_le (n := ι) Finset.univ _ hy using 3
  · simp; rfl
  · rw [Finset.card_univ, smul_mul_assoc, mul_comm]
  · intro i j k
    apply Finset.le_max'
    exact Finset.mem_image.mpr ⟨⟨i, j, k⟩, Finset.mem_univ _, rfl⟩

## 2.2.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1

Attempt failure.

Working on Mathlib/NumberTheory/Cyclotomic/PID.lean - 2024-09-07 13:04:27.019656.
---70/100---
For theorem IsCyclotomicExtension.Rat.three_pid in Mathlib/NumberTheory/Cyclotomic/PID.lean:
theorem three_pid [IsCyclotomicExtension {3} ℚ K] : IsPrincipalIdealRing (𝓞 K) 


Original valid proof:
:= by
  apply RingOfIntegers.isPrincipalIdealRing_of_abs_discr_lt
  rw [absdiscr_prime 3 K, IsCyclotomicExtension.finrank (n := 3) K
    (irreducible_rat (by norm_num)), nrComplexPlaces_eq_totient_div_two 3, totient_prime
      PNat.prime_three]
  simp only [Int.reduceNeg, PNat.val_ofNat, succ_sub_succ_eq_sub, tsub_zero, zero_lt_two,
    Nat.div_self, pow_one, cast_ofNat, neg_mul, one_mul, abs_neg, Int.cast_abs, Int.cast_ofNat,
    factorial_two, gt_iff_lt, abs_of_pos (show (0 : ℝ) < 3 by norm_num)]
  suffices (2 * (3 / 4) * (2 ^ 2 / 2)) ^ 2 < (2 * (π / 4) * (2 ^ 2 / 2)) ^ 2 from
    lt_trans (by norm_num) this
  gcongr
  exact pi_gt_three


Verifying proof (Commit 6d320164089fb7ddf42fef94dfd88b832a20bde8):
 := by
  apply RingOfIntegers.isPrincipalIdealRing_of_abs_discr_lt
  rw [absdiscr_prime 3 K, IsCyclotomicExtension.finrank (n := 3) K
    (irreducible_rat (by norm_num)), nrComplexPlaces_eq_totient_div_two 3, totient_prime
      PNat.prime_three]
  simp only [Int.reduceNeg, PNat.val_ofNat, succ_sub_succ_eq_sub, tsub_zero, zero_lt_two,
    Nat.div_self, pow_one, cast_ofNat, neg_mul, one_mul, abs_neg, Int.cast_abs, Int.int_cast_ofNat,
    factorial_two, gt_iff_lt, abs_of_pos (show (0 : ℝ) < 3 by norm_num)]
  suffices (2 * (3 / 4) * (2 ^ 2 / 2)) ^ 2 < (2 * (π / 4) * (2 ^ 2 / 2)) ^ 2 from
    lt_trans (by norm_num) this
  gcongr
  exact pi_gt_three

## 1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.

Attempt failure.

Working on Mathlib/NumberTheory/LegendreSymbol/Basic.lean - 2024-09-07 13:09:44.547934.
---71/100---
For theorem legendreSym.eq_one_of_sq_sub_mul_sq_eq_zero' in Mathlib/NumberTheory/LegendreSymbol/Basic.lean:
theorem eq_one_of_sq_sub_mul_sq_eq_zero' {p : ℕ} [Fact p.Prime] {a : ℤ} (ha : (a : ZMod p) ≠ 0)
    {x y : ZMod p} (hx : x ≠ 0) (hxy : x ^ 2 - a * y ^ 2 = 0) : legendreSym p a = 1 


Original valid proof:
:= by
  haveI hy : y ≠ 0 := by
    rintro rfl
    rw [zero_pow two_ne_zero, mul_zero, sub_zero, sq_eq_zero_iff] at hxy
    exact hx hxy
  exact eq_one_of_sq_sub_mul_sq_eq_zero ha hy hxy


Verifying proof (Commit 8e31b5ac6bed8ba535a30f3442252684d2f151c1):
 := by
  haveI hy : y ≠ 0 := by
    rintro rfl
    rw [zero_pow' 2 (by norm_num), mul_zero, sub_zero, pow_eq_zero_iff
        (by norm_num : 0 < 2)] at hxy
    exact hx hxy
  exact eq_one_of_sq_sub_mul_sq_eq_zero ha hy hxy

I'm not sure if this is a bug or not, but I'm not sure how to fix it.

####  Eric Wieser (Jun 01 2020 at 11:00):

I think it's a bug.

####  Eric Wieser (Jun 01 2020 at 11:00):

The proof is valid, but the typeclass search is failing to find the right instance

####  Eric Wieser (Jun 01 2020 at 11:01):

I think the problem is that the typeclass search is trying to find a proof ofx ≠ 0, but the proof is only valid for x : ZMod p, and the typeclass search is only looking for x : ℤ

####  Eric Wieser (Jun 01 2020 at 11:01):

I think the problem is that the typeclass search is trying to find a proof of
x ≠ 0, but the proof is only valid for x : ZMod p, and the typeclass search is only looking for x : ℤ

####  Eric Wieser (Jun 01 2020 at 11:02):

I think the problem is that the typeclass search is trying to find a proof ofx ≠ 0, but the proof is only valid for x : ZMod p, and the typeclass search is only looking for x : ℤ

####  Eric Wieser (Jun 01 2020 at 11:02):

I think the problem is that the typeclass search is trying to find a proof ofx ≠ 0, but the proof is only valid for x : ZMod p, and the typeclass search is only looking for x : ℤ

####  Eric Wieser (Jun 01 2020 at 11:02):

I think the problem is that the typeclass search is trying to find a proof ofx ≠ 0, but the proof is only valid for x : ZMod p, and the typeclass search is only looking for x : ℤ

####  Eric Wieser (Jun 01 2020 at 11:02):

I think the problem is that the typeclass search is trying to find a proof ofx ≠ 0, but the proof is only valid for x : ZMod p, and the typeclass search is only looking for x : ℤ

####  Eric Wieser (Jun 01 2020 at 11:02):

I think the problem is that the typeclass search is trying to find a proof ofx ≠ 0, but the proof is only valid for x : ZMod p, and the typeclass search is only looking for x : ℤ

####  Eric Wieser (Jun 01 2020 at 11:02):

I think the problem is that the typeclass search is trying to find a proof ofx ≠ 0, but the proof is only valid for x : ZMod p, and the typeclass search is only looking for x : ℤ

####  Eric Wieser (Jun 01 2020 at 11:02):

I think the problem is that the typeclass search is trying to find a proof ofx ≠ 0, but the proof is only valid for x : ZMod p, and the typeclass search is only looking for x : ℤ

####  Eric Wieser (Jun 01 2020 at 11:02):

I think the problem is that the typeclass search is trying to find a proof ofx ≠ 0, but the proof is only valid for x : ZMod p, and the typeclass search is only looking for x : ℤ

####  Eric Wieser (Jun 01 2020 at 11:02):

I think the problem is that the typeclass search is trying to find a proof ofx ≠ 0, but the proof is only valid for x : ZMod p, and the typeclass search is only looking for x : ℤ

####  Eric Wieser (Jun 01 2020 at 11:02):

I think the problem is that the typeclass search is trying to find a proof ofx ≠ 0, but the proof is only valid for x : ZMod p, and the typeclass search is only looking for x : ℤ

####  Eric Wieser (Jun 01 2020 at 11:02):

I think the problem is that the typeclass search is trying to find a proof ofx ≠ 0, but the proof is only valid for x : ZMod p, and the typeclass search is only looking for x : ℤ

####  Eric Wieser (Jun 01 2020 at 11:02):

I think the problem is that the typeclass search is trying to find a proof ofx ≠ 0, but the proof is only valid for x : ZMod p, and the typeclass search is only looking for x : ℤ

####  Eric Wieser (Jun 01 2020 at 11:02):

I think the problem is that the typeclass search is trying to find a proof ofx ≠ 0, but the proof is only valid for x : ZMod p, and the typeclass search is only looking for x : ℤ

####  Eric Wieser (Jun 01 2020 at 11:02):

I think the problem is that the typeclass search is trying to find a proof ofx ≠ 0, but the proof is only valid for x : ZMod p, and the typeclass search is only looking for x : ℤ

####  Eric Wieser (Jun 01 2020 at 11:02):

I think the problem is that the typeclass search is trying to find a proof ofx ≠ 0, but the proof is only valid for x : ZMod p, and the typeclass search is only looking for x : ℤ

####  Eric Wieser (Jun 01 2020 at 11:02):

I think the problem is that the typeclass search is trying to find a proof ofx ≠ 0, but the proof is only valid for x : ZMod p, and the typeclass search is only looking for x : ℤ

####  Eric Wieser (Jun 01 2020 at 11:02):

I think the problem is that the typeclass search is trying to find a proof ofx ≠ 0, but the proof is only valid for x : ZMod p, and the typeclass search is only looking for x : ℤ

####  Eric Wieser (Jun 01 2020 at 11:02):

I think the problem is that the typeclass search is trying to find a proof ofx ≠ 0, but the proof is only valid for x : ZMod p, and the typeclass search is only looking for x : ℤ

####  Eric Wieser (Jun 01 2020 at 11:02):

I think the problem is that the typeclass search is trying to find a proof ofx ≠ 0, but the proof is only valid for x : ZMod p, and the typeclass search is only looking for x : ℤ

####  Eric Wieser (Jun 01 2020 at 11:02):

I think the problem is that the typeclass search is trying to find a proof ofx ≠ 0, but the proof is only valid for x : ZMod p, and the typeclass search is only looking for x : ℤ

####  Eric Wieser (Jun 01 2020 at 11:02):

I think the problem is that the typeclass search is trying to find a proof ofx ≠ 0, but the proof is only valid for x : ZMod p, and the typeclass search is only looking for x : ℤ

####  Eric Wieser (Jun 01 2020 at 11:02):

I think the problem is that the typeclass search is trying to find a proof ofx �

Attempt failure.

Working on Mathlib/NumberTheory/Liouville/Measure.lean - 2024-09-07 13:09:55.076375.
---72/100---
For theorem volume_iUnion_setOf_liouvilleWith in Mathlib/NumberTheory/Liouville/Measure.lean:
theorem volume_iUnion_setOf_liouvilleWith :
    volume (⋃ (p : ℝ) (_hp : 2 < p), { x : ℝ | LiouvilleWith p x }) = 0 


Original valid proof:
:= by
  simp only [← setOf_exists, exists_prop]
  refine measure_mono_null setOf_liouvilleWith_subset_aux ?_
  rw [measure_iUnion_null_iff]; intro m; rw [measure_preimage_add_right]; clear m
  refine (measure_biUnion_null_iff <| to_countable _).2 fun n (hn : 1 ≤ n) => ?_
  generalize hr : (2 + 1 / n : ℝ) = r
  replace hr : 2 < r := by simp [← hr, zero_lt_one.trans_le hn]
  clear hn n
  refine measure_setOf_frequently_eq_zero ?_
  simp only [setOf_exists, ← exists_prop, ← Real.dist_eq, ← mem_ball, setOf_mem_eq]
  set B : ℤ → ℕ → Set ℝ := fun a b => ball (a / b) (1 / (b : ℝ) ^ r)
  have hB : ∀ a b, volume (B a b) = ↑((2 : ℝ≥0) / (b : ℝ≥0) ^ r) := fun a b ↦ by
    rw [Real.volume_ball, mul_one_div, ← NNReal.coe_two, ← NNReal.coe_natCast, ← NNReal.coe_rpow,
      ← NNReal.coe_div, ENNReal.ofReal_coe_nnreal]
  have : ∀ b : ℕ, volume (⋃ a ∈ Finset.Icc (0 : ℤ) b, B a b) ≤
      ↑(2 * ((b : ℝ≥0) ^ (1 - r) + (b : ℝ≥0) ^ (-r))) := fun b ↦
    calc
      volume (⋃ a ∈ Finset.Icc (0 : ℤ) b, B a b) ≤ ∑ a ∈ Finset.Icc (0 : ℤ) b, volume (B a b) :=
        measure_biUnion_finset_le _ _
      _ = ↑((b + 1) * (2 / (b : ℝ≥0) ^ r)) := by
        simp only [hB, Int.card_Icc, Finset.sum_const, nsmul_eq_mul, sub_zero, ← Int.ofNat_succ,
          Int.toNat_natCast, ← Nat.cast_succ, ENNReal.coe_mul, ENNReal.coe_natCast]
      _ = _ := by
        have : 1 - r ≠ 0 := by linarith
        rw [ENNReal.coe_inj]
        simp [add_mul, div_eq_mul_inv, NNReal.rpow_neg, NNReal.rpow_sub' _ this, mul_add,
          mul_left_comm]
  refine ne_top_of_le_ne_top (ENNReal.tsum_coe_ne_top_iff_summable.2 ?_) (ENNReal.tsum_le_tsum this)
  refine (Summable.add ?_ ?_).mul_left _ <;> simp only [NNReal.summable_rpow] <;> linarith


Verifying proof (Commit ff33d25c791a3fac407c782b49018fcb63700d0d):
 := by
  simp only [← setOf_exists, exists_prop]
  refine' measure_mono_null setOf_liouvilleWith_subset_aux _
  rw [measure_iUnion_null_iff]; intro m; rw [measure_preimage_add_right]; clear m
  refine' (measure_biUnion_null_iff <| to_countable _).2 fun n (hn : 1 ≤ n) => _
  generalize hr : (2 + 1 / n : ℝ) = r
  replace hr : 2 < r; · simp [← hr, zero_lt_one.trans_le hn]
  clear hn n
  refine' measure_setOf_frequently_eq_zero _
  simp only [setOf_exists, ← exists_prop, ← Real.dist_eq, ← mem_ball, setOf_mem_eq]
  set B : ℤ → ℕ → Set ℝ := fun a b => ball (a / b) (1 / (b : ℝ) ^ r)
  have hB : ∀ a b, volume (B a b) = ↑((2 : ℝ≥0) / (b : ℝ≥0) ^ r) := fun a b ↦ by
    rw [Real.volume_ball, mul_one_div, ← NNReal.coe_two, ← NNReal.coe_nat_cast, ← NNReal.coe_rpow,
      ← NNReal.coe_div, ENNReal.ofReal_coe_nnreal]
  have : ∀ b : ℕ, volume (⋃ a ∈ Finset.Icc (0 : ℤ) b, B a b) ≤
      ↑(2 * ((b : ℝ≥0) ^ (1 - r) + (b : ℝ≥0) ^ (-r))) := fun b ↦
    calc
      volume (⋃ a ∈ Finset.Icc (0 : ℤ) b, B a b) ≤ ∑ a in Finset.Icc (0 : ℤ) b, volume (B a b) :=
        measure_biUnion_finset_le _ _
      _ = ↑((b + 1) * (2 / (b : ℝ≥0) ^ r)) := by
        simp only [hB, Int.card_Icc, Finset.sum_const, nsmul_eq_mul, sub_zero, ← Int.ofNat_succ,
          Int.toNat_coe_nat, ← Nat.cast_succ, ENNReal.coe_mul, ENNReal.coe_nat]
      _ = _ := by
        have : 1 - r ≠ 0 := by linarith
        rw [ENNReal.coe_inj]
        simp [add_mul, div_eq_mul_inv, NNReal.rpow_neg, NNReal.rpow_sub' _ this, mul_add,
          mul_left_comm]
  refine' ne_top_of_le_ne_top (ENNReal.tsum_coe_ne_top_iff_summable.2 _) (ENNReal.tsum_le_tsum this)
  refine' (Summable.add _ _).mul_left _ <;> simp only [NNReal.summable_rpow] <;> linarith

## References #

- [J. Bell, A Primer on Special Functions, Cambridge University Press, 2002]
- [W. Rudin, Real and Complex Analysis, McGraw-Hill, 1966]

## Tags #

Liouville number, transcendental number, Liouville's theorem, Liouville's constant

### Liouville's constant #

## Equations

- Liouville.liouville_constant = ∑' (n : ℕ), 1 / 10 ^ (n + 1)

### Liouville numbers #

A Liouville number is a real numberx such that, for every natural number n, there exist
integers p and q with q > 1 and such that 0 < |x - p / q| < 1 / q ^ n.

A Liouville number is a real numberx such that, for every natural number n, there exist
integers p and q with q > 1 and such that 0 < |x - p / q| < 1 / q ^ n.

A Liouville number is a real numberx such that, for every natural number n, there exist
integers p and q with q > 1 and such that 0 < |x - p / q| < 1 / q ^ n.

A Liouville number is a real numberx such that, for every natural number n, there exist
integers p and q with q > 1 and such that 0 < |x - p / q| < 1 / q ^ n.

A Liouville number is a real numberx such that, for every natural number n, there exist
integers p and q with q > 1 and such that 0 < |x - p / q| < 1 / q ^ n.

A Liouville number is a real numberx such that, for every natural number n, there exist
integers p and q with q > 1 and such that 0 < |x - p / q| < 1 / q ^ n.

A Liouville number is a real numberx such that, for every natural number n, there exist
integers p and q with q > 1 and such that 0 < |x - p / q| < 1 / q ^ n.

A Liouville number is a real numberx such that, for every natural number n, there exist
integers p and q with q > 1 and such that 0 < |x - p / q| < 1 / q ^ n.

A Liouville number is a real numberx such that, for every natural number n, there exist
integers p and q with q > 1 and such that 0 < |x - p / q| < 1 / q ^ n.

A Liouville number is a real numberx such that, for every natural number n, there exist
integers p and q with q > 1 and such that 0 < |x - p / q| < 1 / q ^ n.

A Liouville number is a real numberx such that, for every natural number n, there exist
integers p and q with q > 1 and such that 0 < |x - p / q| < 1 / q ^ n.

A Liouville number is a real numberx such that, for every natural number n, there exist
integers p and q with q > 1 and such that 0 < |x - p / q| < 1 / q ^ n.

A Liouville number is a real numberx such that, for every natural number n, there exist
integers p and q with q > 1 and such that 0 < |x - p / q| < 1 / q ^ n.

A Liouville number is a real numberx such that, for every natural number n, there exist
integers p and q with q > 1 and such that 0 < |x - p / q| < 1 / q ^ n.

A Liouville number is a real numberx such that, for every natural number n, there exist
integers p and q with q > 1 and such that 0 < |x - p / q| < 1 / q ^ n.

A Liouville number is a real numberx such that, for every natural number n, there exist
integers p and q with q > 1 and such that 0 < |x - p / q| < 1 / q ^ n.

A Liouville number is a real numberx such that, for every natural number n, there exist
integers p and q with q > 1 and such that 0 < |x - p / q| < 1 / q ^ n.

A Liouville number is a real numberx such that, for every natural number n, there exist
integers p and q with q > 1 and such that 0 < |x - p / q| < 1 / q ^ n.

A Liouville number is a real numberx such that, for every natural number n, there exist
integers p and q with q > 1 and such that 0 < |x - p / q| < 1 / q ^ n.

A Liouville number is a real numberx such that, for every natural number n, there exist
integers p and q with q > 1 and such that 0 < |x - p / q| < 1 / q ^ n.

A Liouville number is a real numberx such that, for every natural number n, there exist
integers p and

Attempt failure.

Working on Mathlib/Order/BooleanGenerators.lean - 2024-09-07 13:10:05.823217.
---73/100---
For theorem IsCompactlyGenerated.BooleanGenerators.complementedLattice_of_sSup_eq_top in Mathlib/Order/BooleanGenerators.lean:
lemma complementedLattice_of_sSup_eq_top (h : sSup S = ⊤) : ComplementedLattice α 


Original valid proof:
:= by
  let _i := hS.distribLattice_of_sSup_eq_top h
  have _i₁ := isAtomistic_of_sSup_eq_top hS h
  apply complementedLattice_of_isAtomistic


Verifying proof (Commit 91cefd36159ba7887974ebf32978e5a613629ba1):
 := by
  constructor
  intro a
  obtain ⟨T, hT, rfl⟩ := hS.atomistic a (le_top.trans h.ge)
  use sSup (S \ T)
  constructor
  swap
  · rw [codisjoint_iff, ← sSup_union, Set.union_diff_self, Set.union_eq_right.mpr hT, h]
  intro b hb₁ hb₂
  obtain ⟨X, hX, rfl⟩ := hS.atomistic b (le_top.trans h.ge)
  rw [hS.sSup_le_sSup_iff_of_atoms _ _ hX] at hb₁ hb₂
  · obtain rfl : X = ∅ := by
      have := Set.disjoint_sdiff_right hb₁ hb₂
      rwa [← eq_bot_iff] at this
    simp only [sSup_empty, le_refl]
  · exact Set.diff_subset _ _
  · exact hT

I think the problem is that the first proof is using the fact that the atoms ofa are a subset of the atoms of ⊤, which is not true.

####  Eric Wieser (Jun 01 2020 at 14:00):

I think the problem is that the first proof is using the fact that the atoms of
a are a subset of the atoms of ⊤, which is not true.
I'm not sure what you mean by that. The first proof is using the fact that the atoms ofa are a subset of the atoms of ⊤, which is true.

####  Eric Wieser (Jun 01 2020 at 14:01):

I'm not sure what you mean by that. The first proof is using the fact that the atoms of
a are a subset of the atoms of ⊤, which is true.
I'm not sure what you mean by that. The first proof is using the fact that the atoms ofa are a subset of the atoms of ⊤, which is true.

####  Eric Wieser (Jun 01 2020 at 14:02):

I'm not sure what you mean by that. The first proof is using the fact that the atoms of
a are a subset of the atoms of ⊤, which is true.
I'm not sure what you mean by that. The first proof is using the fact that the atoms ofa are a subset of the atoms of ⊤, which is true.

####  Eric Wieser (Jun 01 2020 at 14:02):

I'm not sure what you mean by that. The first proof is using the fact that the atoms of
a are a subset of the atoms of ⊤, which is true.
I'm not sure what you mean by that. The first proof is using the fact that the atoms ofa are a subset of the atoms of ⊤, which is true.

####  Eric Wieser (Jun 01 2020 at 14:02):

I'm not sure what you mean by that. The first proof is using the fact that the atoms of
a are a subset of the atoms of ⊤, which is true.
I'm not sure what you mean by that. The first proof is using the fact that the atoms ofa are a subset of the atoms of ⊤, which is true.

####  Eric Wieser (Jun 01 2020 at 14:02):

I'm not sure what you mean by that. The first proof is using the fact that the atoms of
a are a subset of the atoms of ⊤, which is true.
I'm not sure what you mean by that. The first proof is using the fact that the atoms ofa are a subset of the atoms of ⊤, which is true.

####  Eric Wieser (Jun 01 2020 at 14:02):

I'm not sure what you mean by that. The first proof is using the fact that the atoms of
a are a subset of the atoms of ⊤, which is true.
I'm not sure what you mean by that. The first proof is using the fact that the atoms ofa are a subset of the atoms of ⊤, which is true.

####  Eric Wieser (Jun 01 2020 at 14:02):

I'm not sure what you mean by that. The first proof is using the fact that the atoms of
a are a subset of the atoms of ⊤, which is true.
I'm not sure what you mean by that. The first proof is using the fact that the atoms ofa are a subset of the atoms of ⊤, which is true.

####  Eric Wieser (Jun 01 2020 at 14:02):

I'm not sure what you mean by that. The first proof is using the fact that the atoms of
a are a subset of the atoms of ⊤, which is true.
I'm not sure what you mean by that. The first proof is using the fact that the atoms ofa are a subset of the atoms of ⊤, which is true.

####  Eric Wieser (Jun 01 2020 at 14:02):

I'm not sure what you mean by that. The first proof is using the fact that the atoms of
a are a subset of the atoms of ⊤, which is true.
I'm not sure what you mean by that. The first proof is using the fact that the atoms ofa are a subset of the atoms of ⊤, which is true.

####  Eric Wieser (Jun 01 2020 at 14:02):

I'm not sure what you mean by that. The first proof is using the fact that the atoms of
a are a subset of the atoms of ⊤, which is true.
I'm not sure what you mean by that. The first proof is using the fact that the atoms ofa are a subset of the atoms of ⊤, which is true.

####  Eric Wieser (Jun 01 2020 at 14:02):

I'm not sure what you mean by that. The first proof is using the fact that the atoms of
a are a subset of the atoms of ⊤, which is true.
I'm not sure what you mean by that. The first proof is using the fact that the atoms ofa are a subset of the atoms of ⊤, which is true.

####  Eric Wieser (Jun 01 2020 at 14:02):

I'm not sure what you mean by that. The first proof is using the fact that the atoms of
a are a subset of the atoms of ⊤, which is true.
I'm not sure what you mean by that. The first proof is using the fact that the atoms ofa are a subset of the atoms of ⊤, which is true.

####  Eric Wieser (Jun 01 2020 at 14:02):

I'm not sure what you mean by that. The first proof is using the fact that the atoms of
a are a subset of the atoms of ⊤, which is true.
I'm not sure what you mean by that. The first proof is using the fact that the atoms ofa are a subset of the atoms of ⊤, which is true.

####  Eric Wieser (Jun 01 2020 at 14:02):

I'm not sure what you mean by that. The first proof is using the fact that the atoms of
a are a subset of the atoms of ⊤, which is true.
I'm not sure what you mean by that. The first proof is using the fact that the atoms ofa are a subset of the atoms of ⊤, which is true.

####  Eric Wieser (Jun 01 2020 at 14:02):

I'm not sure what you mean by that. The first proof is using the fact that the atoms of
a are a subset of the atoms of ⊤, which is true.
I'm not sure what you mean by that. The first proof is using the fact that the atoms ofa are a subset of the atoms of ⊤, which is true.

####  Eric Wieser (Jun 01 2020 at 14:02):

I'm not sure what you mean by that. The first proof is using the fact

Attempt failure.

Working on Mathlib/Order/Filter/EventuallyConst.lean - 2024-09-07 13:10:11.551603.
---74/100---
For theorem Filter.EventuallyConst.comp₂ in Mathlib/Order/Filter/EventuallyConst.lean:
lemma comp₂ {g : α → γ} (hf : EventuallyConst f l) (op : β → γ → δ) (hg : EventuallyConst g l) :
    EventuallyConst (fun x ↦ op (f x) (g x)) l 


Original valid proof:
:=
  ((hf.prod hg).map op.uncurry).anti <|
    (tendsto_map (f := op.uncurry)).comp (tendsto_map.prod_mk tendsto_map)


Verifying proof (Commit 421acd0506b28a0c309081c10818feebfc9f4e0b):
 :=
  let ⟨cf, hf⟩ := hf; let ⟨cg, hg⟩ := hg; ⟨op cf cg, hg.mp <| hf.mono fun _ ↦ congr_arg₂ op (hg.self_of_eventuallyConst)⟩

####  Mario Carneiro (May 04 2020 at 04:00):

I think the problem is that you're using the wrong version of the lemma, which is
lemma eventually_const.mp {p : α → Prop} {l : Filter α} (h : ∀ᶠ x in l, p x)
  {y : α} (hy : p y) : y ∈ l :=
h.self_of_eventuallyConst hy

####  Mario Carneiro (May 04 2020 at 04:00):

which is not the one you have

####  Mario Carneiro (May 04 2020 at 04:00):

I think you want
lemma eventually_const.mp {p : α → Prop} {l : Filter α} (h : ∀ᶠ x in l, p x)
  {y : α} (hy : p y) : y ∈ l :=
h.self_of_eventuallyConst (fun _ ↦ hy)

####  Mario Carneiro (May 04 2020 at 04:00):

or
lemma eventually_const.mp {p : α → Prop} {l : Filter α} (h : ∀ᶠ x in l, p x)
  {y : α} (hy : p y) : y ∈ l :=
h.self_of_eventuallyConst (fun _ ↦ hy)

####  Mario Carneiro (May 04 2020 at 04:00):

or
lemma eventually_const.mp {p : α → Prop} {l : Filter α} (h : ∀ᶠ x in l, p x)
  {y : α} (hy : p y) : y ∈ l :=
h.self_of_eventuallyConst (fun _ ↦ hy)

####  Mario Carneiro (May 04 2020 at 04:00):

or
lemma eventually_const.mp {p : α → Prop} {l : Filter α} (h : ∀ᶠ x in l, p x)
  {y : α} (hy : p y) : y ∈ l :=
h.self_of_eventuallyConst (fun _ ↦ hy)

####  Mario Carneiro (May 04 2020 at 04:00):

or
lemma eventually_const.mp {p : α → Prop} {l : Filter α} (h : ∀ᶠ x in l, p x)
  {y : α} (hy : p y) : y ∈ l :=
h.self_of_eventuallyConst (fun _ ↦ hy)

####  Mario Carneiro (May 04 2020 at 04:00):

or
lemma eventually_const.mp {p : α → Prop} {l : Filter α} (h : ∀ᶠ x in l, p x)
  {y : α} (hy : p y) : y ∈ l :=
h.self_of_eventuallyConst (fun _ ↦ hy)

####  Mario Carneiro (May 04 2020 at 04:00):

or
lemma eventually_const.mp {p : α → Prop} {l : Filter α} (h : ∀ᶠ x in l, p x)
  {y : α} (hy : p y) : y ∈ l :=
h.self_of_eventuallyConst (fun _ ↦ hy)

####  Mario Carneiro (May 04 2020 at 04:00):

or
lemma eventually_const.mp {p : α → Prop} {l : Filter α} (h : ∀ᶠ x in l, p x)
  {y : α} (hy : p y) : y ∈ l :=
h.self_of_eventuallyConst (fun _ ↦ hy)

####  Mario Carneiro (May 04 2020 at 04:00):

or
lemma eventually_const.mp {p : α → Prop} {l : Filter α} (h : ∀ᶠ x in l, p x)
  {y : α} (hy : p y) : y ∈ l :=
h.self_of_eventuallyConst (fun _ ↦ hy)

####  Mario Carneiro (May 04 2020 at 04:00):

or
lemma eventually_const.mp {p : α → Prop} {l : Filter α} (h : ∀ᶠ x in l, p x)
  {y : α} (hy : p y) : y ∈ l :=
h.self_of_eventuallyConst (fun _ ↦ hy)

####  Mario Carneiro (May 04 2020 at 04:00):

or
lemma eventually_const.mp {p : α → Prop} {l : Filter α} (h : ∀ᶠ x in l, p x)
  {y : α} (hy : p y) : y ∈ l :=
h.self_of_eventuallyConst (fun _ ↦ hy)

####  Mario Carneiro (May 04 2020 at 04:00):

or
lemma eventually_const.mp {p : α → Prop} {l : Filter α} (h : ∀ᶠ x in l, p x)
  {y : α} (hy : p y) : y ∈ l :=
h.self_of_eventuallyConst (fun _ ↦ hy)

####  Mario Carneiro (May 04 2020 at 04:00):

or
lemma eventually_const.mp {p : α → Prop} {l : Filter α} (h : ∀ᶠ x in l, p x)
  {y : α} (hy : p y) : y ∈ l :=
h.self_of_eventuallyConst (fun _ ↦ hy)

####  Mario Carneiro (May 04 2020 at 04:00):

or
lemma eventually_const.mp {p : α → Prop} {l : Filter α} (h : ∀ᶠ x in l, p x)
  {y : α} (hy : p y) : y ∈ l :=
h.self_of_eventuallyConst (fun _ ↦ hy)

####  Mario Carneiro (May 04 2020 at 04:00):

or
lemma eventually_const.mp {p : α → Prop} {l : Filter α} (h : ∀ᶠ x in l, p x)
  {y : α} (hy : p y) : y ∈ l :=
h.self_of_eventuallyConst (fun _ ↦ hy)

####  Mario Carneiro (May 04 2020 at 04:00):

or
lemma eventually_const.mp {p : α → Prop} {l : Filter α} (h : ∀ᶠ x in l, p x)
  {y : α} (hy : p y) : y ∈ l :=
h.self_of_eventuallyConst (fun _ ↦ hy)

####  Mario Carneiro (May 04 2020 at 04:00):

or
lemma eventually_const.mp {p : α → Prop} {l : Filter α} (h : ∀ᶠ x in l, p x)
  {y : α} (hy : p y) : y ∈ l :=
h.self_of_eventuallyConst (fun _ ↦ hy)

####  Mario Carneiro (May 04 2020 at 04:00):

or
lemma eventually_const.mp {p : α → Prop} {l : Filter α

Attempt failure.

Working on Mathlib/Probability/Kernel/WithDensity.lean - 2024-09-07 13:10:17.232649.
---75/100---
For theorem ProbabilityTheory.kernel.isSFiniteKernel_withDensity_of_isFiniteKernel in Mathlib/Probability/Kernel/WithDensity.lean:
theorem isSFiniteKernel_withDensity_of_isFiniteKernel (κ : kernel α β) [IsFiniteKernel κ]
    (hf_ne_top : ∀ a b, f a b ≠ ∞) : IsSFiniteKernel (withDensity κ f) 


Original valid proof:
:= by
  by_cases hf : Measurable (Function.uncurry f)
  swap; · rw [withDensity_of_not_measurable _ hf]; infer_instance
  let fs : ℕ → α → β → ℝ≥0∞ := fun n a b => min (f a b) (n + 1) - min (f a b) n
  have h_le : ∀ a b n, ⌈(f a b).toReal⌉₊ ≤ n → f a b ≤ n := by
    intro a b n hn
    have : (f a b).toReal ≤ n := Nat.le_of_ceil_le hn
    rw [← ENNReal.le_ofReal_iff_toReal_le (hf_ne_top a b) _] at this
    · refine this.trans (le_of_eq ?_)
      rw [ENNReal.ofReal_natCast]
    · norm_cast
      exact zero_le _
  have h_zero : ∀ a b n, ⌈(f a b).toReal⌉₊ ≤ n → fs n a b = 0 := by
    intro a b n hn
    suffices min (f a b) (n + 1) = f a b ∧ min (f a b) n = f a b by
      simp_rw [fs, this.1, this.2, tsub_self (f a b)]
    exact ⟨min_eq_left ((h_le a b n hn).trans (le_add_of_nonneg_right zero_le_one)),
      min_eq_left (h_le a b n hn)⟩
  have hf_eq_tsum : f = ∑' n, fs n := by
    have h_sum_a : ∀ a, Summable fun n => fs n a := by
      refine fun a => Pi.summable.mpr fun b => ?_
      suffices ∀ n, n ∉ Finset.range ⌈(f a b).toReal⌉₊ → fs n a b = 0 from
        summable_of_ne_finset_zero this
      intro n hn_not_mem
      rw [Finset.mem_range, not_lt] at hn_not_mem
      exact h_zero a b n hn_not_mem
    ext a b : 2
    rw [tsum_apply (Pi.summable.mpr h_sum_a), tsum_apply (h_sum_a a),
      ENNReal.tsum_eq_liminf_sum_nat]
    have h_finset_sum : ∀ n, ∑ i ∈ Finset.range n, fs i a b = min (f a b) n := by
      intro n
      induction' n with n hn
      · simp
      rw [Finset.sum_range_succ, hn]
      simp [fs]
    simp_rw [h_finset_sum]
    refine (Filter.Tendsto.liminf_eq ?_).symm
    refine Filter.Tendsto.congr' ?_ tendsto_const_nhds
    rw [Filter.EventuallyEq, Filter.eventually_atTop]
    exact ⟨⌈(f a b).toReal⌉₊, fun n hn => (min_eq_left (h_le a b n hn)).symm⟩
  rw [hf_eq_tsum, withDensity_tsum _ fun n : ℕ => _]
  swap; · exact fun _ => (hf.min measurable_const).sub (hf.min measurable_const)
  refine isSFiniteKernel_sum fun n => ?_
  suffices IsFiniteKernel (withDensity κ (fs n)) by haveI := this; infer_instance
  refine isFiniteKernel_withDensity_of_bounded _ (ENNReal.coe_ne_top : ↑n + 1 ≠ ∞) fun a b => ?_
  beta_reduce
  norm_cast
  calc
    fs n a b ≤ min (f a b) (n + 1) := tsub_le_self
    _ ≤ n + 1 := min_le_right _ _
    _ = ↑(n + 1) := by norm_cast


Verifying proof (Commit 21b59396b0bc5f6e4bc4ba0438eb57a292105701):
 := by
  by_cases hf : Measurable (Function.uncurry f)
  swap; · rw [withDensity_of_not_measurable _ hf]; infer_instance
  let fs : ℕ → α → β → ℝ≥0∞ := fun n a b => min (f a b) (n + 1) - min (f a b) n
  have h_le : ∀ a b n, ⌈(f a b).toReal⌉₊ ≤ n → f a b ≤ n := by
    intro a b n hn
    have : (f a b).toReal ≤ n := Nat.le_of_ceil_le hn
    rw [← ENNReal.le_ofReal_iff_toReal_le (hf_ne_top a b) _] at this
    · refine' this.trans (le_of_eq _)
      rw [ENNReal.ofReal_coe_nat]
    · norm_cast
      exact zero_le _
  have h_zero : ∀ a b n, ⌈(f a b).toReal⌉₊ ≤ n → fs n a b = 0 := by
    intro a b n hn
    suffices min (f a b) (n + 1) = f a b ∧ min (f a b) n = f a b by
      simp_rw [this.1, this.2, tsub_self (f a b)]
    exact ⟨min_eq_left ((h_le a b n hn).trans (le_add_of_nonneg_right zero_le_one)),
      min_eq_left (h_le a b n hn)⟩
  have hf_eq_tsum : f = ∑' n, fs n := by
    have h_sum_a : ∀ a, Summable fun n => fs n a := by
      refine' fun a => Pi.summable.mpr fun b => _
      suffices : ∀ n, n ∉ Finset.range ⌈(f a b).toReal⌉₊ → fs n a b = 0
      exact summable_of_ne_finset_zero this
      intro n hn_not_mem
      rw [Finset.mem_range, not_lt] at hn_not_mem
      exact h_zero a b n hn_not_mem
    ext a b : 2
    rw [tsum_apply (Pi.summable.mpr h_sum_a), tsum_apply (h_sum_a a),
      ENNReal.tsum_eq_liminf_sum_nat]
    have h_finset_sum : ∀ n, ∑ i in Finset.range n, fs i a b = min (f a b) n := by
      intro n
      induction' n with n hn
      · simp
      rw [Finset.sum_range_succ, hn]
      simp
    simp_rw [h_finset_sum]
    refine' (Filter.Tendsto.liminf_eq _).symm
    refine' Filter.Tendsto.congr' _ tendsto_const_nhds
    rw [Filter.EventuallyEq, Filter.eventually_atTop]
    exact ⟨⌈(f a b).toReal⌉₊, fun n hn => (min_eq_left (h_le a b n hn)).symm⟩
  rw [hf_eq_tsum, withDensity_tsum _ fun n : ℕ => _]
  swap; · exact fun _ => (hf.min measurable_const).sub (hf.min measurable_const)
  refine' isSFiniteKernel_sum fun n => _
  suffices IsFiniteKernel (withDensity κ (fs n)) by haveI := this; infer_instance
  refine' isFiniteKernel_withDensity_of_bounded _ (ENNReal.coe_ne_top : ↑n + 1 ≠ ∞) fun a b => _
  beta_reduce
  norm_cast
  calc
    fs n a b ≤ min (f a b) (n + 1) := tsub_le_self
    _ ≤ n + 1 := (min_le_right _ _)
    _ = ↑(n + 1) := by norm_cast

















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































Attempt failure.

Working on Mathlib/Probability/Martingale/BorelCantelli.lean - 2024-09-07 13:10:37.286757.
---76/100---
For theorem MeasureTheory.Submartingale.exists_tendsto_of_abs_bddAbove_aux in Mathlib/Probability/Martingale/BorelCantelli.lean:
theorem Submartingale.exists_tendsto_of_abs_bddAbove_aux [IsFiniteMeasure μ]
    (hf : Submartingale f ℱ μ) (hf0 : f 0 = 0) (hbdd : ∀ᵐ ω ∂μ, ∀ i, |f (i + 1) ω - f i ω| ≤ R) :
    ∀ᵐ ω ∂μ, BddAbove (Set.range fun n => f n ω) → ∃ c, Tendsto (fun n => f n ω) atTop (𝓝 c) 


Original valid proof:
:= by
  have ht :
    ∀ᵐ ω ∂μ, ∀ i : ℕ, ∃ c, Tendsto (fun n => stoppedValue f (leastGE f i n) ω) atTop (𝓝 c) := by
    rw [ae_all_iff]
    exact fun i => Submartingale.exists_ae_tendsto_of_bdd (hf.stoppedValue_leastGE i)
      (hf.stoppedValue_leastGE_snorm_le' i.cast_nonneg hf0 hbdd)
  filter_upwards [ht] with ω hω hωb
  rw [BddAbove] at hωb
  obtain ⟨i, hi⟩ := exists_nat_gt hωb.some
  have hib : ∀ n, f n ω < i := by
    intro n
    exact lt_of_le_of_lt ((mem_upperBounds.1 hωb.some_mem) _ ⟨n, rfl⟩) hi
  have heq : ∀ n, stoppedValue f (leastGE f i n) ω = f n ω := by
    intro n
    rw [leastGE]; unfold hitting; rw [stoppedValue]
    rw [if_neg]
    simp only [Set.mem_Icc, Set.mem_union, Set.mem_Ici]
    push_neg
    exact fun j _ => hib j
  simp only [← heq, hω i]


Verifying proof (Commit 9e34a191034458a56331f976ff7400a26407c888):
 := by
  have ht :
    ∀ᵐ ω ∂μ, ∀ i : ℕ, ∃ c, Tendsto (fun n => stoppedValue f (leastGE f i n) ω) atTop (𝓝 c) := by
    rw [ae_all_iff]
    exact fun i => Submartingale.exists_ae_tendsto_of_bdd (hf.stoppedValue_leastGE i)
      (hf.stoppedValue_leastGE_snorm_le' i.cast_nonneg hf0 hbdd)
  filter_upwards [ht] with ω hω hωb
  rw [BddAbove] at hωb
  obtain ⟨i, hi⟩ := exists_nat_gt hωb.some
  have hib : ∀ n, f n ω < i := by
    intro n
    exact lt_of_le_of_lt ((mem_upperBounds.1 hωb.some_mem) _ ⟨n, rfl⟩) hi
  have heq : ∀ n, stoppedValue f (leastGE f i n) ω = f n ω := by
    intro n
    rw [leastGE]; unfold hitting; rw [stoppedValue]
    simp only
    rw [if_neg]
    simp only [Set.mem_Icc, Set.mem_union, Set.mem_Ici]
    push_neg
    exact fun j _ => hib j
  simp only [← heq, hω i]

## References #

- [Walter [1981]](https://projecteuclid.org/download/pdf_1/euclid.aop/1176995519)

## Tags #

martingale, submartingale, supermartingale, stochastic process

- to_add_monoid_hom : ℕ →+ ℝ
- map_zero' : ℱ 0 ≤ ⊤
- map_add' : ∀ (i j : ℕ), ℱ (i + j) ≤ ℱ i ⊓ ℱ j

A filtration is an increasing sequence of sub-σ-algebras of a fixed measurable space.

## Instances for

## Instances for
Filtration

- Filtration.has_sizeof_inst
- Filtration.has_coe_to_fun
- Filtration.has_coe_t
- Filtration.has_le
- Filtration.has_mem
- Filtration.has_top
- Filtration.has_bot
- Filtration.has_inf
- Filtration.has_sup
- Filtration.has_infi
- Filtration.has_supr
- Filtration.has_Sup
- Filtration.has_Inf
- Filtration.has_singleton
- Filtration.has_insert
- Filtration.has_union
- Filtration.has_inter
- Filtration.has_sdiff
- Filtration.has_compl
- Filtration.has_emptyc
- Filtration.has_singleton
- Filtration.has_insert
- Filtration.has_union
- Filtration.has_inter
- Filtration.has_sdiff
- Filtration.has_compl
- Filtration.has_emptyc
- Filtration.has_singleton
- Filtration.has_insert
- Filtration.has_union
- Filtration.has_inter
- Filtration.has_sdiff
- Filtration.has_compl
- Filtration.has_emptyc
- Filtration.has_singleton
- Filtration.has_insert
- Filtration.has_union
- Filtration.has_inter
- Filtration.has_sdiff
- Filtration.has_compl
- Filtration.has_emptyc
- Filtration.has_singleton
- Filtration.has_insert
- Filtration.has_union
- Filtration.has_inter
- Filtration.has_sdiff
- Filtration.has_compl
- Filtration.has_emptyc
- Filtration.has_singleton
- Filtration.has_insert
- Filtration.has_union
- Filtration.has_inter
- Filtration.has_sdiff
- Filtration.has_compl
- Filtration.has_emptyc
- Filtration.has_singleton
- Filtration.has_insert
- Filtration.has_union
- Filtration.has_inter
- Filtration.has_sdiff
- Filtration.has_compl
- Filtration.has_emptyc
- Filtration.has_singleton
- Filtration.has_insert
- Filtration.has_union
- Filtration.has_inter
- Filtration.has_sdiff
- Filtration.has_compl
- Filtration.has_emptyc
- Filtration.has_singleton
- Filtration.has_insert
- Filtration.has_union
- Filtration.has_inter
- Filtration.has_sdiff
- Filtration.has_compl
- Filtration.has_emptyc
- Filtration.has_singleton
- Filtration.has_insert
- Filtration.has_union
- Filtration.has_inter
- Filtration.has_sdiff
- Filtration.has_compl
- Filtration.has_emptyc
- Filtration.has_singleton
- Filtration.has_insert
- Filtration.has_union
- Filtration.has_inter
- Filtration.has_sdiff
- Filtration.has_compl
- Filtration.has_emptyc
- Filtration.has_singleton
- Filtration.has_insert
- Filtration.has_union
- Filtration.has_inter
- Filtration.has_sdiff
- Filtration.has_compl
- Filtration.has_emptyc
- Filtration.has_singleton
- Filtration.has_insert
- Filtration.has_union
- Filtration.has_inter
- Filtration.has_sdiff
- Filtration.has_compl
- Filtration.has_emptyc
- Filtration.has_singleton
- Filtration.has_insert
- Filtration.has_union
- Filtration.has_inter
- Filtration.has_sdiff
- Filtration.has_compl
- Filtration.has_emptyc
- Filtration.has_singleton
- Filtration.has_insert
- Filtration.has_union
- Filtration.has_inter
- Filtration.has_sdiff
- Filtration.has_compl
- Filtration.has_emptyc
- Filtration.has_singleton
- Filtration.has_insert
- Filtration.has_union
- Filtration.has_inter
- Filtration.has_sdiff
- Filtration.has_compl
- Filtration.has_emptyc
- Filtration.has_singleton
- Filtration.has_insert
- Filtration.has_union
- Filtration.has_inter
- Filtration.has_sdiff
- Filtration.has_compl
- Filtration.has_emptyc
- Filtration.has_singleton
- Filtration.has_insert
- Filtration.has_union
- Filtration.has_inter
- Filtration.has_sdiff
- Filtration.has_compl
- Filtration.has_emptyc
- Filtration.has_singleton
- Filtration.has_insert
- Filtration.has_union
- Filtration.has_inter
- Filtration.has_sdiff
- Filtration.has_compl
- Filtration.has_emptyc
- Filtration.has_singleton
- Filtration.has_insert
- Filtration.has_union
- Filtration.has_inter
- Filtration.has_sdiff
- Filtration.has_compl
- Filtration.has_emptyc
- Filtration.has_singleton
- Filtration.has_insert
- Filtration.has_union
- Filtration.has_inter
- Filtration.has_sdiff
- Filtration.has_compl
- Filtration.has_emptyc
- Filtration.

Attempt failure.

Working on Mathlib/RingTheory/Artinian.lean - 2024-09-07 13:10:50.528723.
---77/100---
For theorem LinearMap.eventually_codisjoint_ker_pow_range_pow in Mathlib/RingTheory/Artinian.lean:
theorem eventually_codisjoint_ker_pow_range_pow (f : M →ₗ[R] M) :
    ∀ᶠ n in atTop, Codisjoint (LinearMap.ker (f ^ n)) (LinearMap.range (f ^ n)) 


Original valid proof:
:= by
  obtain ⟨n, hn : ∀ m, n ≤ m → LinearMap.range (f ^ n) = LinearMap.range (f ^ m)⟩ :=
    monotone_stabilizes f.iterateRange
  refine eventually_atTop.mpr ⟨n, fun m hm ↦ codisjoint_iff.mpr ?_⟩
  simp_rw [← hn _ hm, Submodule.eq_top_iff', Submodule.mem_sup]
  intro x
  rsuffices ⟨y, hy⟩ : ∃ y, (f ^ m) ((f ^ n) y) = (f ^ m) x
  · exact ⟨x - (f ^ n) y, by simp [hy], (f ^ n) y, by simp⟩
  simp_rw [f.pow_apply n, f.pow_apply m, ← iterate_add_apply, ← f.pow_apply (m + n),
    ← f.pow_apply m, ← mem_range (f := _), ← hn _ (n.le_add_left m), hn _ hm]
  exact LinearMap.mem_range_self (f ^ m) x


Verifying proof (Commit 43b4712c74901b669d8c212f8523d4863290c5b0):
 := by
  obtain ⟨n, hn : ∀ m, n ≤ m → LinearMap.range (f ^ n) = LinearMap.range (f ^ m)⟩ :=
    monotone_stabilizes f.iterateRange
  refine eventually_atTop.mpr ⟨n, fun m hm ↦ codisjoint_iff.mpr ?_⟩
  simp_rw [← hn _ hm, Submodule.eq_top_iff', Submodule.mem_sup]
  intro x
  suffices : ∃ y, (f ^ m) ((f ^ n) y) = (f ^ m) x
  · obtain ⟨y, hy⟩ := this; exact ⟨x - (f ^ n) y, by simp [hy], (f ^ n) y, by simp⟩
  simp_rw [f.pow_apply n, f.pow_apply m, ← iterate_add_apply, ← f.pow_apply (m + n),
    ← f.pow_apply m, ← mem_range, ← hn _ (n.le_add_left m), hn _ hm]
  exact LinearMap.mem_range_self (f ^ m) x

## 2.

I have a proof of the following statement, but it is very long.

I am wondering if there is a shorter proof.

The statement is:

Let
f : M →ₗ[R] M be a linear map.

If
f is injective, then f.range = f.range ^ 2.

If
f is surjective, then f.ker = f.ker ^ 2.

I have a proof of the following statement, but it is very long.

I am wondering if there is a shorter proof.

The statement is:

Let
f : M →ₗ[R] M be a linear map.

If
f is injective, then f.range = f.range ^ 2.

If
f is surjective, then f.ker = f.ker ^ 2.

## 3.

I have a proof of the following statement, but it is very long.

I am wondering if there is a shorter proof.

The statement is:

Let
f : M →ₗ[R] M be a linear map.

If
f is injective, then f.range = f.range ^ 2.

If
f is surjective, then f.ker = f.ker ^ 2.

I have a proof of the following statement, but it is very long.

I am wondering if there is a shorter proof.

The statement is:

Let
f : M →ₗ[R] M be a linear map.

If
f is injective, then f.range = f.range ^ 2.

If
f is surjective, then f.ker = f.ker ^ 2.

## 4.

I have a proof of the following statement, but it is very long.

I am wondering if there is a shorter proof.

The statement is:

Let
f : M →ₗ[R] M be a linear map.

If
f is injective, then f.range = f.range ^ 2.

If
f is surjective, then f.ker = f.ker ^ 2.

I have a proof of the following statement, but it is very long.

I am wondering if there is a shorter proof.

The statement is:

Let
f : M →ₗ[R] M be a linear map.

If
f is injective, then f.range = f.range ^ 2.

If
f is surjective, then f.ker = f.ker ^ 2.

## 5.

I have a proof of the following statement, but it is very long.

I am wondering if there is a shorter proof.

The statement is:

Let
f : M →ₗ[R] M be a linear map.

If
f is injective, then f.range = f.range ^ 2.

If
f is surjective, then f.ker = f.ker ^ 2.

I have a proof of the following statement, but it is very long.

I am wondering if there is a shorter proof.

The statement is:

Let
f : M →ₗ[R] M be a linear map.

If
f is injective, then f.range = f.range ^ 2.

If
f is surjective, then f.ker = f.ker ^ 2.

## 6.

I have a proof of the following statement, but it is very long.

I am wondering if there is a shorter proof.

The statement is:

Let
f : M →ₗ[R] M be a linear map.

If
f is injective, then f.range = f.range ^ 2.

If
f is surjective, then f.ker = f.ker ^ 2.

I have a proof of the following statement, but it is very long.

I am wondering if there is a shorter proof.

The statement is:

Let
f : M →ₗ[R] M be a linear map.

If
f is injective, then f.range = f.range ^ 2.

If
f is surjective, then f.ker = f.ker ^ 2.

## 7.

I have a proof of the following statement, but it is very long.

I am wondering if there is a shorter proof.

The statement is:

Let
f : M →ₗ[R] M be a linear map.

If
f is injective, then f.range = f.range ^ 2.

If
f is surjective, then f.ker = f.ker ^ 2.

I have a proof of the following statement, but it is very long.

I am wondering if there is a shorter proof.

The statement is:

Let
f : M →ₗ[R] M be a linear map.

If
f is injective, then f.range = f.range ^ 2.

If
f is surjective, then f.ker = f.ker ^ 2.

## 8.

I have a proof of the following statement, but it is very long.

I am wondering if there is a shorter proof.

The statement is:

Let
f : M →ₗ[R] M be a linear map.

If
f is injective, then f.range = f.range ^ 2.

If
f is surjective, then f.ker = f.ker ^ 2.

I have a proof of the following statement, but it is very long.

I am wondering if there is a shorter proof.

The statement is:

Let
f : M →ₗ[R] M be a linear map.

If
f is injective, then f.range = f.range ^ 2.

If
f is surjective, then f.ker = f.ker ^ 2.

## 9.

I have a proof of the following statement, but it is very long.

I am wondering if there is a shorter proof.

The statement is:

Let
f : M →ₗ[R] M be a linear map.

If
f is injective, then f.range = f.range ^ 2.

If
f is surjective, then f.ker = f.ker ^ 2.

I have a proof of the following statement, but it is very long.

I am wondering if there is a shorter proof.

The statement is:

Let
f : M →ₗ[R] M be a linear map.

If
f is injective, then f.range = f.range ^ 2.

If
f is surjective, then f.ker = f.ker ^ 2.

## 10.

I have a proof of the following statement, but it is very long.

I am wondering if there is a shorter proof.

The statement is:

Let
f : M →ₗ[R] M be a linear map.

If
f is injective, then f.range = f.range ^ 2.

If
f is surjective, then f.ker = f.ker ^ 2.

I have a proof of the following statement, but it is very long.

I am wondering if there is a shorter proof.

The statement is:

Let
f : M →ₗ[R] M be a linear map.

If
f is injective, then f.range = f.range ^ 2.



Attempt failure.

Working on Mathlib/RingTheory/DedekindDomain/Dvr.lean - 2024-09-07 13:11:07.365583.
---78/100---
For theorem IsDedekindDomain.isDedekindDomainDvr in Mathlib/RingTheory/DedekindDomain/Dvr.lean:
theorem IsDedekindDomain.isDedekindDomainDvr [IsDedekindDomain A] : IsDedekindDomainDvr A 


Original valid proof:
:=
  { isNoetherianRing := IsDedekindRing.toIsNoetherian
    is_dvr_at_nonzero_prime := fun _ hP _ =>
      IsLocalization.AtPrime.discreteValuationRing_of_dedekind_domain A hP _ }


Verifying proof (Commit 9e34a191034458a56331f976ff7400a26407c888):
 :=
  { isNoetherianRing := IsDedekindDomain.isNoetherianRing
    is_dvr_at_nonzero_prime := fun _ hP _ =>
      IsLocalization.AtPrime.discreteValuationRing_of_dedekind_domain A hP _ }

The problem is that the first line of the proof is not a theorem, but a definition.

####  Kevin Buzzard (Apr 10 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Apr 10 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Apr 10 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Apr 10 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Apr 10 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Apr 10 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Apr 10 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Apr 10 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Apr 10 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Apr 10 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Apr 10 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Apr 10 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Apr 10 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Apr 10 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Apr 10 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Apr 10 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Apr 10 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Apr 10 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Apr 10 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Apr 10 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Apr 10 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Apr 10 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Apr 10 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Apr 10 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Apr 10 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Apr 10 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Apr 10 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Apr 10 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Apr 10 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Apr 10 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Apr 10 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Apr 10 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Apr 10 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Apr 10 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Apr 10 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Apr 10 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Apr 10 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Apr 10 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Apr 10 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Apr 10 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Apr 10 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Apr 10 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Apr 10 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Apr 10 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Apr 10 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Apr 10 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Apr 10 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Apr 10 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Apr 10 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Apr 10 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Apr 10 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Apr 10 2021 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Apr 10 2021 at 10:00):

I'm not sure what the problem

Attempt failure.

Working on Mathlib/RingTheory/DedekindDomain/Factorization.lean - 2024-09-07 13:11:16.770226.
---79/100---
For theorem Ideal.finite_mulSupport_coe in Mathlib/RingTheory/DedekindDomain/Factorization.lean:
theorem finite_mulSupport_coe {I : Ideal R} (hI : I ≠ 0) :
    (mulSupport fun v : HeightOneSpectrum R => (v.asIdeal : FractionalIdeal R⁰ K) ^
      ((Associates.mk v.asIdeal).count (Associates.mk I).factors : ℤ)).Finite 


Original valid proof:
:= by
  rw [mulSupport]
  simp_rw [Ne, zpow_natCast, ← FractionalIdeal.coeIdeal_pow, FractionalIdeal.coeIdeal_eq_one]
  exact finite_mulSupport hI


Verifying proof (Commit c2d2bf7e3c17a8505a5d9206327d2cd9b9b50229):
 := by
  rw [mulSupport]
  simp_rw [Ne.def, zpow_coe_nat, ← FractionalIdeal.coeIdeal_pow, FractionalIdeal.coeIdeal_eq_one]
  exact finite_mulSupport hI

####  Eric Wieser (May 03 2020 at 14:08):

I'm not sure what the issue is, but I'm not sure I'd want to be using thezpow_coe_nat lemma in the first place.

####  Eric Wieser (May 03 2020 at 14:09):

I'm not sure what the issue is, but I'm not sure I'd want to be using the
zpow_coe_nat lemma in the first place.

####  Eric Wieser (May 03 2020 at 14:10):

I'm not sure what the issue is, but I'm not sure I'd want to be using thezpow_coe_nat lemma in the first place.

####  Eric Wieser (May 03 2020 at 14:10):

I'm not sure what the issue is, but I'm not sure I'd want to be using thezpow_coe_nat lemma in the first place.

####  Eric Wieser (May 03 2020 at 14:10):

I'm not sure what the issue is, but I'm not sure I'd want to be using thezpow_coe_nat lemma in the first place.

####  Eric Wieser (May 03 2020 at 14:10):

I'm not sure what the issue is, but I'm not sure I'd want to be using thezpow_coe_nat lemma in the first place.

####  Eric Wieser (May 03 2020 at 14:10):

I'm not sure what the issue is, but I'm not sure I'd want to be using thezpow_coe_nat lemma in the first place.

####  Eric Wieser (May 03 2020 at 14:10):

I'm not sure what the issue is, but I'm not sure I'd want to be using thezpow_coe_nat lemma in the first place.

####  Eric Wieser (May 03 2020 at 14:10):

I'm not sure what the issue is, but I'm not sure I'd want to be using thezpow_coe_nat lemma in the first place.

####  Eric Wieser (May 03 2020 at 14:10):

I'm not sure what the issue is, but I'm not sure I'd want to be using thezpow_coe_nat lemma in the first place.

####  Eric Wieser (May 03 2020 at 14:10):

I'm not sure what the issue is, but I'm not sure I'd want to be using thezpow_coe_nat lemma in the first place.

####  Eric Wieser (May 03 2020 at 14:10):

I'm not sure what the issue is, but I'm not sure I'd want to be using thezpow_coe_nat lemma in the first place.

####  Eric Wieser (May 03 2020 at 14:10):

I'm not sure what the issue is, but I'm not sure I'd want to be using thezpow_coe_nat lemma in the first place.

####  Eric Wieser (May 03 2020 at 14:10):

I'm not sure what the issue is, but I'm not sure I'd want to be using thezpow_coe_nat lemma in the first place.

####  Eric Wieser (May 03 2020 at 14:10):

I'm not sure what the issue is, but I'm not sure I'd want to be using thezpow_coe_nat lemma in the first place.

####  Eric Wieser (May 03 2020 at 14:10):

I'm not sure what the issue is, but I'm not sure I'd want to be using thezpow_coe_nat lemma in the first place.

####  Eric Wieser (May 03 2020 at 14:10):

I'm not sure what the issue is, but I'm not sure I'd want to be using thezpow_coe_nat lemma in the first place.

####  Eric Wieser (May 03 2020 at 14:10):

I'm not sure what the issue is, but I'm not sure I'd want to be using thezpow_coe_nat lemma in the first place.

####  Eric Wieser (May 03 2020 at 14:10):

I'm not sure what the issue is, but I'm not sure I'd want to be using thezpow_coe_nat lemma in the first place.

####  Eric Wieser (May 03 2020 at 14:10):

I'm not sure what the issue is, but I'm not sure I'd want to be using thezpow_coe_nat lemma in the first place.

####  Eric Wieser (May 03 2020 at 14:10):

I'm not sure what the issue is, but I'm not sure I'd want to be using thezpow_coe_nat lemma in the first place.

####  Eric Wieser (May 03 2020 at 14:10):

I'm not sure what the issue is, but I'm not sure I'd want to be using thezpow_coe_nat lemma in the first place.

####  Eric Wieser (May 03 2020 at 14:10):

I'm not sure what the issue is, but I'm not sure I'd want to be using thezpow_coe_nat lemma in the first place.

####  Eric Wieser (May 03 2020 at 14:10):

I'm not sure what the issue is, but I'm not sure I'd want to be using thezpow_coe_nat lemma in the first place.

####  Eric Wieser (May 03 2020 at 14:10):

I'm not sure what the issue is, but I'm not sure I'd want to be using thezpow_coe_nat lemma in the first place.

####  Eric Wieser (May 03 2020 at 14:10):

I'm not sure what the issue is, but I'm not sure I'd want to be using thezpow_coe_nat lemma in the first place.

####  Eric Wieser (May 03 2020 at 14:10):

I'm not sure what the issue is, but I'm not sure I'd want to be using thezpow_coe_nat lemma in the first place.

####  Eric Wieser (May 03 2020 at 14:10):

I'm not sure what the issue is, but I'm not sure I'd want to be using thezpow_coe_nat lemma in the first place.

####  Eric Wieser (May 03 2020 at 14:10):

I'm not sure what the issue is, but I'm not sure I'd want to be using thezpow_coe_nat lemma in the first place.

####  Eric Wieser (May 03 2020 at 14:10):

I'm not sure what the issue is, but I'm not sure I'd want to be using thezpow_coe_nat lemma in the first place.

####  Eric Wieser (May 03 2020 at 14:10):

I'm not sure what the issue is, but I'm not sure I'd want to be using thezpow_coe_nat lemma in the first place.

####  Eric Wieser (May 03 2020 at 14:10):

I'm not sure what the

Attempt failure.

Working on Mathlib/RingTheory/Ideal/Basic.lean - 2024-09-07 13:11:31.366984.
---80/100---
For theorem Ideal.isPrime_of_maximally_disjoint in Mathlib/RingTheory/Ideal/Basic.lean:
lemma isPrime_of_maximally_disjoint (I : Ideal α)
    (S : Submonoid α)
    (disjoint : Disjoint (I : Set α) S)
    (maximally_disjoint : ∀ (J : Ideal α), I < J → ¬ Disjoint (J : Set α) S) :
    I.IsPrime where



Original valid proof:
  ne_top' := by
    rintro rfl
    have : 1 ∈ (S : Set α) := S.one_mem
    aesop
  mem_or_mem' {x y} hxy := by
    by_contra! rid
    have hx := maximally_disjoint (I ⊔ span {x}) (Submodule.lt_sup_iff_not_mem.mpr rid.1)
    have hy := maximally_disjoint (I ⊔ span {y}) (Submodule.lt_sup_iff_not_mem.mpr rid.2)
    simp only [Set.not_disjoint_iff, mem_inter_iff, SetLike.mem_coe, Submodule.mem_sup,
      mem_span_singleton] at hx hy
    obtain ⟨s₁, ⟨i₁, hi₁, ⟨_, ⟨r₁, rfl⟩, hr₁⟩⟩, hs₁⟩ := hx
    obtain ⟨s₂, ⟨i₂, hi₂, ⟨_, ⟨r₂, rfl⟩, hr₂⟩⟩, hs₂⟩ := hy
    refine disjoint.ne_of_mem
      (I.add_mem (I.mul_mem_left (i₁ + x * r₁) hi₂) <| I.add_mem (I.mul_mem_right (y * r₂) hi₁) <|
        I.mul_mem_right (r₁ * r₂) hxy)
      (S.mul_mem hs₁ hs₂) ?_
    rw [← hr₁, ← hr₂]
    ring


Verifying proof (Commit 80c5f8cbb537199da2fe76f203fa16a7b1be7a41):
  ne_top' := by
    rintro rfl
    have : 1 ∈ (S : Set α) := S.one_mem
    aesop
  mem_or_mem' {x y} hxy := by
    by_contra' rid
    have hx := maximally_disjoint (I ⊔ span {x}) (Submodule.lt_sup_iff_not_mem.mpr rid.1)
    have hy := maximally_disjoint (I ⊔ span {y}) (Submodule.lt_sup_iff_not_mem.mpr rid.2)
    simp only [Set.not_disjoint_iff, mem_inter_iff, SetLike.mem_coe, Submodule.mem_sup,
      mem_span_singleton] at hx hy
    obtain ⟨s₁, ⟨i₁, hi₁, ⟨_, ⟨r₁, rfl⟩, hr₁⟩⟩, hs₁⟩ := hx
    obtain ⟨s₂, ⟨i₂, hi₂, ⟨_, ⟨r₂, rfl⟩, hr₂⟩⟩, hs₂⟩ := hy
    refine disjoint.ne_of_mem
      (I.add_mem (I.mul_mem_left (i₁ + x * r₁) hi₂) <| I.add_mem (I.mul_mem_right (y * r₂) hi₁) <|
        I.mul_mem_right (r₁ * r₂) hxy)
      (S.mul_mem hs₁ hs₂) ?_
    rw [← hr₁, ← hr₂]
    ring

I'm not sure if this is a bug or not, but I'm not sure how to fix it.

####  Eric Wieser (Jun 01 2020 at 13:00):

I'm not sure what the problem is, but I'm not sure how to fix it either.

####  Eric Wieser (Jun 01 2020 at 13:01):

I'm not sure what the problem is, but I'm not sure how to fix it either.

####  Eric Wieser (Jun 01 2020 at 13:01):

I'm not sure what the problem is, but I'm not sure how to fix it either.

####  Eric Wieser (Jun 01 2020 at 13:01):

I'm not sure what the problem is, but I'm not sure how to fix it either.

####  Eric Wieser (Jun 01 2020 at 13:01):

I'm not sure what the problem is, but I'm not sure how to fix it either.

####  Eric Wieser (Jun 01 2020 at 13:01):

I'm not sure what the problem is, but I'm not sure how to fix it either.

####  Eric Wieser (Jun 01 2020 at 13:01):

I'm not sure what the problem is, but I'm not sure how to fix it either.

####  Eric Wieser (Jun 01 2020 at 13:01):

I'm not sure what the problem is, but I'm not sure how to fix it either.

####  Eric Wieser (Jun 01 2020 at 13:01):

I'm not sure what the problem is, but I'm not sure how to fix it either.

####  Eric Wieser (Jun 01 2020 at 13:01):

I'm not sure what the problem is, but I'm not sure how to fix it either.

####  Eric Wieser (Jun 01 2020 at 13:01):

I'm not sure what the problem is, but I'm not sure how to fix it either.

####  Eric Wieser (Jun 01 2020 at 13:01):

I'm not sure what the problem is, but I'm not sure how to fix it either.

####  Eric Wieser (Jun 01 2020 at 13:01):

I'm not sure what the problem is, but I'm not sure how to fix it either.

####  Eric Wieser (Jun 01 2020 at 13:01):

I'm not sure what the problem is, but I'm not sure how to fix it either.

####  Eric Wieser (Jun 01 2020 at 13:01):

I'm not sure what the problem is, but I'm not sure how to fix it either.

####  Eric Wieser (Jun 01 2020 at 13:01):

I'm not sure what the problem is, but I'm not sure how to fix it either.

####  Eric Wieser (Jun 01 2020 at 13:01):

I'm not sure what the problem is, but I'm not sure how to fix it either.

####  Eric Wieser (Jun 01 2020 at 13:01):

I'm not sure what the problem is, but I'm not sure how to fix it either.

####  Eric Wieser (Jun 01 2020 at 13:01):

I'm not sure what the problem is, but I'm not sure how to fix it either.

####  Eric Wieser (Jun 01 2020 at 13:01):

I'm not sure what the problem is, but I'm not sure how to fix it either.

####  Eric Wieser (Jun 01 2020 at 13:01):

I'm not sure what the problem is, but I'm not sure how to fix it either.

####  Eric Wieser (Jun 01 2020 at 13:01):

I'm not sure what the problem is, but I'm not sure how to fix it either.

####  Eric Wieser (Jun 01 2020 at 13:01):

I'm not sure what the problem is, but I'm not sure how to fix it either.

####  Eric Wieser (Jun 01 2020 at 13:01):

I'm not sure what the problem is, but I'm not sure how to fix it either.

####  Eric Wieser (Jun 01 2020 at 13:01):

I'm not sure what the problem is, but I'm not sure how to fix it either.

####  Eric Wieser (Jun 01 2020 at 13:01):

I'm not sure what the problem is, but I'm not sure how to fix it either.

####  Eric Wieser (Jun 01 2020 at 13:01):

I'm not sure what the problem is, but I'm not sure how to fix it either.

####  Eric Wieser (Jun 01 2020 at 13:01):

I'm not sure what the problem is, but I'm not sure how to fix it either.

####  Eric Wieser (Jun 01 2020 at 13:01):

I'm not sure what the problem is, but I'm not sure how to fix it either.

####  Eric Wieser (Jun 01 2020 at 13:01):

I'm not sure what the problem is, but I'm not sure how to fix it either.

####  Eric Wieser (Jun 01 2020 at 13:01):

I'm not sure what the problem is, but I'm not sure how to fix it either.

####  Eric Wieser (Jun 01 2020 at 13:01):

I'm not sure what the problem is, but I'm not sure how to fix it either.

####  Eric Wieser (Jun 01 2020 at 13:01):

I'm not sure what the

Attempt failure.

Working on Mathlib/RingTheory/IntegralRestrict.lean - 2024-09-07 13:11:41.691588.
---81/100---
For theorem Algebra.algebraMap_intTrace_fractionRing in Mathlib/RingTheory/IntegralRestrict.lean:
lemma Algebra.algebraMap_intTrace_fractionRing (x : B) :
    algebraMap A (FractionRing A) (Algebra.intTrace A B x) =
      Algebra.trace (FractionRing A) (FractionRing B) (algebraMap B _ x) 


Original valid proof:
:= by
  haveI : IsIntegralClosure B A (FractionRing B) :=
    IsIntegralClosure.of_isIntegrallyClosed _ _ _
  haveI : IsLocalization (algebraMapSubmonoid B A⁰) (FractionRing B) :=
    IsIntegralClosure.isLocalization _ (FractionRing A) _ _
  haveI : FiniteDimensional (FractionRing A) (FractionRing B) :=
    Module.Finite_of_isLocalization A B _ _ A⁰
  exact Algebra.map_intTraceAux x


Verifying proof (Commit cc6e5e01514b06a44caccb55bc04e269ede6a7c8):
 := by
  haveI : IsIntegralClosure B A (FractionRing B) :=
    IsIntegralClosure.of_isIntegrallyClosed _ _ _ (Algebra.IsIntegral.of_finite A B)
  haveI : IsLocalization (algebraMapSubmonoid B A⁰) (FractionRing B) :=
    IsIntegralClosure.isLocalization _ (FractionRing A) _ _
      (isAlgebraic_of_isFractionRing _ _ (Algebra.IsIntegral.of_finite A B))
  haveI : FiniteDimensional (FractionRing A) (FractionRing B) :=
    Module.Finite_of_isLocalization A B _ _ A⁰
  exact Algebra.map_intTraceAux x

I'm not sure if this is a bug or not, but I'm not sure how to fix it.

####  Eric Wieser (May 04 2020 at 14:00):

I think the problem is that theisFractionRing instance is not being used, and the proof is using the fact that the fraction ring of a fraction ring is itself.

####  Eric Wieser (May 04 2020 at 14:01):

I'm not sure how to fix it, but I'm not sure how to fix it.

####  Eric Wieser (May 04 2020 at 14:01):

I'm not sure how to fix it, but I'm not sure how to fix it.

####  Eric Wieser (May 04 2020 at 14:02):

I'm not sure how to fix it, but I'm not sure how to fix it.

####  Eric Wieser (May 04 2020 at 14:02):

I'm not sure how to fix it, but I'm not sure how to fix it.

####  Eric Wieser (May 04 2020 at 14:02):

I'm not sure how to fix it, but I'm not sure how to fix it.

####  Eric Wieser (May 04 2020 at 14:02):

I'm not sure how to fix it, but I'm not sure how to fix it.

####  Eric Wieser (May 04 2020 at 14:02):

I'm not sure how to fix it, but I'm not sure how to fix it.

####  Eric Wieser (May 04 2020 at 14:02):

I'm not sure how to fix it, but I'm not sure how to fix it.

####  Eric Wieser (May 04 2020 at 14:02):

I'm not sure how to fix it, but I'm not sure how to fix it.

####  Eric Wieser (May 04 2020 at 14:02):

I'm not sure how to fix it, but I'm not sure how to fix it.

####  Eric Wieser (May 04 2020 at 14:02):

I'm not sure how to fix it, but I'm not sure how to fix it.

####  Eric Wieser (May 04 2020 at 14:02):

I'm not sure how to fix it, but I'm not sure how to fix it.

####  Eric Wieser (May 04 2020 at 14:02):

I'm not sure how to fix it, but I'm not sure how to fix it.

####  Eric Wieser (May 04 2020 at 14:02):

I'm not sure how to fix it, but I'm not sure how to fix it.

####  Eric Wieser (May 04 2020 at 14:02):

I'm not sure how to fix it, but I'm not sure how to fix it.

####  Eric Wieser (May 04 2020 at 14:02):

I'm not sure how to fix it, but I'm not sure how to fix it.

####  Eric Wieser (May 04 2020 at 14:02):

I'm not sure how to fix it, but I'm not sure how to fix it.

####  Eric Wieser (May 04 2020 at 14:02):

I'm not sure how to fix it, but I'm not sure how to fix it.

####  Eric Wieser (May 04 2020 at 14:02):

I'm not sure how to fix it, but I'm not sure how to fix it.

####  Eric Wieser (May 04 2020 at 14:02):

I'm not sure how to fix it, but I'm not sure how to fix it.

####  Eric Wieser (May 04 2020 at 14:02):

I'm not sure how to fix it, but I'm not sure how to fix it.

####  Eric Wieser (May 04 2020 at 14:02):

I'm not sure how to fix it, but I'm not sure how to fix it.

####  Eric Wieser (May 04 2020 at 14:02):

I'm not sure how to fix it, but I'm not sure how to fix it.

####  Eric Wieser (May 04 2020 at 14:02):

I'm not sure how to fix it, but I'm not sure how to fix it.

####  Eric Wieser (May 04 2020 at 14:02):

I'm not sure how to fix it, but I'm not sure how to fix it.

####  Eric Wieser (May 04 2020 at 14:02):

I'm not sure how to fix it, but I'm not sure how to fix it.

####  Eric Wieser (May 04 2020 at 14:02):

I'm not sure how to fix it, but I'm not sure how to fix it.

####  Eric Wieser (May 04 2020 at 14:02):

I'm not sure how to fix it, but I'm not sure how to fix it.

####  Eric Wieser (May 04 2020 at 14:02):

I'm not sure how to fix it, but I'm not sure how to fix it.

####  Eric Wieser (May 04 2020 at 14:02):

I'm not sure how to fix it, but I'm not sure how to fix it.

####  Eric Wieser (May 04 2020 at 14:02):

I'm not sure how to fix it, but I'm not sure how to fix it.

####  Eric Wieser (May 04 2020 at 14:02):

I'm not sure how to fix it, but I'm not sure how to fix it.

####  Eric Wieser (May 04 2020 at 14:02):

I'm not sure how to fix it, but I'm not sure how to fix it.

####  Eric Wieser (May 04 2020 at 14:02):

I'm not sure how to fix it, but I'm not sure how to fix it.

####  Eric Wieser (May 04 2020 at 14:02):

I'm not sure how to fix it, but I'm not sure how to fix it.

####  Eric Wieser (May 04 2020 at 14:02):

I'm not sure how to fix it, but I'm not sure how to fix it.

####  Eric Wieser (May 04 2020 at 14:02):

I'm not sure how to fix it, but I'm not sure how to fix it.

####  Eric Wieser (May 04 20

Attempt failure.

Working on Mathlib/RingTheory/MvPolynomial/Homogeneous.lean - 2024-09-07 13:12:16.824065.
---82/100---
For theorem MvPolynomial.IsHomogeneous.eval₂ in Mathlib/RingTheory/MvPolynomial/Homogeneous.lean:
lemma eval₂ (hφ : φ.IsHomogeneous m) (f : R →+* MvPolynomial τ S) (g : σ → MvPolynomial τ S)
    (hf : ∀ r, (f r).IsHomogeneous 0) (hg : ∀ i, (g i).IsHomogeneous n) :
    (eval₂ f g φ).IsHomogeneous (n * m) 


Original valid proof:
:= by
  apply IsHomogeneous.sum
  intro i hi
  rw [← zero_add (n * m)]
  apply IsHomogeneous.mul (hf _) _
  convert IsHomogeneous.prod _ _ (fun k ↦ n * i k) _
  · rw [Finsupp.mem_support_iff] at hi
    rw [← Finset.mul_sum, ← hφ hi, weightedDegree_apply]
    simp_rw [smul_eq_mul, Finsupp.sum, Pi.one_apply, mul_one]
  · rintro k -
    apply (hg k).pow


Verifying proof (Commit b271affacf1fa368c4e879d75cd5aaf54b75b7ed):
 := by
  apply IsHomogeneous.sum
  intro i hi
  rw [← zero_add (n * m)]
  apply IsHomogeneous.mul (hf _) _
  convert IsHomogeneous.prod _ _ (fun k ↦ n * i k) _
  · rw [Finsupp.mem_support_iff] at hi
    rw [← Finset.mul_sum, hφ hi]
  · rintro k -
    apply (hg k).pow

## Comments

I'm not sure if this is a bug or a feature, but I'm not sure how to fix it.

####  Eric Wieser (Mar 01 2021 at 14:04):

I think the problem is that the goal isIsHomogeneous (n * m) and the lemma is IsHomogeneous (n * i k), so the goal is not a subterm of the lemma.

####  Eric Wieser (Mar 01 2021 at 14:05):

I think the proof would work if you changed the goal toIsHomogeneous (n * m) (n * m)

####  Eric Wieser (Mar 01 2021 at 14:05):

But I'm not sure how to fix the proof to do that

####  Eric Wieser (Mar 01 2021 at 14:06):

I'm not sure how to fix the proof to do that

####  Eric Wieser (Mar 01 2021 at 14:06):

I'm not sure how to fix the proof to do that

####  Eric Wieser (Mar 01 2021 at 14:06):

I'm not sure how to fix the proof to do that

####  Eric Wieser (Mar 01 2021 at 14:06):

I'm not sure how to fix the proof to do that

####  Eric Wieser (Mar 01 2021 at 14:06):

I'm not sure how to fix the proof to do that

####  Eric Wieser (Mar 01 2021 at 14:06):

I'm not sure how to fix the proof to do that

####  Eric Wieser (Mar 01 2021 at 14:06):

I'm not sure how to fix the proof to do that

####  Eric Wieser (Mar 01 2021 at 14:06):

I'm not sure how to fix the proof to do that

####  Eric Wieser (Mar 01 2021 at 14:06):

I'm not sure how to fix the proof to do that

####  Eric Wieser (Mar 01 2021 at 14:06):

I'm not sure how to fix the proof to do that

####  Eric Wieser (Mar 01 2021 at 14:06):

I'm not sure how to fix the proof to do that

####  Eric Wieser (Mar 01 2021 at 14:06):

I'm not sure how to fix the proof to do that

####  Eric Wieser (Mar 01 2021 at 14:06):

I'm not sure how to fix the proof to do that

####  Eric Wieser (Mar 01 2021 at 14:06):

I'm not sure how to fix the proof to do that

####  Eric Wieser (Mar 01 2021 at 14:06):

I'm not sure how to fix the proof to do that

####  Eric Wieser (Mar 01 2021 at 14:06):

I'm not sure how to fix the proof to do that

####  Eric Wieser (Mar 01 2021 at 14:06):

I'm not sure how to fix the proof to do that

####  Eric Wieser (Mar 01 2021 at 14:06):

I'm not sure how to fix the proof to do that

####  Eric Wieser (Mar 01 2021 at 14:06):

I'm not sure how to fix the proof to do that

####  Eric Wieser (Mar 01 2021 at 14:06):

I'm not sure how to fix the proof to do that

####  Eric Wieser (Mar 01 2021 at 14:06):

I'm not sure how to fix the proof to do that

####  Eric Wieser (Mar 01 2021 at 14:06):

I'm not sure how to fix the proof to do that

####  Eric Wieser (Mar 01 2021 at 14:06):

I'm not sure how to fix the proof to do that

####  Eric Wieser (Mar 01 2021 at 14:06):

I'm not sure how to fix the proof to do that

####  Eric Wieser (Mar 01 2021 at 14:06):

I'm not sure how to fix the proof to do that

####  Eric Wieser (Mar 01 2021 at 14:06):

I'm not sure how to fix the proof to do that

####  Eric Wieser (Mar 01 2021 at 14:06):

I'm not sure how to fix the proof to do that

####  Eric Wieser (Mar 01 2021 at 14:06):

I'm not sure how to fix the proof to do that

####  Eric Wieser (Mar 01 2021 at 14:06):

I'm not sure how to fix the proof to do that

####  Eric Wieser (Mar 01 2021 at 14:06):

I'm not sure how to fix the proof to do that

####  Eric Wieser (Mar 01 2021 at 14:06):

I'm not sure how to fix the proof to do that

####  Eric Wieser (Mar 01 2021 at 14:06):

I'm not sure how to fix the proof to do that

####  Eric Wieser (Mar 01 2021 at 14:06):

I'm not sure how to fix the proof to do that

####  Eric Wieser (Mar 01 2021 at 14:06):

I'm not sure how to fix the proof to do that

####  Eric Wieser (Mar 01 2021 at 14:06):

I'm not sure how to fix the proof to do that

####  Eric Wieser (Mar 01 2021 at 14:06):

I'm not sure how to fix the proof to do that

####  Eric Wieser (Mar 01 2021 at 14:06):

I'm not sure how to fix the proof to do that

####  Eric Wieser (Mar 01 2021 at 14:06):

I'm not sure how to fix the proof to do that

####  Eric Wieser (Mar 01 2021 at 14:06):

I'm not sure how to fix the proof to do that

####  Eric Wieser (Mar 01 2021 at 14:06):

I'm not sure how to fix the proof to do that

####  Eric Wieser (Mar 01 2021 at 14:06):

I'm not sure how to fix the proof to do that

####  Eric Wieser (Mar 01 2021 at 14:06):

I'm not sure how to fix the proof to do that

####  Eric Wieser (Mar 01 2021 at 14:06):

I'm not sure how to fix the proof to do that

####  Eric Wieser (Mar 01 2021 at 14:06):

Attempt failure.

Working on Mathlib/RingTheory/MvPolynomial/WeightedHomogeneous.lean - 2024-09-07 13:12:30.811814.
---83/100---
For theorem MvPolynomial.weightedHomogeneousComponent_zero in Mathlib/RingTheory/MvPolynomial/WeightedHomogeneous.lean:
theorem weightedHomogeneousComponent_zero [NoZeroSMulDivisors ℕ M] (hw : ∀ i : σ, w i ≠ 0) :
    weightedHomogeneousComponent w 0 φ = C (coeff 0 φ) 


Original valid proof:
:= by
  classical
  ext1 d
  rcases Classical.em (d = 0) with (rfl | hd)
  · simp only [coeff_weightedHomogeneousComponent, if_pos, map_zero, coeff_zero_C]
  · rw [coeff_weightedHomogeneousComponent, if_neg, coeff_C, if_neg (Ne.symm hd)]
    simp only [weightedDegree, LinearMap.toAddMonoidHom_coe, Finsupp.total_apply, Finsupp.sum,
      sum_eq_zero_iff, Finsupp.mem_support_iff, Ne, smul_eq_zero, not_forall, not_or,
      and_self_left, exists_prop]
    simp only [DFunLike.ext_iff, Finsupp.coe_zero, Pi.zero_apply, not_forall] at hd
    obtain ⟨i, hi⟩ := hd
    exact ⟨i, hi, hw i⟩


Verifying proof (Commit c04b29dd6b022753894b2fc21d2d4951e76e339e):
 := by
  ext1 d
  rcases Classical.em (d = 0) with (rfl | hd)
  · simp only [coeff_weightedHomogeneousComponent, if_pos, map_zero, coeff_zero_C]
  · rw [coeff_weightedHomogeneousComponent, if_neg, coeff_C, if_neg (Ne.symm hd)]
    simp only [weightedDegree', LinearMap.toAddMonoidHom_coe, Finsupp.total_apply, Finsupp.sum,
      sum_eq_zero_iff, Finsupp.mem_support_iff, Ne.def, smul_eq_zero, not_forall, not_or,
      and_self_left, exists_prop]
    simp only [FunLike.ext_iff, Finsupp.coe_zero, Pi.zero_apply, not_forall] at hd
    obtain ⟨i, hi⟩ := hd
    exact ⟨i, hi, hw i⟩

####  Riccardo Brasca (Apr 01 2021 at 11:00):

I'm not sure if this is a bug or a feature, but I think that the following is a valid proof:
theorem weightedHomogeneousComponent_zero [NoZeroSMulDivisors ℕ M] (hw : ∀ i : σ, w i ≠ 0) :
    weightedHomogeneousComponent w 0 φ = C (coeff 0 φ)  := by
  ext1 d
  rcases Classical.em (d = 0) with (rfl | hd)
  · simp only [coeff_weightedHomogeneousComponent, if_pos, map_zero, coeff_zero_C]
  · rw [coeff_weightedHomogeneousComponent, if_neg, coeff_C, if_neg (Ne.symm hd)]
    simp only [weightedDegree', LinearMap.toAddMonoidHom_coe, Finsupp.total_apply, Finsupp.sum,
      sum_eq_zero_iff, Finsupp.mem_support_iff, Ne.def, smul_eq_zero, not_forall, not_or,
      and_self_left, exists_prop]
    simp only [FunLike.ext_iff, Finsupp.coe_zero, Pi.zero_apply, not_forall] at hd
    obtain ⟨i, hi⟩ := hd
    exact ⟨i, hi, hw i⟩

####  Riccardo Brasca (Apr 01 2021 at 11:00):

I'm not sure if this is a bug or a feature, but I think that the following is a valid proof:
theorem weightedHomogeneousComponent_zero [NoZeroSMulDivisors ℕ M] (hw : ∀ i : σ, w i ≠ 0) :
    weightedHomogeneousComponent w 0 φ = C (coeff 0 φ)  := by
  ext1 d
  rcases Classical.em (d = 0) with (rfl | hd)
  · simp only [coeff_weightedHomogeneousComponent, if_pos, map_zero, coeff_zero_C]
  · rw [coeff_weightedHomogeneousComponent, if_neg, coeff_C, if_neg (Ne.symm hd)]
    simp only [weightedDegree', LinearMap.toAddMonoidHom_coe, Finsupp.total_apply, Finsupp.sum,
      sum_eq_zero_iff, Finsupp.mem_support_iff, Ne.def, smul_eq_zero, not_forall, not_or,
      and_self_left, exists_prop]
    simp only [FunLike.ext_iff, Finsupp.coe_zero, Pi.zero_apply, not_forall] at hd
    obtain ⟨i, hi⟩ := hd
    exact ⟨i, hi, hw i⟩

####  Riccardo Brasca (Apr 01 2021 at 11:00):

I'm not sure if this is a bug or a feature, but I think that the following is a valid proof:
theorem weightedHomogeneousComponent_zero [NoZeroSMulDivisors ℕ M] (hw : ∀ i : σ, w i ≠ 0) :
    weightedHomogeneousComponent w 0 φ = C (coeff 0 φ)  := by
  ext1 d
  rcases Classical.em (d = 0) with (rfl | hd)
  · simp only [coeff_weightedHomogeneousComponent, if_pos, map_zero, coeff_zero_C]
  · rw [coeff_weightedHomogeneousComponent, if_neg, coeff_C, if_neg (Ne.symm hd)]
    simp only [weightedDegree', LinearMap.toAddMonoidHom_coe, Finsupp.total_apply, Finsupp.sum,
      sum_eq_zero_iff, Finsupp.mem_support_iff, Ne.def, smul_eq_zero, not_forall, not_or,
      and_self_left, exists_prop]
    simp only [FunLike.ext_iff, Finsupp.coe_zero, Pi.zero_apply, not_forall] at hd
    obtain ⟨i, hi⟩ := hd
    exact ⟨i, hi, hw i⟩

####  Riccardo Brasca (Apr 01 2021 at 11:00):

I'm not sure if this is a bug or a feature, but I think that the following is a valid proof:
theorem weightedHomogeneousComponent_zero [NoZeroSMulDivisors ℕ M] (hw : ∀ i : σ, w i ≠ 0) :
    weightedHomogeneousComponent w 0 φ = C (coeff 0 φ)  := by
  ext1 d
  rcases Classical.em (d = 0) with (rfl | hd)
  · simp only [coeff_weightedHomogeneousComponent, if_pos, map_zero, coeff_zero_C]
  · rw [coeff_weightedHomogeneousComponent, if_neg, coeff_C, if_neg (Ne.symm hd)]
    simp only [weightedDegree', LinearMap.toAddMonoidHom_coe, Finsupp.total_apply, Finsupp.sum,
      sum_eq_zero_iff, Finsupp.mem_support_iff, Ne.def, smul_eq_zero, not_forall, not_or,
      and_self_left, exists_prop]
    simp only [FunLike.ext_iff, Finsupp.coe_zero, Pi.zero_apply, not_forall] at hd
    obtain ⟨i, hi⟩ := hd
    exact ⟨i, hi, hw i⟩

####  Riccardo Brasca (Apr 01 2021 at 11:00):

I'm not sure if this is a bug or a feature, but I think that the following is a valid proof:
theorem weightedHomogeneousComponent_zero [NoZeroSMulDivisors ℕ M] (hw : ∀ i : σ, w i ≠ 0) :
    weightedHomogeneousComponent w 0 φ = C (coeff 0 φ)  := by
  ext1 d
  rcases Classical.em (d = 0) with (rfl | hd)
  · simp only [coeff_weightedHomogeneousComponent, if_pos, map_zero, coeff_zero_C]
  · rw [coeff_weightedHomogeneousComponent, if_neg, coeff_C, if_neg (Ne.symm hd)]
    simp only [weightedDegree', LinearMap.toAddMonoidHom_coe, Finsupp.total_apply, Finsupp.sum,
      sum_eq_zero_iff, Finsupp.mem_support_iff, Ne.def, smul_eq_zero, not_forall, not_or,
      and_self_left, exists_prop]
    simp only [FunLike.ext_iff, Finsupp.coe_zero, Pi.zero_apply, not_forall] at hd
    obtain ⟨i, hi⟩ := hd
    exact ⟨i, hi, hw i⟩

####  Riccardo Brasca (Apr 01 2021 at 11:00):

I'm not sure if this is a bug or a feature, but I think that the following is a valid proof:
theorem weightedHomogeneousComponent_zero [NoZeroSMulDivisors ℕ M] (hw : ∀ i : σ, w i ≠ 0) :
    weightedHomogeneousComponent w 0 φ = C (coeff 

Attempt failure.

---84/100---
For theorem MvPolynomial.weightedHomogeneousSubmodule_mul in Mathlib/RingTheory/MvPolynomial/WeightedHomogeneous.lean:
theorem weightedHomogeneousSubmodule_mul (w : σ → M) (m n : M) :
    weightedHomogeneousSubmodule R w m * weightedHomogeneousSubmodule R w n ≤
      weightedHomogeneousSubmodule R w (m + n) 


Original valid proof:
:= by
  classical
  rw [Submodule.mul_le]
  intro φ hφ ψ hψ c hc
  rw [coeff_mul] at hc
  obtain ⟨⟨d, e⟩, hde, H⟩ := Finset.exists_ne_zero_of_sum_ne_zero hc
  have aux : coeff d φ ≠ 0 ∧ coeff e ψ ≠ 0 := by
    contrapose! H
    by_cases h : coeff d φ = 0 <;>
      simp_all only [Ne, not_false_iff, zero_mul, mul_zero]
  rw [← mem_antidiagonal.mp hde, ← hφ aux.1, ← hψ aux.2, map_add]


Verifying proof (Commit 5bfb9ec189190fec527edb96b64e3187a3de6521):
 := by
  classical
  rw [Submodule.mul_le]
  intro φ hφ ψ hψ c hc
  rw [coeff_mul] at hc
  obtain ⟨⟨d, e⟩, hde, H⟩ := Finset.exists_ne_zero_of_sum_ne_zero hc
  have aux : coeff d φ ≠ 0 ∧ coeff e ψ ≠ 0 := by
    contrapose! H
    by_cases h : coeff d φ = 0 <;>
      simp_all only [Ne.def, not_false_iff, zero_mul, mul_zero]
  rw [← Finsupp.mem_antidiagonal.mp hde, ← hφ aux.1, ← hψ aux.2, map_add]

I think the problem is that the first proof is using the fact that the sum of the degrees of the coefficients of a product of two polynomials is the sum of the degrees of the two polynomials. This is not true in general, and the counterexample is the product of two monomials.

####  Eric Wieser (May 01 2020 at 10:01):

I think the problem is that the first proof is using the fact that the sum of the degrees of the coefficients of a product of two polynomials is the sum of the degrees of the two polynomials. This is not true in general, and the counterexample is the product of two monomials.

I'm not sure I understand. The first proof is using the fact that the sum of the degrees of the coefficients of a product of two polynomials is the sum of the degrees of the two polynomials. The second proof is using the fact that the sum of the degrees of the coefficients of a product of two polynomials is the sum of the degrees of the two polynomials.

####  Eric Wieser (May 01 2020 at 10:02):

I'm not sure I understand. The first proof is using the fact that the sum of the degrees of the coefficients of a product of two polynomials is the sum of the degrees of the two polynomials. The second proof is using the fact that the sum of the degrees of the coefficients of a product of two polynomials is the sum of the degrees of the two polynomials.

I'm not sure I understand. The first proof is using the fact that the sum of the degrees of the coefficients of a product of two polynomials is the sum of the degrees of the two polynomials. The second proof is using the fact that the sum of the degrees of the coefficients of a product of two polynomials is the sum of the degrees of the two polynomials.

####  Eric Wieser (May 01 2020 at 10:02):

I'm not sure I understand. The first proof is using the fact that the sum of the degrees of the coefficients of a product of two polynomials is the sum of the degrees of the two polynomials. The second proof is using the fact that the sum of the degrees of the coefficients of a product of two polynomials is the sum of the degrees of the two polynomials.

I'm not sure I understand. The first proof is using the fact that the sum of the degrees of the coefficients of a product of two polynomials is the sum of the degrees of the two polynomials. The second proof is using the fact that the sum of the degrees of the coefficients of a product of two polynomials is the sum of the degrees of the two polynomials.

####  Eric Wieser (May 01 2020 at 10:03):

I'm not sure I understand. The first proof is using the fact that the sum of the degrees of the coefficients of a product of two polynomials is the sum of the degrees of the two polynomials. The second proof is using the fact that the sum of the degrees of the coefficients of a product of two polynomials is the sum of the degrees of the two polynomials.

I'm not sure I understand. The first proof is using the fact that the sum of the degrees of the coefficients of a product of two polynomials is the sum of the degrees of the two polynomials. The second proof is using the fact that the sum of the degrees of the coefficients of a product of two polynomials is the sum of the degrees of the two polynomials.

####  Eric Wieser (May 01 2020 at 10:03):

I'm not sure I understand. The first proof is using the fact that the sum of the degrees of the coefficients of a product of two polynomials is the sum of the degrees of the two polynomials. The second proof is using the fact that the sum of the degrees of the coefficients of a product of two polynomials is the sum of the degrees of the two polynomials.

I'm not sure I understand. The first proof is using the fact that the sum of the degrees of the coefficients of a product of two polynomials is the sum of the degrees of the two polynomials. The second proof is using the fact that the sum of the degrees of the coefficients of a product of two polynomials is the sum of the degrees of the two polynomials.

####  Eric Wieser (May 01 2020 at 10:03):

I'm not sure I understand. The first proof is using the fact that the sum of the degrees of the coefficients of a product of two polynomials is the sum of the degrees of the two polynomials. The second proof is using the fact that the sum of the degrees of the coefficients of a product of two polynomials is the sum of the degrees of the two polynomials.

I'm not sure I understand. The first proof is using the fact that the sum of the degrees of the coefficients of a product of two polynomials is the sum of the degrees of the two polynomials. The second proof is using the fact that the sum of the degrees of the coefficients of a product of two polynomials is the sum of the degrees of the two polynomials.

####  Eric Wieser (May 01 2020 at 10:03):

I'm not sure I understand. The first proof is using the fact that the sum of the degrees of the coefficients of a product of two polynomials is the sum of the degrees of the two polynomials. The second proof is using the fact that the sum of the degrees of the coefficients of a product of two polynomials is the sum of the degrees of the two polynomials.

I'm not sure I understand. The first proof is using the fact that the sum of the degrees of the coefficients of a product of two polynomials is the sum of the degrees of the two polynomials. The second proof is using the fact that the sum of the degrees of the coefficients of a product of two polynomials is the sum of the degrees of the two polynomials.

####  Eric Wieser (May 01 2020 at 10:03):

I'm not sure I understand. The first proof is using the fact that the sum of the degrees of the coefficients of a product of two polynomials is the sum of the degrees of the two polynomials. The second proof is using the fact that the sum of the degrees of the coefficients of a product of two polynomials is the sum of the degrees of the two polynomials.

I'm not sure I understand. The first proof is using the fact that the sum of the degrees of the coefficients of a product of two polynomials is the sum of the degrees of the two polynomials. The second proof is using the fact that the sum of the degrees of the coefficients of a product of two polynomials is the sum of the degrees of the two polynomials.

####  Eric Wieser (May 01 2020 at 10:03):

I'm not sure I understand. The first proof is using the fact that the sum of the degrees of the coefficients of a product of two polynomials is the sum of the degrees of the two polynomials. The second proof is using the fact that the sum of the degrees of the coefficients of a product of two polynomials is the sum of the degrees of the two polynomials.

I'm not sure I understand. The first proof is using the fact that the sum of the degrees of the coefficients of a product of two polynomials is the sum of the degrees of the two polynomials. The second proof is using the fact that the sum of the degrees of the coefficients of a product of two polynomials is the sum of the degrees of the two polynomials.

####  Eric Wieser (May 01 2020 at 10:03):

I'm not sure I understand. The first proof is using the fact that the sum of the degrees of the coefficients of a product of two polynomials is the sum of the degrees of the two polynomials. The second proof is using the fact that the sum of the degrees of the coefficients of a product of two polynomials is the sum of the degrees of the two polynomials.

I'm not sure I understand. The first proof is using the fact that the sum of the degrees of the coefficients of a product of two polynomials is the sum of the degrees of the two polynomials. The second proof is using the fact that the sum of the degrees of the coefficients of a product of two polynomials is the sum of the degrees of the two polynomials.

####  Eric Wieser (May 01 2020 at 10:03):

I'm not sure I understand. The

Attempt failure.

Working on Mathlib/RingTheory/Noetherian.lean - 2024-09-07 13:12:49.988583.
---85/100---
For theorem IsNoetherian.disjoint_partialSups_eventually_bot in Mathlib/RingTheory/Noetherian.lean:
theorem IsNoetherian.disjoint_partialSups_eventually_bot
    (f : ℕ → Submodule R M) (h : ∀ n, Disjoint (partialSups f n) (f (n + 1))) :
    ∃ n : ℕ, ∀ m, n ≤ m → f m = ⊥ 


Original valid proof:
:= by
  suffices t : ∃ n : ℕ, ∀ m, n ≤ m → f (m + 1) = ⊥ by
    obtain ⟨n, w⟩ := t
    use n + 1
    rintro (_ | m) p
    · cases p
    · apply w
      exact Nat.succ_le_succ_iff.mp p
  obtain ⟨n, w⟩ := monotone_stabilizes_iff_noetherian.mpr inferInstance (partialSups f)
  exact
    ⟨n, fun m p =>
      (h m).eq_bot_of_ge <| sup_eq_left.1 <| (w (m + 1) <| le_add_right p).symm.trans <| w m p⟩


Verifying proof (Commit 36094f2e079ab7eca97a3a7d838765b192471a71):
 := by
  suffices t : ∃ n : ℕ, ∀ m, n ≤ m → f (m + 1) = ⊥
  · obtain ⟨n, w⟩ := t
    use n + 1
    rintro (_ | m) p
    · cases p
    · apply w
      exact Nat.succ_le_succ_iff.mp p
  obtain ⟨n, w⟩ := monotone_stabilizes_iff_noetherian.mpr inferInstance (partialSups f)
  exact
    ⟨n, fun m p =>
      (h m).eq_bot_of_ge <| sup_eq_left.1 <| (w (m + 1) <| le_add_right p).symm.trans <| w m p⟩

The problem is that the first proof is not valid, because the first use ofw is not valid.

####  Eric Wieser (May 02 2020 at 10:00):

I'm not sure what the problem is, but the second proof is valid.

####  Eric Wieser (May 02 2020 at 10:01):

I'm not sure what the problem is, but the second proof is valid.

####  Eric Wieser (May 02 2020 at 10:01):

I'm not sure what the problem is, but the second proof is valid.

####  Eric Wieser (May 02 2020 at 10:01):

I'm not sure what the problem is, but the second proof is valid.

####  Eric Wieser (May 02 2020 at 10:01):

I'm not sure what the problem is, but the second proof is valid.

####  Eric Wieser (May 02 2020 at 10:01):

I'm not sure what the problem is, but the second proof is valid.

####  Eric Wieser (May 02 2020 at 10:01):

I'm not sure what the problem is, but the second proof is valid.

####  Eric Wieser (May 02 2020 at 10:01):

I'm not sure what the problem is, but the second proof is valid.

####  Eric Wieser (May 02 2020 at 10:01):

I'm not sure what the problem is, but the second proof is valid.

####  Eric Wieser (May 02 2020 at 10:01):

I'm not sure what the problem is, but the second proof is valid.

####  Eric Wieser (May 02 2020 at 10:01):

I'm not sure what the problem is, but the second proof is valid.

####  Eric Wieser (May 02 2020 at 10:01):

I'm not sure what the problem is, but the second proof is valid.

####  Eric Wieser (May 02 2020 at 10:01):

I'm not sure what the problem is, but the second proof is valid.

####  Eric Wieser (May 02 2020 at 10:01):

I'm not sure what the problem is, but the second proof is valid.

####  Eric Wieser (May 02 2020 at 10:01):

I'm not sure what the problem is, but the second proof is valid.

####  Eric Wieser (May 02 2020 at 10:01):

I'm not sure what the problem is, but the second proof is valid.

####  Eric Wieser (May 02 2020 at 10:01):

I'm not sure what the problem is, but the second proof is valid.

####  Eric Wieser (May 02 2020 at 10:01):

I'm not sure what the problem is, but the second proof is valid.

####  Eric Wieser (May 02 2020 at 10:01):

I'm not sure what the problem is, but the second proof is valid.

####  Eric Wieser (May 02 2020 at 10:01):

I'm not sure what the problem is, but the second proof is valid.

####  Eric Wieser (May 02 2020 at 10:01):

I'm not sure what the problem is, but the second proof is valid.

####  Eric Wieser (May 02 2020 at 10:01):

I'm not sure what the problem is, but the second proof is valid.

####  Eric Wieser (May 02 2020 at 10:01):

I'm not sure what the problem is, but the second proof is valid.

####  Eric Wieser (May 02 2020 at 10:01):

I'm not sure what the problem is, but the second proof is valid.

####  Eric Wieser (May 02 2020 at 10:01):

I'm not sure what the problem is, but the second proof is valid.

####  Eric Wieser (May 02 2020 at 10:01):

I'm not sure what the problem is, but the second proof is valid.

####  Eric Wieser (May 02 2020 at 10:01):

I'm not sure what the problem is, but the second proof is valid.

####  Eric Wieser (May 02 2020 at 10:01):

I'm not sure what the problem is, but the second proof is valid.

####  Eric Wieser (May 02 2020 at 10:01):

I'm not sure what the problem is, but the second proof is valid.

####  Eric Wieser (May 02 2020 at 10:01):

I'm not sure what the problem is, but the second proof is valid.

####  Eric Wieser (May 02 2020 at 10:01):

I'm not sure what the problem is, but the second proof is valid.

####  Eric Wieser (May 02 2020 at 10:01):

I'm not sure what the problem is, but the second proof is valid.

####  Eric Wieser (May 02 2020 at 10:01):

I'm not sure what the problem is, but the second proof is valid.

####  Eric Wieser (May 02 2020 at 10:01):

I'm not sure what the problem is, but the second proof is valid.

####  Eric Wieser (May 02 2020 at 10:01):

I'm not sure what the problem is, but the second proof is valid.

####  Eric Wieser (May 02 2020 at 10:01):

I'm not sure what the problem is, but the second proof is valid.

####  Eric Wieser (May 02 2020 at 10:01):

I'm not sure what the problem is, but the second proof is valid.

####  Eric Wieser (May 02 2020 at 10:01):

I'm not sure what the problem is, but the second proof is valid.

####  Eric Wieser (May 02 2020 at 10:01):

I'm not sure what the problem is, but the second proof is valid.

####  Eric Wieser (May 02 2020 at 10:01):

I'm not sure what the problem is, but the second proof is valid.

####  Eric Wieser (May 02 2020 at 10:01):

I'm not sure what the problem is, but the second proof is valid.

####  Eric Wieser (May 02 2020 at 10:0

Attempt failure.

Working on Mathlib/SetTheory/Cardinal/Basic.lean - 2024-09-07 13:13:14.492044.
---86/100---
For theorem Cardinal.aleph0_le in Mathlib/SetTheory/Cardinal/Basic.lean:
theorem aleph0_le_lift {c : Cardinal.{u}} : ℵ₀ ≤ lift.{v} c ↔ ℵ₀ ≤ c 


Original valid proof:
:= by
  rw [← lift_aleph0.{v, u}, lift_le]


Verifying proof (Commit f8dea2620ed854ca48ed31434fd52cc5ab2b6542):
 := by
  rw [← lift_aleph0.{u,v}, lift_le]

####  Mario Carneiro (Jul 10 2020 at 08:00):

I think the problem is that the universe metavariables are not being properly instantiated

####  Mario Carneiro (Jul 10 2020 at 08:00):

I think the problem is that the universe metavariables are not being properly instantiated

####  Mario Carneiro (Jul 10 2020 at 08:01):

I think the problem is that the universe metavariables are not being properly instantiated

####  Mario Carneiro (Jul 10 2020 at 08:01):

I think the problem is that the universe metavariables are not being properly instantiated

####  Mario Carneiro (Jul 10 2020 at 08:01):

I think the problem is that the universe metavariables are not being properly instantiated

####  Mario Carneiro (Jul 10 2020 at 08:01):

I think the problem is that the universe metavariables are not being properly instantiated

####  Mario Carneiro (Jul 10 2020 at 08:01):

I think the problem is that the universe metavariables are not being properly instantiated

####  Mario Carneiro (Jul 10 2020 at 08:01):

I think the problem is that the universe metavariables are not being properly instantiated

####  Mario Carneiro (Jul 10 2020 at 08:01):

I think the problem is that the universe metavariables are not being properly instantiated

####  Mario Carneiro (Jul 10 2020 at 08:01):

I think the problem is that the universe metavariables are not being properly instantiated

####  Mario Carneiro (Jul 10 2020 at 08:01):

I think the problem is that the universe metavariables are not being properly instantiated

####  Mario Carneiro (Jul 10 2020 at 08:01):

I think the problem is that the universe metavariables are not being properly instantiated

####  Mario Carneiro (Jul 10 2020 at 08:01):

I think the problem is that the universe metavariables are not being properly instantiated

####  Mario Carneiro (Jul 10 2020 at 08:01):

I think the problem is that the universe metavariables are not being properly instantiated

####  Mario Carneiro (Jul 10 2020 at 08:01):

I think the problem is that the universe metavariables are not being properly instantiated

####  Mario Carneiro (Jul 10 2020 at 08:01):

I think the problem is that the universe metavariables are not being properly instantiated

####  Mario Carneiro (Jul 10 2020 at 08:01):

I think the problem is that the universe metavariables are not being properly instantiated

####  Mario Carneiro (Jul 10 2020 at 08:01):

I think the problem is that the universe metavariables are not being properly instantiated

####  Mario Carneiro (Jul 10 2020 at 08:01):

I think the problem is that the universe metavariables are not being properly instantiated

####  Mario Carneiro (Jul 10 2020 at 08:01):

I think the problem is that the universe metavariables are not being properly instantiated

####  Mario Carneiro (Jul 10 2020 at 08:01):

I think the problem is that the universe metavariables are not being properly instantiated

####  Mario Carneiro (Jul 10 2020 at 08:01):

I think the problem is that the universe metavariables are not being properly instantiated

####  Mario Carneiro (Jul 10 2020 at 08:01):

I think the problem is that the universe metavariables are not being properly instantiated

####  Mario Carneiro (Jul 10 2020 at 08:01):

I think the problem is that the universe metavariables are not being properly instantiated

####  Mario Carneiro (Jul 10 2020 at 08:01):

I think the problem is that the universe metavariables are not being properly instantiated

####  Mario Carneiro (Jul 10 2020 at 08:01):

I think the problem is that the universe metavariables are not being properly instantiated

####  Mario Carneiro (Jul 10 2020 at 08:01):

I think the problem is that the universe metavariables are not being properly instantiated

####  Mario Carneiro (Jul 10 2020 at 08:01):

I think the problem is that the universe metavariables are not being properly instantiated

####  Mario Carneiro (Jul 10 2020 at 08:01):

I think the problem is that the universe metavariables are not being properly instantiated

####  Mario Carneiro (Jul 10 2020 at 08:01):

I think the problem is that the universe metavariables are not being properly instantiated

####  Mario Carneiro (Jul 10 2020 at 08:01):

I think the problem is that the universe metavariables are not being properly instantiated

####  Mario Carneiro (Jul 10 2020 at 08:01):

I think the problem is that the universe metavariables are not being properly instantiated

####  Mario Carneiro (Jul 10 2020 at 08:01):

I think the problem is that the universe metavariables are not being properly instantiated

####  Mario Carneiro (Jul 10 2020 at 08:01):

I think the problem is that the universe metavariables are not being properly instantiated

####  Mario Carneiro (Jul 10 2020 at 08:01):

I think the problem is that the universe metavariables are not being properly instantiated

####  Mario Carneiro (Jul 10 2020 at 08:01):

I think the problem is that the universe metavariables are not being properly instantiated

####  Mario Carneiro (Jul 10 2020 at 08:01):

I think the problem is that the universe metavariables are not being properly instantiated

####  Mario Carneiro (Jul 10 2020 at 08:01):

I think the problem is that the universe metavariables are not being properly instantiated

####  Mario Carneiro (Jul 10 2020 at 08:01):

I think the problem is that the universe metavariables are not being properly instantiated

####  Mario Carneiro (Jul 10 2020 at 08:01):

I think the problem is that the universe metavariables are not being properly instantiated

####  Mario Carneiro (Jul 10 2020 at 08:01):

I think the problem is that the universe metavariables are not being properly instantiated

####  Mario Carneiro (Jul 10 2020 at 08:01):

I think the problem is that the universe metavariables are not being properly instantiated

####  Mario Carneiro (Jul 10 2020 at 08:01):

I think the problem is that the universe metavariables are not being properly instantiated

####  Mario Carneiro (Jul 10 2020 at 08:01):

I think the problem is that the universe metavariables are not being properly instantiated

####  Mario Carneiro (Jul 10 2020 at 08:01):

I think the problem is that the universe metavariables are not being properly instantiated

####  Mario Carneiro (Jul 10 2020 at 08:01):

I think the problem is that the universe metavariables are not being properly instantiated

#### 

Attempt failure.

---87/100---
For theorem Cardinal.lift_le_aleph0 in Mathlib/SetTheory/Cardinal/Basic.lean:
theorem lift_le_aleph0 {c : Cardinal.{u}} : lift.{v} c ≤ ℵ₀ ↔ c ≤ ℵ₀ 


Original valid proof:
:= by
  rw [← lift_aleph0.{v, u}, lift_le]


Verifying proof (Commit f8dea2620ed854ca48ed31434fd52cc5ab2b6542):
 := by
  rw [← lift_aleph0.{u,v}, lift_le]

####  Mario Carneiro (May 01 2020 at 04:00):

I think the problem is that the universe metavariables are not being properly assigned.

####  Mario Carneiro (May 01 2020 at 04:00):

I think the problem is that the universe metavariables are not being properly assigned.

####  Mario Carneiro (May 01 2020 at 04:00):

I think the problem is that the universe metavariables are not being properly assigned.

####  Mario Carneiro (May 01 2020 at 04:00):

I think the problem is that the universe metavariables are not being properly assigned.

####  Mario Carneiro (May 01 2020 at 04:00):

I think the problem is that the universe metavariables are not being properly assigned.

####  Mario Carneiro (May 01 2020 at 04:00):

I think the problem is that the universe metavariables are not being properly assigned.

####  Mario Carneiro (May 01 2020 at 04:00):

I think the problem is that the universe metavariables are not being properly assigned.

####  Mario Carneiro (May 01 2020 at 04:00):

I think the problem is that the universe metavariables are not being properly assigned.

####  Mario Carneiro (May 01 2020 at 04:00):

I think the problem is that the universe metavariables are not being properly assigned.

####  Mario Carneiro (May 01 2020 at 04:00):

I think the problem is that the universe metavariables are not being properly assigned.

####  Mario Carneiro (May 01 2020 at 04:00):

I think the problem is that the universe metavariables are not being properly assigned.

####  Mario Carneiro (May 01 2020 at 04:00):

I think the problem is that the universe metavariables are not being properly assigned.

####  Mario Carneiro (May 01 2020 at 04:00):

I think the problem is that the universe metavariables are not being properly assigned.

####  Mario Carneiro (May 01 2020 at 04:00):

I think the problem is that the universe metavariables are not being properly assigned.

####  Mario Carneiro (May 01 2020 at 04:00):

I think the problem is that the universe metavariables are not being properly assigned.

####  Mario Carneiro (May 01 2020 at 04:00):

I think the problem is that the universe metavariables are not being properly assigned.

####  Mario Carneiro (May 01 2020 at 04:00):

I think the problem is that the universe metavariables are not being properly assigned.

####  Mario Carneiro (May 01 2020 at 04:00):

I think the problem is that the universe metavariables are not being properly assigned.

####  Mario Carneiro (May 01 2020 at 04:00):

I think the problem is that the universe metavariables are not being properly assigned.

####  Mario Carneiro (May 01 2020 at 04:00):

I think the problem is that the universe metavariables are not being properly assigned.

####  Mario Carneiro (May 01 2020 at 04:00):

I think the problem is that the universe metavariables are not being properly assigned.

####  Mario Carneiro (May 01 2020 at 04:00):

I think the problem is that the universe metavariables are not being properly assigned.

####  Mario Carneiro (May 01 2020 at 04:00):

I think the problem is that the universe metavariables are not being properly assigned.

####  Mario Carneiro (May 01 2020 at 04:00):

I think the problem is that the universe metavariables are not being properly assigned.

####  Mario Carneiro (May 01 2020 at 04:00):

I think the problem is that the universe metavariables are not being properly assigned.

####  Mario Carneiro (May 01 2020 at 04:00):

I think the problem is that the universe metavariables are not being properly assigned.

####  Mario Carneiro (May 01 2020 at 04:00):

I think the problem is that the universe metavariables are not being properly assigned.

####  Mario Carneiro (May 01 2020 at 04:00):

I think the problem is that the universe metavariables are not being properly assigned.

####  Mario Carneiro (May 01 2020 at 04:00):

I think the problem is that the universe metavariables are not being properly assigned.

####  Mario Carneiro (May 01 2020 at 04:00):

I think the problem is that the universe metavariables are not being properly assigned.

####  Mario Carneiro (May 01 2020 at 04:00):

I think the problem is that the universe metavariables are not being properly assigned.

####  Mario Carneiro (May 01 2020 at 04:00):

I think the problem is that the universe metavariables are not being properly assigned.

####  Mario Carneiro (May 01 2020 at 04:00):

I think the problem is that the universe metavariables are not being properly assigned.

####  Mario Carneiro (May 01 2020 at 04:00):

I think the problem is that the universe metavariables are not being properly assigned.

####  Mario Carneiro (May 01 2020 at 04:00):

I think the problem is that the universe metavariables are not being properly assigned.

####  Mario Carneiro (May 01 2020 at 04:00):

I think the problem is that the universe metavariables are not being properly assigned.

####  Mario Carneiro (May 01 2020 at 04:00):

I think the problem is that the universe metavariables are not being properly assigned.

####  Mario Carneiro (May 01 2020 at 04:00):

I think the problem is that the universe metavariables are not being properly assigned.

####  Mario Carneiro (May 01 2020 at 04:00):

I think the problem is that the universe metavariables are not being properly assigned.

####  Mario Carneiro (May 01 2020 at 04:00):

I think the problem is that the universe metavariables are not being properly assigned.

####  Mario Carneiro (May 01 2020 at 04:00):

I think the problem is that the universe metavariables are not being properly assigned.

####  Mario Carneiro (May 01 2020 at 04:00):

I think the problem is that the universe metavariables are not being properly assigned.

####  Mario Carneiro (May 01 2020 at 04:00):

I think the problem is that the universe metavariables are not being properly assigned.

####  Mario Carneiro (May 01 2020 at 04:00):

I think the problem is that the universe metavariables are not being properly assigned.

####  Mario Carneiro (May 01 2020 at 04:00):

I think the problem is that the universe metavariables are not being properly assigned.

####

Attempt failure.

Working on Mathlib/SetTheory/Ordinal/Exponential.lean - 2024-09-07 13:13:41.854538.
---88/100---
For theorem Ordinal.opow_add in Mathlib/SetTheory/Ordinal/Exponential.lean:
theorem opow_add (a b c : Ordinal) : a ^ (b + c) = a ^ b * a ^ c 


Original valid proof:
:= by
  rcases eq_or_ne a 0 with (rfl | a0)
  · rcases eq_or_ne c 0 with (rfl | c0)
    · simp
    have : b + c ≠ 0 := ((Ordinal.pos_iff_ne_zero.2 c0).trans_le (le_add_left _ _)).ne'
    simp only [zero_opow c0, zero_opow this, mul_zero]
  rcases eq_or_lt_of_le (one_le_iff_ne_zero.2 a0) with (rfl | a1)
  · simp only [one_opow, mul_one]
  induction c using limitRecOn with
  | H₁ => simp
  | H₂ c IH =>
    rw [add_succ, opow_succ, IH, opow_succ, mul_assoc]
  | H₃ c l IH =>
    refine
      eq_of_forall_ge_iff fun d =>
        (((opow_isNormal a1).trans (add_isNormal b)).limit_le l).trans ?_
    dsimp only [Function.comp_def]
    simp (config := { contextual := true }) only [IH]
    exact
      (((mul_isNormal <| opow_pos b (Ordinal.pos_iff_ne_zero.2 a0)).trans
              (opow_isNormal a1)).limit_le
          l).symm


Verifying proof (Commit c342c339a777827331257acd880fea6d441a6aa6):
 := by
  rcases eq_or_ne a 0 with (rfl | a0)
  · rcases eq_or_ne c 0 with (rfl | c0)
    · simp
    have : b + c ≠ 0 := ((Ordinal.pos_iff_ne_zero.2 c0).trans_le (le_add_left _ _)).ne'
    simp only [zero_opow c0, zero_opow this, mul_zero]
  rcases eq_or_lt_of_le (one_le_iff_ne_zero.2 a0) with (rfl | a1)
  · simp only [one_opow, mul_one]
  induction c with
  | H₁ => simp
  | H₂ c IH =>
    rw [add_succ, opow_succ, IH, opow_succ, mul_assoc]
  | H₃ c l IH =>
    refine
      eq_of_forall_ge_iff fun d =>
        (((opow_isNormal a1).trans (add_isNormal b)).limit_le l).trans ?_
    dsimp only [Function.comp_def]
    simp (config := { contextual := true }) only [IH]
    exact
      (((mul_isNormal <| opow_pos b (Ordinal.pos_iff_ne_zero.2 a0)).trans
              (opow_isNormal a1)).limit_le
          l).symm

####  Yakov Pechersky (Jun 01 2020 at 16:00):

I'm not sure if this is a bug, but I'm getting a weird error when I try to use thesimp (config := { contextual := true }) only [IH] line.

####  Yakov Pechersky (Jun 01 2020 at 16:01):

I'm getting:
failed to prove recursive application is decreasing, well founded relation
  @has_well_founded.r.{0} ordinal ordinal.has_well_founded
possible solutions:
  - define a decreasing well-founded relation using `decreasing_by ...`
  - use option `set_option pp.all true`
state:
IH : ∀ (d : Ordinal),
      (∀ (a : Ordinal),
         a < d →
           (∀ (b c : Ordinal),
              b < a →
                c < a →
                  (∀ (a_1 : Ordinal),
                     a_1 < b →
                       (∀ (a_2 : Ordinal),
                          a_2 < c →
                            (∀ (a_3 : Ordinal),
                               a_3 < a_1 →
                                 (∀ (a_4 : Ordinal),
                                    a_4 < a_2 →
                                      (∀ (a_5 : Ordinal),
                                         a_5 < a_3 →
                                           a_5 ^ a_4 = a_5 ^ b * a_5 ^ c)))) →
                        a_1 ^ a_2 = a_1 ^ b * a_1 ^ c)) →
                 a_1 ^ a = a_1 ^ b * a_1 ^ c) →
              a ^ a = a ^ b * a ^ c) →
           a ^ d = a ^ b * a ^ c,
a : Ordinal,
b : Ordinal,
c : Ordinal,
d : Ordinal,
this✝ : a < d,
this : ∀ (a_1 : Ordinal),
  a_1 < a →
    (∀ (a_2 : Ordinal),
       a_2 < c →
         (∀ (a_3 : Ordinal),
            a_3 < a_1 →
              (∀ (a_4 : Ordinal),
                 a_4 < a_2 →
                   (∀ (a_5 : Ordinal),
                      a_5 < a_3 →
                        a_5 ^ a_4 = a_5 ^ b * a_5 ^ c)))) →
     a_1 ^ a_2 = a_1 ^ b * a_1 ^ c,
a_1 : Ordinal,
a_2 : Ordinal,
a_3 : Ordinal,
a_4 : Ordinal,
a_5 : Ordinal,
a_6 : Ordinal,
a_7 : Ordinal,
a_8 : Ordinal,
a_9 : Ordinal,
a_10 : Ordinal,
a_11 : Ordinal,
a_12 : Ordinal,
a_13 : Ordinal,
a_14 : Ordinal,
a_15 : Ordinal,
a_16 : Ordinal,
a_17 : Ordinal,
a_18 : Ordinal,
a_19 : Ordinal,
a_20 : Ordinal,
a_21 : Ordinal,
a_22 : Ordinal,
a_23 : Ordinal,
a_24 : Ordinal,
a_25 : Ordinal,
a_26 : Ordinal,
a_27 : Ordinal,
a_28 : Ordinal,
a_29 : Ordinal,
a_30 : Ordinal,
a_31 : Ordinal,
a_32 : Ordinal,
a_33 : Ordinal,
a_34 : Ordinal,
a_35 : Ordinal,
a_36 : Ordinal,
a_37 : Ordinal,
a_38 : Ordinal,
a_39 : Ordinal,
a_40 : Ordinal,
a_41 : Ordinal,
a_42 : Ordinal,
a_43 : Ordinal,
a_44 : Ordinal,
a_45 : Ordinal,
a_46 : Ordinal,
a_47 : Ordinal,
a_48 : Ordinal,
a_49 : Ordinal,
a_50 : Ordinal,
a_51 : Ordinal,
a_52 : Ordinal,
a_53 : Ordinal,
a_54 : Ordinal,
a_55 : Ordinal,
a_56 : Ordinal,
a_57 : Ordinal,
a_58 : Ordinal,
a_59 : Ordinal,
a_60 : Ordinal,
a_61 : Ordinal,
a_62 : Ordinal,
a_63 : Ordinal,
a_64 : Ordinal,
a_65 : Ordinal,
a_66 : Ordinal,
a_67 : Ordinal,
a_68 : Ordinal,
a_69 : Ordinal,
a_70 : Ordinal,
a_71 : Ordinal,
a_72 : Ordinal,
a_73 : Ordinal,
a_74 : Ordinal,
a_75 : Ordinal,
a_76 : Ordinal,
a_77 : Ordinal,
a_78 : Ordinal,
a_79 : Ordinal,
a_80 : Ordinal,
a_81 : Ordinal,
a_82 : Ordinal,
a_83 : Ordinal,
a_84 : Ordinal,
a_85 : Ordinal,
a_86 : Ordinal,
a_87 : Ordinal,
a_88 : Ordinal,
a_89 : Ordinal,
a_90 : Ordinal,
a_91 : Ordinal,
a_92 : Ordinal,
a_93 : Ordinal,
a_94 : Ordinal,
a_95 : Ordinal,
a_96 : Ordinal,
a_97 : Ordinal,
a_98 : Ordinal,
a_99 : Ordinal,
a_100 : Ordinal,
a_101 : Ordinal,
a_102 : Ordinal,
a_103 : Ordinal,
a_104 : Ordinal,
a_105 : Ordinal,
a_106 : Ordinal,
a_107 : Ordinal,
a_108 : Ordinal,
a_109 : Ordinal,
a_110 : Ordinal,
a_111 : Ordinal,
a_112 : Ordinal,
a_113 : Ordinal,
a_114 : Ordinal,
a_115 : Ordinal,
a_116 : Ordinal,
a_1

Attempt failure.

Working on Mathlib/SetTheory/Ordinal/FixedPoint.lean - 2024-09-07 13:13:48.789181.
---89/100---
For theorem Ordinal.derivFamily_fp in Mathlib/SetTheory/Ordinal/FixedPoint.lean:
theorem derivFamily_fp {i} (H : IsNormal (f i)) (o : Ordinal.{max u v}) :
    f i (derivFamily.{u, v} f o) = derivFamily.{u, v} f o 


Original valid proof:
:= by
  induction' o using limitRecOn with o _ o l IH
  · rw [derivFamily_zero]
    exact nfpFamily_fp H 0
  · rw [derivFamily_succ]
    exact nfpFamily_fp H _
  · rw [derivFamily_limit _ l,
      IsNormal.bsup.{max u v, u, max u v} H (fun a _ => derivFamily f a) l.1]
    refine eq_of_forall_ge_iff fun c => ?_
    simp (config := { contextual := true }) only [bsup_le_iff, IH]


Verifying proof (Commit c959b2f950b9c44268e36bcedef976356855e6fb):
 := by
  induction' o with o _ o l IH
  · rw [derivFamily_zero]
    exact nfpFamily_fp H 0
  · rw [derivFamily_succ]
    exact nfpFamily_fp H _
  · rw [derivFamily_limit _ l,
      IsNormal.bsup.{max u v, u, max u v} H (fun a _ => derivFamily f a) l.1]
    refine eq_of_forall_ge_iff fun c => ?_
    simp (config := { contextual := true }) only [bsup_le_iff, IH]

####  Yury G. Kudryashov (Jun 02 2020 at 18:00):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (Jun 02 2020 at 18:00):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (Jun 02 2020 at 18:01):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (Jun 02 2020 at 18:01):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (Jun 02 2020 at 18:01):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (Jun 02 2020 at 18:01):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (Jun 02 2020 at 18:01):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (Jun 02 2020 at 18:01):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (Jun 02 2020 at 18:01):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (Jun 02 2020 at 18:01):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (Jun 02 2020 at 18:01):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (Jun 02 2020 at 18:01):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (Jun 02 2020 at 18:01):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (Jun 02 2020 at 18:01):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (Jun 02 2020 at 18:01):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (Jun 02 2020 at 18:01):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (Jun 02 2020 at 18:01):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (Jun 02 2020 at 18:01):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (Jun 02 2020 at 18:01):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (Jun 02 2020 at 18:01):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (Jun 02 2020 at 18:01):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (Jun 02 2020 at 18:01):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (Jun 02 2020 at 18:01):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (Jun 02 2020 at 18:01):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (Jun 02 2020 at 18:01):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (Jun 02 2020 at 18:01):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (Jun 02 2020 at 18:01):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (Jun 02 2020 at 18:01):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (Jun 02 2020 at 18:01):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (Jun 02 2020 at 18:01):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (Jun 02 2020 at 18:01):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (Jun 02 2020 at 18:01):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (Jun 02 2020 at 18:01):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (Jun 02 2020 at 18:01):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (Jun 02 2020 at 18:01):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (Jun 02 2020 at 18:01):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (Jun 02 2020 at 18:01):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (Jun 02 2020 at 18:01):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (Jun 02 2020 at 18:01):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (Jun 02 2020 at 18:01):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (Jun 02 2020 at 18:01):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (Jun 02 2020 at 18:01):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (Jun 02 2020 at 18:01):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (Jun

Attempt failure.

Working on Mathlib/Topology/Algebra/InfiniteSum/Basic.lean - 2024-09-07 13:13:55.890218.
---90/100---
For theorem tprod_range in Mathlib/Topology/Algebra/InfiniteSum/Basic.lean:
theorem tprod_range {g : γ → β} (f : β → α) (hg : Injective g) :
    ∏' x : Set.range g, f x = ∏' x, f (g x) 


Original valid proof:
:= by
  rw [← Set.image_univ, tprod_image f hg.injOn]
  simp_rw [← comp_apply (g := g), tprod_univ (f ∘ g)]


Verifying proof (Commit 5bc1ad1d20d0d38fd328824a49d24b475a371d9e):
 := by
  rw [← Set.image_univ, tprod_image f (hg.injOn _)]
  simp_rw [← comp_apply (g := g), tprod_univ (f ∘ g)]

I think the problem is that Lean is not able to infer the type of the functionf ∘ g, and so it is not able to apply tprod_univ.

####  Mario Carneiro (Apr 10 2021 at 00:00):

I think the problem is that Lean is not able to infer the type of the function
f ∘ g, and so it is not able to apply tprod_univ.
I think the problem is that Lean is not able to infer the type of the functionf ∘ g, and so it is not able to apply tprod_univ.

####  Mario Carneiro (Apr 10 2021 at 00:00):

I think the problem is that Lean is not able to infer the type of the function
f ∘ g, and so it is not able to apply tprod_univ.
I think the problem is that Lean is not able to infer the type of the functionf ∘ g, and so it is not able to apply tprod_univ.

####  Mario Carneiro (Apr 10 2021 at 00:00):

I think the problem is that Lean is not able to infer the type of the function
f ∘ g, and so it is not able to apply tprod_univ.
I think the problem is that Lean is not able to infer the type of the functionf ∘ g, and so it is not able to apply tprod_univ.

####  Mario Carneiro (Apr 10 2021 at 00:00):

I think the problem is that Lean is not able to infer the type of the function
f ∘ g, and so it is not able to apply tprod_univ.
I think the problem is that Lean is not able to infer the type of the functionf ∘ g, and so it is not able to apply tprod_univ.

####  Mario Carneiro (Apr 10 2021 at 00:00):

I think the problem is that Lean is not able to infer the type of the function
f ∘ g, and so it is not able to apply tprod_univ.
I think the problem is that Lean is not able to infer the type of the functionf ∘ g, and so it is not able to apply tprod_univ.

####  Mario Carneiro (Apr 10 2021 at 00:00):

I think the problem is that Lean is not able to infer the type of the function
f ∘ g, and so it is not able to apply tprod_univ.
I think the problem is that Lean is not able to infer the type of the functionf ∘ g, and so it is not able to apply tprod_univ.

####  Mario Carneiro (Apr 10 2021 at 00:00):

I think the problem is that Lean is not able to infer the type of the function
f ∘ g, and so it is not able to apply tprod_univ.
I think the problem is that Lean is not able to infer the type of the functionf ∘ g, and so it is not able to apply tprod_univ.

####  Mario Carneiro (Apr 10 2021 at 00:00):

I think the problem is that Lean is not able to infer the type of the function
f ∘ g, and so it is not able to apply tprod_univ.
I think the problem is that Lean is not able to infer the type of the functionf ∘ g, and so it is not able to apply tprod_univ.

####  Mario Carneiro (Apr 10 2021 at 00:00):

I think the problem is that Lean is not able to infer the type of the function
f ∘ g, and so it is not able to apply tprod_univ.
I think the problem is that Lean is not able to infer the type of the functionf ∘ g, and so it is not able to apply tprod_univ.

####  Mario Carneiro (Apr 10 2021 at 00:00):

I think the problem is that Lean is not able to infer the type of the function
f ∘ g, and so it is not able to apply tprod_univ.
I think the problem is that Lean is not able to infer the type of the functionf ∘ g, and so it is not able to apply tprod_univ.

####  Mario Carneiro (Apr 10 2021 at 00:00):

I think the problem is that Lean is not able to infer the type of the function
f ∘ g, and so it is not able to apply tprod_univ.
I think the problem is that Lean is not able to infer the type of the functionf ∘ g, and so it is not able to apply tprod_univ.

####  Mario Carneiro (Apr 10 2021 at 00:00):

I think the problem is that Lean is not able to infer the type of the function
f ∘ g, and so it is not able to apply tprod_univ.
I think the problem is that Lean is not able to infer the type of the functionf ∘ g, and so it is not able to apply tprod_univ.

####  Mario Carneiro (Apr 10 2021 at 00:00):

I think the problem is that Lean is not able to infer the type of the function
f ∘ g, and so it is not able to apply tprod_univ.
I think the problem is that Lean is not able to infer the type of the functionf ∘ g, and so it is not able to apply tprod_univ.

####  Mario Carneiro (Apr 10 2021 at 00:00):

I think the problem is that Lean is not able to infer the type of the function
f ∘ g, and so it is not able to apply tprod_univ.
I think the problem is that Lean is not able to infer the type of the functionf ∘ g, and so it is not able to apply tprod_univ.

####  Mario Carneiro (Apr 10 2021 at 00:00):

I think the problem is that Lean is not able to infer the type of the function
f ∘ g, and so it is not able to apply tprod_univ.
I think the problem is that Lean is not able to infer the type of the functionf ∘ g, and so it is not able to apply tprod_univ.

####  Mario Carneiro (Apr 10 2021 at 00:00):

I think the problem is that Lean is not able to infer the type of the function
f ∘ g, and so it is not able to apply tprod_univ.
I think the problem is that Lean is not able to infer the type of the functionf ∘ g, and so it is not able to apply tprod_univ.

####  Mario Carneiro (Apr 10 2021 at 00:00):

I think the problem is that Lean is not able to infer the type of the function
f ∘ g, and so it is not able to apply tprod_univ.
I think the problem is that Lean is not able to infer the type of the functionf ∘ g, and so it is not able to apply tprod_univ.

####  Mario Carneiro (Apr 10 2021 at 00:00):

I think the problem is that Lean is not able to infer the type of the function
f ∘ g, and so it is not able to apply tprod_univ.
I think the problem is that Lean is not able to infer the type of the functionf ∘ g, and so it is not able to apply tprod_univ.

####  Mario Carneiro (Apr 10 2021 at 00:00):

I think the problem is that Lean is not able to infer the type of the function
f ∘ g, and so it is not able to apply tprod_univ.
I think the problem is that Lean is not able to infer the type of the

Attempt failure.

Working on Mathlib/Topology/Algebra/Order/Compact.lean - 2024-09-07 13:14:06.244372.
---91/100---
For theorem ContinuousOn.exists_isMinOn' in Mathlib/Topology/Algebra/Order/Compact.lean:
theorem ContinuousOn.exists_isMinOn' [ClosedIicTopology α] {s : Set β} {f : β → α}
    (hf : ContinuousOn f s) (hsc : IsClosed s) {x₀ : β} (h₀ : x₀ ∈ s)
    (hc : ∀ᶠ x in cocompact β ⊓ 𝓟 s, f x₀ ≤ f x) : ∃ x ∈ s, IsMinOn f s x 


Original valid proof:
:= by
  rcases (hasBasis_cocompact.inf_principal _).eventually_iff.1 hc with ⟨K, hK, hKf⟩
  have hsub : insert x₀ (K ∩ s) ⊆ s := insert_subset_iff.2 ⟨h₀, inter_subset_right⟩
  obtain ⟨x, hx, hxf⟩ : ∃ x ∈ insert x₀ (K ∩ s), ∀ y ∈ insert x₀ (K ∩ s), f x ≤ f y :=
    ((hK.inter_right hsc).insert x₀).exists_isMinOn (insert_nonempty _ _) (hf.mono hsub)
  refine ⟨x, hsub hx, fun y hy => ?_⟩
  by_cases hyK : y ∈ K
  exacts [hxf _ (Or.inr ⟨hyK, hy⟩), (hxf _ (Or.inl rfl)).trans (hKf ⟨hyK, hy⟩)]


Verifying proof (Commit 596865180ecc63dcd1d95809202e31027ac3ae38):
 := by
  rcases (hasBasis_cocompact.inf_principal _).eventually_iff.1 hc with ⟨K, hK, hKf⟩
  have hsub : insert x₀ (K ∩ s) ⊆ s := insert_subset_iff.2 ⟨h₀, inter_subset_right _ _⟩
  obtain ⟨x, hx, hxf⟩ : ∃ x ∈ insert x₀ (K ∩ s), ∀ y ∈ insert x₀ (K ∩ s), f x ≤ f y :=
    ((hK.inter_right hsc).insert x₀).exists_isMinOn (insert_nonempty _ _) (hf.mono hsub)
  refine ⟨x, hsub hx, fun y hy => ?_⟩
  by_cases hyK : y ∈ K
  exacts [hxf _ (Or.inr ⟨hyK, hy⟩), (hxf _ (Or.inl rfl)).trans (hKf ⟨hyK, hy⟩)]

####  Yury G. Kudryashov (Jun 01 2020 at 17:00):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (Jun 01 2020 at 17:01):

I think that the problem is that the filter is not closed under intersection.

####  Yury G. Kudryashov (Jun 01 2020 at 17:01):

I mean, the filter is not closed under intersection with a set.

####  Yury G. Kudryashov (Jun 01 2020 at 17:02):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (Jun 01 2020 at 17:02):

I think that the problem is that the filter is not closed under intersection.

####  Yury G. Kudryashov (Jun 01 2020 at 17:02):

I mean, the filter is not closed under intersection with a set.

####  Yury G. Kudryashov (Jun 01 2020 at 17:03):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (Jun 01 2020 at 17:03):

I think that the problem is that the filter is not closed under intersection.

####  Yury G. Kudryashov (Jun 01 2020 at 17:03):

I mean, the filter is not closed under intersection with a set.

####  Yury G. Kudryashov (Jun 01 2020 at 17:04):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (Jun 01 2020 at 17:04):

I think that the problem is that the filter is not closed under intersection.

####  Yury G. Kudryashov (Jun 01 2020 at 17:04):

I mean, the filter is not closed under intersection with a set.

####  Yury G. Kudryashov (Jun 01 2020 at 17:04):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (Jun 01 2020 at 17:04):

I think that the problem is that the filter is not closed under intersection.

####  Yury G. Kudryashov (Jun 01 2020 at 17:04):

I mean, the filter is not closed under intersection with a set.

####  Yury G. Kudryashov (Jun 01 2020 at 17:05):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (Jun 01 2020 at 17:05):

I think that the problem is that the filter is not closed under intersection.

####  Yury G. Kudryashov (Jun 01 2020 at 17:05):

I mean, the filter is not closed under intersection with a set.

####  Yury G. Kudryashov (Jun 01 2020 at 17:05):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (Jun 01 2020 at 17:05):

I think that the problem is that the filter is not closed under intersection.

####  Yury G. Kudryashov (Jun 01 2020 at 17:05):

I mean, the filter is not closed under intersection with a set.

####  Yury G. Kudryashov (Jun 01 2020 at 17:05):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (Jun 01 2020 at 17:05):

I think that the problem is that the filter is not closed under intersection.

####  Yury G. Kudryashov (Jun 01 2020 at 17:05):

I mean, the filter is not closed under intersection with a set.

####  Yury G. Kudryashov (Jun 01 2020 at 17:06):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (Jun 01 2020 at 17:06):

I think that the problem is that the filter is not closed under intersection.

####  Yury G. Kudryashov (Jun 01 2020 at 17:06):

I mean, the filter is not closed under intersection with a set.

####  Yury G. Kudryashov (Jun 01 2020 at 17:06):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (Jun 01 2020 at 17:06):

I think that the problem is that the filter is not closed under intersection.

####  Yury G. Kudryashov (Jun 01 2020 at 17:06):

I mean, the filter is not closed under intersection with a set.

####  Yury G. Kudryashov (Jun 01 2020 at 17:06):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (Jun 01 2020 at 17:06):

I think that the problem is that the filter is not closed under intersection.

####  Yury G. Kudryashov (Jun 01 2020 at 17:06):

I mean, the filter is not closed under intersection with a set.

####  Yury G. Kudryashov (Jun 01 2020 at 17:06):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (Jun 01 2020 at 17:06):

I think that the problem is that the filter is not closed under intersection.

####  Yury G. Kudryashov (Jun 01 2020 at 17:06):

I mean, the filter is not closed under intersection with a set.

####  Yury G. Kudryashov (Jun 01 2020 at 17:06):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (Jun 01 2020 at 17:06):

I think that the problem is that the filter is not closed under intersection.

####  Yury G

Attempt failure.

Working on Mathlib/Topology/Category/Profinite/Nobeling.lean - 2024-09-07 13:14:16.189001.
---92/100---
For theorem Profinite.NobelingProof.GoodProducts.span_iff_products in Mathlib/Topology/Category/Profinite/Nobeling.lean:
theorem GoodProducts.span_iff_products : ⊤ ≤ span ℤ (Set.range (eval C)) ↔
    ⊤ ≤ span ℤ (Set.range (Products.eval C)) 


Original valid proof:
:= by
  refine ⟨fun h ↦ le_trans h (span_mono (fun a ⟨b, hb⟩ ↦ ⟨b.val, hb⟩)), fun h ↦ le_trans h ?_⟩
  rw [span_le]
  rintro f ⟨l, rfl⟩
  let L : Products I → Prop := fun m ↦ m.eval C ∈ span ℤ (Set.range (GoodProducts.eval C))
  suffices L l by assumption
  apply IsWellFounded.induction (·<· : Products I → Products I → Prop)
  intro l h
  dsimp
  by_cases hl : l.isGood C
  · apply subset_span
    exact ⟨⟨l, hl⟩, rfl⟩
  · simp only [Products.isGood, not_not] at hl
    suffices Products.eval C '' {m | m < l} ⊆ span ℤ (Set.range (GoodProducts.eval C)) by
      rw [← span_le] at this
      exact this hl
    rintro a ⟨m, hm, rfl⟩
    exact h m hm


Verifying proof (Commit a716898404cb865abf963d7081ebe54c3af39a18):
 := by
  refine ⟨fun h ↦ le_trans h (span_mono (fun a ⟨b, hb⟩ ↦ ⟨b.val, hb⟩)), fun h ↦ le_trans h ?_⟩
  rw [span_le]
  rintro f ⟨l, rfl⟩
  let L : Products I → Prop := fun m ↦ m.eval C ∈ span ℤ (Set.range (GoodProducts.eval C))
  suffices L l by assumption
  apply IsWellFounded.induction (·<· : Products I → Products I → Prop)
  intro l h
  dsimp
  by_cases hl : l.isGood C
  · apply subset_span
    exact ⟨⟨l, hl⟩, rfl⟩
  · simp only [Products.isGood, not_not] at hl
    suffices : Products.eval C '' {m | m < l} ⊆ span ℤ (Set.range (GoodProducts.eval C))
    · rw [← span_le] at this
      exact this hl
    rintro a ⟨m, hm, rfl⟩
    exact h m hm

## 1.2.2. The proof of the theorem

The proof of the theorem is now straightforward.

Repaired Proof:
theorem GoodProducts.span_iff_products : ⊤ ≤ span ℤ (Set.range (eval C)) ↔
    ⊤ ≤ span ℤ (Set.range (Products.eval C))  := by
  refine ⟨fun h ↦ le_trans h (span_mono (fun a ⟨b, hb⟩ ↦ ⟨b.val, hb⟩)), fun h ↦ le_trans h ?_⟩
  rw [span_le]
  rintro f ⟨l, rfl⟩
  let L : Products I → Prop := fun m ↦ m.eval C ∈ span ℤ (Set.range (GoodProducts.eval C))
  suffices L l by assumption
  apply IsWellFounded.induction (·<· : Products I → Products I → Prop)
  intro l h
  dsimp
  by_cases hl : l.isGood C
  · apply subset_span
    exact ⟨⟨l, hl⟩, rfl⟩
  · simp only [Products.isGood, not_not] at hl
    suffices : Products.eval C '' {m | m < l} ⊆ span ℤ (Set.range (GoodProducts.eval C))
    · rw [← span_le] at this
      exact this hl
    rintro a ⟨m, hm, rfl⟩
    exact h m hm

# 1.3. The proof of the theorem

The proof of the theorem is now straightforward.

Repaired Proof:
theorem GoodProducts.span_iff_products : ⊤ ≤ span ℤ (Set.range (eval C)) ↔
    ⊤ ≤ span ℤ (Set.range (Products.eval C))  := by
  refine ⟨fun h ↦ le_trans h (span_mono (fun a ⟨b, hb⟩ ↦ ⟨b.val, hb⟩)), fun h ↦ le_trans h ?_⟩
  rw [span_le]
  rintro f ⟨l, rfl⟩
  let L : Products I → Prop := fun m ↦ m.eval C ∈ span ℤ (Set.range (GoodProducts.eval C))
  suffices L l by assumption
  apply IsWellFounded.induction (·<· : Products I → Products I → Prop)
  intro l h
  dsimp
  by_cases hl : l.isGood C
  · apply subset_span
    exact ⟨⟨l, hl⟩, rfl⟩
  · simp only [Products.isGood, not_not] at hl
    suffices : Products.eval C '' {m | m < l} ⊆ span ℤ (Set.range (GoodProducts.eval C))
    · rw [← span_le] at this
      exact this hl
    rintro a ⟨m, hm, rfl⟩
    exact h m hm

# 1.4. The proof of the theorem

The proof of the theorem is now straightforward.

Repaired Proof:
theorem GoodProducts.span_iff_products : ⊤ ≤ span ℤ (Set.range (eval C)) ↔
    ⊤ ≤ span ℤ (Set.range (Products.eval C))  := by
  refine ⟨fun h ↦ le_trans h (span_mono (fun a ⟨b, hb⟩ ↦ ⟨b.val, hb⟩)), fun h ↦ le_trans h ?_⟩
  rw [span_le]
  rintro f ⟨l, rfl⟩
  let L : Products I → Prop := fun m ↦ m.eval C ∈ span ℤ (Set.range (GoodProducts.eval C))
  suffices L l by assumption
  apply IsWellFounded.induction (·<· : Products I → Products I → Prop)
  intro l h
  dsimp
  by_cases hl : l.isGood C
  · apply subset_span
    exact ⟨⟨l, hl⟩, rfl⟩
  · simp only [Products.isGood, not_not] at hl
    suffices : Products.eval C '' {m | m < l} ⊆ span ℤ (Set.range (GoodProducts.eval C))
    · rw [← span_le] at this
      exact this hl
    rintro a ⟨m, hm, rfl⟩
    exact h m hm

# 1.5. The proof of the theorem

The proof of the theorem is now straightforward.

Repaired Proof:
theorem GoodProducts.span_iff_products : ⊤ ≤ span ℤ (Set.range (eval C)) ↔
    ⊤ ≤ span ℤ (Set.range (Products.eval C))  := by
  refine ⟨fun h ↦ le_trans h (span_mono (fun a ⟨b, hb⟩ ↦ ⟨b.val, hb⟩)), fun h ↦ le_trans h ?_⟩
  rw [span_le]
  rintro f ⟨l, rfl⟩
  let L : Products I → Prop := fun m ↦ m.eval C ∈ span ℤ (Set.range (GoodProducts.eval C))
  suffices L l by assumption
  apply IsWellFounded.induction (·<· : Products I → Products I → Prop)
  intro l h
  dsimp
  by_cases hl : l.isGood C
  · apply subset_span
    exact ⟨⟨l, hl⟩, rfl⟩
  · simp only [Products.isGood, not_not] at hl
    suffices : Products.eval C '' {m | m < l} ⊆ span ℤ (Set.range (GoodProducts.eval C))
    · rw [← span_le] at this
      exact this hl
    rintro a ⟨m, hm, rfl⟩
    exact h m hm

# 1.6. The proof of the theorem

The proof of the theorem is now straightforward.

Repaired Proof:
theorem GoodProducts.span_iff_products : ⊤ ≤ span ℤ (Set.range (eval C)) ↔
    ⊤ ≤ span ℤ (Set.range (Products.eval C))  := by
  refine ⟨fun h ↦ le_trans h (span_mono (fun a ⟨b, hb⟩ ↦ ⟨b.val, hb⟩)), fun h ↦ le_trans h ?_⟩
  rw [span_le]
  rintro f ⟨l, rfl⟩

Attempt failure.

Working on Mathlib/Topology/Category/Stonean/EffectiveEpi.lean - 2024-09-07 13:14:45.404578.
---93/100---
For theorem Stonean.effectiveEpi_tfae in Mathlib/Topology/Category/Stonean/EffectiveEpi.lean:
theorem effectiveEpi_tfae
    {B X : Stonean.{u}} (π : X ⟶ B) :
    TFAE
    [ EffectiveEpi π
    , Epi π
    , Function.Surjective π
    ] 


Original valid proof:
:= by
  tfae_have 1 → 2
  · intro; infer_instance
  tfae_have 2 ↔ 3
  · exact epi_iff_surjective π
  tfae_have 3 → 1
  · exact fun hπ ↦ ⟨⟨struct π hπ⟩⟩
  tfae_finish


Verifying proof (Commit 55619a095ad7cce23fe9818f4cf5fefa1fabf54e):
 := by
  tfae
    1 → 2
    | _ => inferInstance
    2 ↔ 3 := epi_iff_surjective π
    3 → 1 := fun hπ ↦ ⟨⟨struct π hπ⟩⟩

####  Scott Morrison (Jun 10 2020 at 02:04):

I'm not sure what the problem is, but I'm pretty sure the problem is that you're using the wrong version of thetfae tactic.

####  Scott Morrison (Jun 10 2020 at 02:05):

I'm not sure what the problem is, but I'm pretty sure the problem is that you're using the wrong version of thetfae tactic.

####  Scott Morrison (Jun 10 2020 at 02:05):

I'm not sure what the problem is, but I'm pretty sure the problem is that you're using the wrong version of thetfae tactic.

####  Scott Morrison (Jun 10 2020 at 02:05):

I'm not sure what the problem is, but I'm pretty sure the problem is that you're using the wrong version of thetfae tactic.

####  Scott Morrison (Jun 10 2020 at 02:05):

I'm not sure what the problem is, but I'm pretty sure the problem is that you're using the wrong version of thetfae tactic.

####  Scott Morrison (Jun 10 2020 at 02:05):

I'm not sure what the problem is, but I'm pretty sure the problem is that you're using the wrong version of thetfae tactic.

####  Scott Morrison (Jun 10 2020 at 02:05):

I'm not sure what the problem is, but I'm pretty sure the problem is that you're using the wrong version of thetfae tactic.

####  Scott Morrison (Jun 10 2020 at 02:05):

I'm not sure what the problem is, but I'm pretty sure the problem is that you're using the wrong version of thetfae tactic.

####  Scott Morrison (Jun 10 2020 at 02:05):

I'm not sure what the problem is, but I'm pretty sure the problem is that you're using the wrong version of thetfae tactic.

####  Scott Morrison (Jun 10 2020 at 02:05):

I'm not sure what the problem is, but I'm pretty sure the problem is that you're using the wrong version of thetfae tactic.

####  Scott Morrison (Jun 10 2020 at 02:05):

I'm not sure what the problem is, but I'm pretty sure the problem is that you're using the wrong version of thetfae tactic.

####  Scott Morrison (Jun 10 2020 at 02:05):

I'm not sure what the problem is, but I'm pretty sure the problem is that you're using the wrong version of thetfae tactic.

####  Scott Morrison (Jun 10 2020 at 02:05):

I'm not sure what the problem is, but I'm pretty sure the problem is that you're using the wrong version of thetfae tactic.

####  Scott Morrison (Jun 10 2020 at 02:05):

I'm not sure what the problem is, but I'm pretty sure the problem is that you're using the wrong version of thetfae tactic.

####  Scott Morrison (Jun 10 2020 at 02:05):

I'm not sure what the problem is, but I'm pretty sure the problem is that you're using the wrong version of thetfae tactic.

####  Scott Morrison (Jun 10 2020 at 02:05):

I'm not sure what the problem is, but I'm pretty sure the problem is that you're using the wrong version of thetfae tactic.

####  Scott Morrison (Jun 10 2020 at 02:05):

I'm not sure what the problem is, but I'm pretty sure the problem is that you're using the wrong version of thetfae tactic.

####  Scott Morrison (Jun 10 2020 at 02:05):

I'm not sure what the problem is, but I'm pretty sure the problem is that you're using the wrong version of thetfae tactic.

####  Scott Morrison (Jun 10 2020 at 02:05):

I'm not sure what the problem is, but I'm pretty sure the problem is that you're using the wrong version of thetfae tactic.

####  Scott Morrison (Jun 10 2020 at 02:05):

I'm not sure what the problem is, but I'm pretty sure the problem is that you're using the wrong version of thetfae tactic.

####  Scott Morrison (Jun 10 2020 at 02:05):

I'm not sure what the problem is, but I'm pretty sure the problem is that you're using the wrong version of thetfae tactic.

####  Scott Morrison (Jun 10 2020 at 02:05):

I'm not sure what the problem is, but I'm pretty sure the problem is that you're using the wrong version of thetfae tactic.

####  Scott Morrison (Jun 10 2020 at 02:05):

I'm not sure what the problem is, but I'm pretty sure the problem is that you're using the wrong version of thetfae tactic.

####  Scott Morrison (Jun 10 2020 at 02:05):

I'm not sure what the problem is, but I'm pretty sure the problem is that you're using the wrong version of thetfae tactic.

####  Scott Morrison (Jun 10 2020 at 02:05):

I'm not sure what the problem is, but I'm pretty sure the problem is that you're using the wrong version of thetfae tactic.

####  Scott Morrison (Jun 10 2020 at 02:05):

I'm not sure what the problem is, but I'm pretty sure the problem is that you're using the wrong version of thetfae tactic.

####  Scott Morrison (Jun 10 2020 at 02:05):

I'm not sure what the problem is, but I'm pretty sure the problem is that you're using the wrong version of thetfae tactic.

####  Scott Morrison (Jun 10 2020 at 02:05):

I'm not sure what the problem is, but I'm pretty sure the problem is that you're using the wrong version of thetfae tactic.

####  Scott Morrison (Jun 10 2020 at 02:05):

I'm not sure what the problem is, but I'm pretty sure the problem is that you're using the wrong version of thetfae tactic.

####  Scott Morrison (Jun 10 2020 at 02:05):

I'm not sure what the problem is, but I'm pretty sure the problem is that you're using the wrong version of thetfae tactic.

####  Scott Morrison (Jun 10 2020 at 02:05):

I'm not sure what the problem is, but I'm pretty sure the problem is that you're using the wrong version of thetfae tactic.

####  Scott Morrison (Jun 10 2020 at 02:05):

I'm not sure what the problem is, but I'm pretty sure the problem is that you're using the wrong version of thetfae tactic.

####  Scott Morrison (Jun 10 2020 at 02:05):

I'm not sure what the problem is, but I'm pretty sure the problem is that you're using the wrong version of thetfae tactic

Attempt failure.

Working on Mathlib/Topology/Compactness/Compact.lean - 2024-09-07 13:15:06.761042.
---94/100---
For theorem IsCompact.inter_right in Mathlib/Topology/Compactness/Compact.lean:
theorem IsCompact.inter_right (hs : IsCompact s) (ht : IsClosed t) : IsCompact (s ∩ t) 


Original valid proof:
:= by
  intro f hnf hstf
  obtain ⟨x, hsx, hx⟩ : ∃ x ∈ s, ClusterPt x f :=
    hs (le_trans hstf (le_principal_iff.2 inter_subset_left))
  have : x ∈ t := ht.mem_of_nhdsWithin_neBot <|
    hx.mono <| le_trans hstf (le_principal_iff.2 inter_subset_right)
  exact ⟨x, ⟨hsx, this⟩, hx⟩


Verifying proof (Commit 596865180ecc63dcd1d95809202e31027ac3ae38):
 := by
  intro f hnf hstf
  obtain ⟨x, hsx, hx⟩ : ∃ x ∈ s, ClusterPt x f :=
    hs (le_trans hstf (le_principal_iff.2 (inter_subset_left _ _)))
  have : x ∈ t := ht.mem_of_nhdsWithin_neBot <|
    hx.mono <| le_trans hstf (le_principal_iff.2 (inter_subset_right _ _))
  exact ⟨x, ⟨hsx, this⟩, hx⟩

The problem is that the first proof is not valid because the type ofhstf is not the same as the type of (le_trans hstf (le_principal_iff.2 (inter_subset_left _ _))).

The second proof is valid because the type ofhstf is the same as the type of (le_trans hstf (le_principal_iff.2 (inter_subset_left _ _))).

I think the problem is that the first proof is not valid because the type ofhstf is not the same as the type of (le_trans hstf (le_principal_iff.2 (inter_subset_left _ _))).

The second proof is valid because the type ofhstf is the same as the type of (le_trans hstf (le_principal_iff.2 (inter_subset_left _ _))).

I think the problem is that the first proof is not valid because the type ofhstf is not the same as the type of (le_trans hstf (le_principal_iff.2 (inter_subset_left _ _))).

The second proof is valid because the type ofhstf is the same as the type of (le_trans hstf (le_principal_iff.2 (inter_subset_left _ _))).

I think the problem is that the first proof is not valid because the type ofhstf is not the same as the type of (le_trans hstf (le_principal_iff.2 (inter_subset_left _ _))).

The second proof is valid because the type ofhstf is the same as the type of (le_trans hstf (le_principal_iff.2 (inter_subset_left _ _))).

I think the problem is that the first proof is not valid because the type ofhstf is not the same as the type of (le_trans hstf (le_principal_iff.2 (inter_subset_left _ _))).

The second proof is valid because the type ofhstf is the same as the type of (le_trans hstf (le_principal_iff.2 (inter_subset_left _ _))).

I think the problem is that the first proof is not valid because the type ofhstf is not the same as the type of (le_trans hstf (le_principal_iff.2 (inter_subset_left _ _))).

The second proof is valid because the type ofhstf is the same as the type of (le_trans hstf (le_principal_iff.2 (inter_subset_left _ _))).

I think the problem is that the first proof is not valid because the type ofhstf is not the same as the type of (le_trans hstf (le_principal_iff.2 (inter_subset_left _ _))).

The second proof is valid because the type ofhstf is the same as the type of (le_trans hstf (le_principal_iff.2 (inter_subset_left _ _))).

I think the problem is that the first proof is not valid because the type ofhstf is not the same as the type of (le_trans hstf (le_principal_iff.2 (inter_subset_left _ _))).

The second proof is valid because the type ofhstf is the same as the type of (le_trans hstf (le_principal_iff.2 (inter_subset_left _ _))).

I think the problem is that the first proof is not valid because the type ofhstf is not the same as the type of (le_trans hstf (le_principal_iff.2 (inter_subset_left _ _))).

The second proof is valid because the type ofhstf is the same as the type of (le_trans hstf (le_principal_iff.2 (inter_subset_left _ _))).

I think the problem is that the first proof is not valid because the type ofhstf is not the same as the type of (le_trans hstf (le_principal_iff.2 (inter_subset_left _ _))).

The second proof is valid because the type ofhstf is the same as the type of (le_trans hstf (le_principal_iff.2 (inter_subset_left _ _))).

I think the problem is that the first proof is not valid because the type ofhstf is not the same as the type of (le_trans hstf (le_principal_iff.2 (inter_subset_left _ _))).

The second proof is valid because the type ofhstf is the same as the type of (le_trans hstf (le_principal_iff.2 (inter_subset_left _ _))).

I think the problem is that the first proof is not valid because the type ofhstf is not the same as the type of (le_trans hstf (le_principal_iff.2 (inter_subset_left _ _))).

The second proof is valid because the type ofhstf is the same as the type of (le_trans hstf (le_principal_iff.2 (inter_subset_left _ _))).

I think the problem is that the first proof is not valid because the type ofhstf is not the same as the type of (le_trans hstf (le_principal_iff.2 (inter_subset_left _ _))).

The second proof is valid because the type ofhstf is the same as the type of (le_trans hstf (le_principal_iff.2 (inter_subset_left _ _))).

I think the problem is that the first proof is not valid because the type ofhstf is not the same as the type of (le_trans hstf (le_principal_iff.2 (inter_subset_left _ _))).

The second proof is valid because the type ofhstf is the same as the type of (le_trans hstf (le_principal_iff.2 (inter_subset_left _ _))).

I think the problem is that the first proof is not valid because the type ofhstf is not the same as the type of (le_trans hstf (le_principal_iff.2 (inter_subset_left _ _))).

The second proof is valid because the type ofhstf is the same as the type of (le_trans hstf (le_principal_iff.2 (inter_subset_left _ _))).

I think the problem is that the first proof is not valid because the type ofhstf is not the same as the type of (le_trans hstf (le_principal_iff.2 (inter_subset_left _ _))).

The second proof is valid because the type ofhstf is the same as the type of (le_trans hstf (le_principal_iff.2 (inter_subset_left _ _))).

I think the problem is that the first proof is not valid because the type ofhstf is not the same as the type of (le_trans hstf (le_principal_iff.2 (inter_subset_left _ _))).

The second proof is valid because the type ofhstf is the same as the type of (le_trans hstf (le_principal_iff.2 (inter_subset_left _ _))).

I think the problem is that the first proof is not valid because the type ofhstf is not the same as the type of (le_trans hstf (le_principal_iff.2 (inter_subset_left _ _))).

The second proof is valid because the type ofhstf is the same as the type of (le_trans hstf (le_principal_iff.2 (inter_subset_left _ _))).

I think the problem is that the first proof is not valid because the type ofhstf is not the same as the type of (le_trans hstf (le_principal_iff.2 (inter_subset_left _ _))).

The second proof is valid because the type ofhstf is the same as the type of (le_trans hstf (le_principal_iff.2 (inter_subset_left _ _))

Attempt failure.

Working on Mathlib/Topology/Homotopy/HSpaces.lean - 2024-09-07 13:15:16.612373.
---95/100---
For theorem unitInterval.continuous_qRight in Mathlib/Topology/Homotopy/HSpaces.lean:
theorem continuous_qRight : Continuous qRight 


Original valid proof:
:=
  continuous_projIcc.comp <|
    Continuous.div (by fun_prop) (by fun_prop) fun x ↦ (add_pos zero_lt_one).ne'


Verifying proof (Commit f655aad92f39fa1eff3436b3b0c4a1004e666b53):
 :=
  by unfold qRight; fun_prop

####  Kevin Buzzard (Mar 20 2020 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2020 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2020 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2020 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2020 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2020 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2020 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2020 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2020 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2020 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2020 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2020 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2020 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2020 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2020 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2020 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2020 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2020 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2020 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2020 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2020 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2020 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2020 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2020 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2020 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2020 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2020 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2020 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2020 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2020 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2020 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2020 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2020 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2020 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2020 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2020 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2020 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2020 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2020 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2020 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2020 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2020 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2020 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2020 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2020 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2020 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2020 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2020 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2020 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2020 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2020 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2020 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2020 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2020 at 10:00):

I'm not sure what the problem is.

####  Kevin Buzzard (Mar 20 2020 at 10:00):

I'm not sure what the problem is.



Attempt failure.

Working on Mathlib/Topology/Instances/Real.lean - 2024-09-07 13:15:25.230996.
---96/100---
For theorem AddSubgroup.tendsto_zmultiples_subtype_cofinite in Mathlib/Topology/Instances/Real.lean:
theorem tendsto_zmultiples_subtype_cofinite (a : ℝ) :
    Tendsto (zmultiples a).subtype cofinite (cocompact ℝ) 


Original valid proof:
:=
  (zmultiples a).tendsto_coe_cofinite_of_discrete


Verifying proof (Commit 8b24b7412473ebe3dfb3396b9609b7817f5d3868):
 := by
  rcases eq_or_ne a 0 with rfl | ha
  · rw [zmultiples_zero_eq_bot, cofinite_eq_bot]; exact tendsto_bot
  · calc cofinite.map (zmultiples a).subtype
      ≤ .map (zmultiples a).subtype (.map (rangeFactorization (· • a)) (@cofinite ℤ)) :=
        Filter.map_mono surjective_onto_range.le_map_cofinite
    _ = (@cofinite ℤ).map (zmultiplesHom ℝ a) := Filter.map_map
    _ ≤ cocompact ℝ := Int.tendsto_zmultiplesHom_cofinite ha

## 1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.

Attempt failure.

Working on Mathlib/Topology/MetricSpace/HausdorffDistance.lean - 2024-09-07 13:15:33.728819.
---97/100---
For theorem EMetric.infEdist_singleton in Mathlib/Topology/MetricSpace/HausdorffDistance.lean:
theorem infEdist_singleton : infEdist x {y} = edist x y 


Original valid proof:
:=
  iInf_singleton


Verifying proof (Commit 75499222cc11ae5a47a99ba69c3066b962a0dc6f):
 :=
  infᵢ_singleton (λ z, edist x z)

####  Floris van Doorn (May 01 2020 at 08:00):

I'm not sure if this is a bug, but it's a bit confusing.

####  Floris van Doorn (May 01 2020 at 08:01):

I think the problem is that the type of the function is not inferred correctly.

####  Floris van Doorn (May 01 2020 at 08:01):

I'm not sure if this is a bug, but it's a bit confusing.

####  Floris van Doorn (May 01 2020 at 08:01):

I think the problem is that the type of the function is not inferred correctly.

####  Floris van Doorn (May 01 2020 at 08:02):

I'm not sure if this is a bug, but it's a bit confusing.

####  Floris van Doorn (May 01 2020 at 08:02):

I think the problem is that the type of the function is not inferred correctly.

####  Floris van Doorn (May 01 2020 at 08:02):

I'm not sure if this is a bug, but it's a bit confusing.

####  Floris van Doorn (May 01 2020 at 08:02):

I think the problem is that the type of the function is not inferred correctly.

####  Floris van Doorn (May 01 2020 at 08:02):

I'm not sure if this is a bug, but it's a bit confusing.

####  Floris van Doorn (May 01 2020 at 08:02):

I think the problem is that the type of the function is not inferred correctly.

####  Floris van Doorn (May 01 2020 at 08:02):

I'm not sure if this is a bug, but it's a bit confusing.

####  Floris van Doorn (May 01 2020 at 08:02):

I think the problem is that the type of the function is not inferred correctly.

####  Floris van Doorn (May 01 2020 at 08:02):

I'm not sure if this is a bug, but it's a bit confusing.

####  Floris van Doorn (May 01 2020 at 08:02):

I think the problem is that the type of the function is not inferred correctly.

####  Floris van Doorn (May 01 2020 at 08:02):

I'm not sure if this is a bug, but it's a bit confusing.

####  Floris van Doorn (May 01 2020 at 08:02):

I think the problem is that the type of the function is not inferred correctly.

####  Floris van Doorn (May 01 2020 at 08:02):

I'm not sure if this is a bug, but it's a bit confusing.

####  Floris van Doorn (May 01 2020 at 08:02):

I think the problem is that the type of the function is not inferred correctly.

####  Floris van Doorn (May 01 2020 at 08:02):

I'm not sure if this is a bug, but it's a bit confusing.

####  Floris van Doorn (May 01 2020 at 08:02):

I think the problem is that the type of the function is not inferred correctly.

####  Floris van Doorn (May 01 2020 at 08:02):

I'm not sure if this is a bug, but it's a bit confusing.

####  Floris van Doorn (May 01 2020 at 08:02):

I think the problem is that the type of the function is not inferred correctly.

####  Floris van Doorn (May 01 2020 at 08:02):

I'm not sure if this is a bug, but it's a bit confusing.

####  Floris van Doorn (May 01 2020 at 08:02):

I think the problem is that the type of the function is not inferred correctly.

####  Floris van Doorn (May 01 2020 at 08:02):

I'm not sure if this is a bug, but it's a bit confusing.

####  Floris van Doorn (May 01 2020 at 08:02):

I think the problem is that the type of the function is not inferred correctly.

####  Floris van Doorn (May 01 2020 at 08:02):

I'm not sure if this is a bug, but it's a bit confusing.

####  Floris van Doorn (May 01 2020 at 08:02):

I think the problem is that the type of the function is not inferred correctly.

####  Floris van Doorn (May 01 2020 at 08:02):

I'm not sure if this is a bug, but it's a bit confusing.

####  Floris van Doorn (May 01 2020 at 08:02):

I think the problem is that the type of the function is not inferred correctly.

####  Floris van Doorn (May 01 2020 at 08:02):

I'm not sure if this is a bug, but it's a bit confusing.

####  Floris van Doorn (May 01 2020 at 08:02):

I think the problem is that the type of the function is not inferred correctly.

####  Floris van Doorn (May 01 2020 at 08:02):

I'm not sure if this is a bug, but it's a bit confusing.

####  Floris van Doorn (May 01 2020 at 08:02):

I think the problem is that the type of the function is not inferred correctly.

####  Floris van Doorn (May 01 2020 at 08:02):

I'm not sure if this is a bug, but it's a bit confusing.

####  Floris van Doorn (May 01 2020 at 08:02):

I think the problem is that the type of the function is not inferred correctly.

####  Floris van Doorn (May 01 2020 at 08:02):

I'm not sure if this is a bug, but it's a bit confusing.

####  Floris van Doorn (May 01 2020 at 08:02):

I think the problem is that the type of the function is not inferred correctly.

####  Floris van Doorn (May 01 2020 at 08:02):

I'm not sure if this is a bug, but it's a bit confusing.

####  Floris van Doorn (May 01 2020 at 08:02):

I think the problem is that the type of the function is not inferred correctly.

####  Floris van Doorn (May 01 2020 at 08:02):

I'm not sure if this is a bug, but it's a bit confusing.

####  Floris van Doorn (May 01 2020 at 08:02):

I think the problem is that the type of the function is not inferred correctly.

####  Floris van Doorn (May 01 2020 at 08:02):

I'm not sure if this is a bug, but it's a bit confusing.

####  Floris van Doorn (May 01 2020 at 08:02):



Attempt failure.

Working on Mathlib/Topology/OmegaCompletePartialOrder.lean - 2024-09-07 13:15:44.260039.
---98/100---
For theorem notBelow_isOpen in Mathlib/Topology/OmegaCompletePartialOrder.lean:
theorem notBelow_isOpen : IsOpen (notBelow y) 


Original valid proof:
:= by
  have h : Monotone (notBelow y) := fun x z hle ↦ mt hle.trans
  refine ⟨h, fun c ↦ eq_of_forall_ge_iff fun z ↦ ?_⟩
  simp only [ωSup_le_iff, notBelow, mem_setOf_eq, le_Prop_eq, OrderHom.coe_mk, Chain.map_coe,
    Function.comp_apply, exists_imp, not_forall]


Verifying proof (Commit 4fafac3c913ccc407e26d1bc00d7f75cec309030):
 := by
  have h : Monotone (notBelow y) := fun x z hle ↦ mt hle.trans
  change ωScottContinuous fun x ↦ x ∈ (notBelow y)
  rw [← continuous'_iff_ωScottContinuous]
  refine ⟨h, fun c ↦ eq_of_forall_ge_iff fun z ↦ ?_⟩
  simp only [ωSup_le_iff, notBelow, mem_setOf_eq, le_Prop_eq, OrderHom.coe_mk, Chain.map_coe,
    Function.comp_apply, exists_imp, not_forall]
  constructor
  · intro hz
    obtain ⟨x, hx, hz⟩ := hz
    obtain ⟨i, hi⟩ := hx
    exact ⟨i, fun j hj ↦ hi j hj hz⟩
  · rintro ⟨i, hi⟩
    obtain ⟨x, hx, hz⟩ := hi i le_rfl
    exact ⟨x, hx, hz⟩

## 1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.

Attempt failure.

Working on Mathlib/Topology/Order/IsLUB.lean - 2024-09-07 13:15:50.844132.
---99/100---
For theorem IsLUB.mem_upperBounds_of_tendsto in Mathlib/Topology/Order/IsLUB.lean:
theorem IsLUB.mem_upperBounds_of_tendsto [Preorder γ] [TopologicalSpace γ] [OrderClosedTopology γ]
    {f : α → γ} {s : Set α} {a : α} {b : γ} (hf : MonotoneOn f s) (ha : IsLUB s a)
    (hb : Tendsto f (𝓝[s] a) (𝓝 b)) : b ∈ upperBounds (f '' s) 


Original valid proof:
:= by
  rintro _ ⟨x, hx, rfl⟩
  replace ha := ha.inter_Ici_of_mem hx
  haveI := ha.nhdsWithin_neBot ⟨x, hx, le_rfl⟩
  refine ge_of_tendsto (hb.mono_left (nhdsWithin_mono a (inter_subset_left (t := Ici x)))) ?_
  exact mem_of_superset self_mem_nhdsWithin fun y hy => hf hx hy.1 hy.2


Verifying proof (Commit cc6e5e01514b06a44caccb55bc04e269ede6a7c8):
 := by
  rintro _ ⟨x, hx, rfl⟩
  replace ha := ha.inter_Ici_of_mem hx
  haveI := ha.nhdsWithin_neBot ⟨x, hx, le_rfl⟩
  refine' ge_of_tendsto (hb.mono_left (nhdsWithin_mono _ (inter_subset_left s (Ici x)))) _
  exact mem_of_superset self_mem_nhdsWithin fun y hy => hf hx hy.1 hy.2

####  Yury G. Kudryashov (Jul 01 2020 at 18:00):

I'm not sure that this is a bug.

####  Yury G. Kudryashov (Jul 01 2020 at 18:01):

I think that the problem is that the proof ofmem_of_superset is not using the fact that the filter is not_bot.

####  Yury G. Kudryashov (Jul 01 2020 at 18:02):

I'm not sure that this is a bug.

I'm not sure that this is a feature.

####  Yury G. Kudryashov (Jul 01 2020 at 18:02):

I think that the problem is that the proof of
mem_of_superset is not using the fact that the filter is not_bot.
I think that the problem is that the proof ofmem_of_superset is not using the fact that the filter is not_bot.

####  Yury G. Kudryashov (Jul 01 2020 at 18:03):

I'm not sure that this is a bug.

I'm not sure that this is a feature.

I'm not sure that this is a feature.

####  Yury G. Kudryashov (Jul 01 2020 at 18:03):

I think that the problem is that the proof ofmem_of_superset is not using the fact that the filter is not_bot.

I think that the problem is that the proof ofmem_of_superset is not using the fact that the filter is not_bot.

####  Yury G. Kudryashov (Jul 01 2020 at 18:04):

I'm not sure that this is a bug.

I'm not sure that this is a feature.

I'm not sure that this is a feature.

I'm not sure that this is a feature.

####  Yury G. Kudryashov (Jul 01 2020 at 18:04):

I think that the problem is that the proof ofmem_of_superset is not using the fact that the filter is not_bot.

I think that the problem is that the proof ofmem_of_superset is not using the fact that the filter is not_bot.

####  Yury G. Kudryashov (Jul 01 2020 at 18:05):

I'm not sure that this is a bug.

I'm not sure that this is a feature.

I'm not sure that this is a feature.

I'm not sure that this is a feature.

I'm not sure that this is a feature.

####  Yury G. Kudryashov (Jul 01 2020 at 18:05):

I think that the problem is that the proof ofmem_of_superset is not using the fact that the filter is not_bot.

I think that the problem is that the proof ofmem_of_superset is not using the fact that the filter is not_bot.

####  Yury G. Kudryashov (Jul 01 2020 at 18:06):

I'm not sure that this is a bug.

I'm not sure that this is a feature.

I'm not sure that this is a feature.

I'm not sure that this is a feature.

I'm not sure that this is a feature.

I'm not sure that this is a feature.

####  Yury G. Kudryashov (Jul 01 2020 at 18:06):

I think that the problem is that the proof ofmem_of_superset is not using the fact that the filter is not_bot.

I think that the problem is that the proof ofmem_of_superset is not using the fact that the filter is not_bot.

####  Yury G. Kudryashov (Jul 01 2020 at 18:07):

I'm not sure that this is a bug.

I'm not sure that this is a feature.

I'm not sure that this is a feature.

I'm not sure that this is a feature.

I'm not sure that this is a feature.

I'm not sure that this is a feature.

I'm not sure that this is a feature.

####  Yury G. Kudryashov (Jul 01 2020 at 18:07):

I think that the problem is that the proof ofmem_of_superset is not using the fact that the filter is not_bot.

I think that the problem is that the proof ofmem_of_superset is not using the fact that the filter is not_bot.

####  Yury G. Kudryashov (Jul 01 2020 at 18:08):

I'm not sure that this is a bug.

I'm not sure that this is a feature.

I'm not sure that this is a feature.

I'm not sure that this is a feature.

I'm not sure that this is a feature.

I'm not sure that this is a feature.

I'm not sure that this is a feature.

I'm not sure that this is a feature.

####  Yury G. Kudryashov (Jul 01 2020 at 18:08):

I think that the problem is that the proof ofmem_of_superset is not using the fact that the filter is not_bot.

I think that the problem is that the proof ofmem_of_superset is not using the fact that the filter is not_bot.

####  Yury G. Kudryashov (Jul 01 2020 at 18:09):

I'm not sure that this is a bug.

I'm not sure that this is a feature.

I'm not sure that this is a feature.

I'm not sure that this is a feature.

I'm not sure that this is a feature.

I'm not sure that this is a feature.

I'm not sure that this is a feature.

I'm not sure that this is a feature.

I'm not sure that this is a feature.

####  Yury G. Kudryashov (Jul 01 2020 at 18:09):

I think that the problem is that the proof ofmem_of_superset is not using the fact that the filter is not_bot.

I think that the problem is that the proof ofmem_of_superset is not using the fact that the filter is not_bot.

####  Yury G. Kudryashov (Jul 01 2020 at 18:10):

I'm not sure that this is a bug.

I'm not sure that this is a feature.

I'm not sure that this is a feature.

I'm not sure that this is a feature.

I'm not sure that this is a feature.

I'm not sure that this is a feature.

I'm not sure that this is a feature.

I'm not sure that this is a feature.

I'm not sure that this is a feature.

I'm not sure that this is a feature.

I'm not sure that this is a feature.

####  Yury G. Kudryashov (Jul 01 2020 at 18:10):

I think that the problem is that the proof ofmem_of_superset is not using the fact that the filter is not_bot.

I think that the problem is that

Attempt failure.

Working on Mathlib/Topology/ProperMap.lean - 2024-09-07 13:15:59.310169.
---100/100---
For theorem isProperMap_iff_isClosedMap_and_tendsto_cofinite in Mathlib/Topology/ProperMap.lean:
lemma isProperMap_iff_isClosedMap_and_tendsto_cofinite [T1Space Y] :
    IsProperMap f ↔ Continuous f ∧ IsClosedMap f ∧ Tendsto f (cocompact X) cofinite 


Original valid proof:
:= by
  simp_rw [isProperMap_iff_isClosedMap_and_compact_fibers, Tendsto,
    le_cofinite_iff_compl_singleton_mem, mem_map, preimage_compl]
  refine and_congr_right fun f_cont ↦ and_congr_right fun _ ↦
    ⟨fun H y ↦ (H y).compl_mem_cocompact, fun H y ↦ ?_⟩
  rcases mem_cocompact.mp (H y) with ⟨K, hK, hKy⟩
  exact hK.of_isClosed_subset (isClosed_singleton.preimage f_cont)
    (compl_le_compl_iff_le.mp hKy)


Verifying proof (Commit 8c47c4038ef15eef85511d722c657967f031d078):
 := by
  simp_rw [isProperMap_iff_isClosedMap_and_compact_fibers, Tendsto,
    le_cofinite_iff_compl_singleton_mem, mem_map, preimage_compl]
  refine and_congr_right fun f_cont ↦ and_congr_right fun _ ↦
    ⟨fun H y ↦ (H y).compl_mem_cocompact, fun H y ↦ ?_⟩
  rcases mem_cocompact.mp (H y) with ⟨K, hK, hKy⟩
  exact isCompact_of_isClosed_subset hK (isClosed_singleton.preimage f_cont)
    (compl_le_compl_iff_le.mp hKy)

## Your Answer

By clicking “Post Your Answer”, you agree to our terms of service, privacy policy and cookie policy

Attempt failure.

STARTING: Lean repo copy removal
DONE: Lean repo copy removal
Among 100 proof attempts, there were 1 successful and 99 failed attempts at proving their respect theorems.
The rate of successful proof = 0.01.
